
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4822      	ldr	r0, [pc, #136]	; (800024c <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f005 fb4d 	bl	8005870 <__core_init>
 80001d6:	f003 fc4b 	bl	8003a70 <__early_init>
 80001da:	481d      	ldr	r0, [pc, #116]	; (8000250 <endfiniloop+0x8>)
 80001dc:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xc>)
 80001de:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	e7fa      	bcc.n	80001e0 <msloop>
 80001ea:	491c      	ldr	r1, [pc, #112]	; (800025c <endfiniloop+0x14>)
 80001ec:	4a17      	ldr	r2, [pc, #92]	; (800024c <endfiniloop+0x4>)

080001ee <psloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <psloop>
 80001f8:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x18>)
 80001fa:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <endfiniloop+0x1c>)
 80001fc:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x20>)

080001fe <dloop>:
 80001fe:	429a      	cmp	r2, r3
 8000200:	bf3e      	ittt	cc
 8000202:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000206:	f842 0b04 	strcc.w	r0, [r2], #4
 800020a:	e7f8      	bcc.n	80001fe <dloop>
 800020c:	2000      	movs	r0, #0
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <endfiniloop+0x24>)
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x28>)

08000212 <bloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <bloop>
 800021c:	f005 faf0 	bl	8005800 <__init_ram_areas>
 8000220:	f005 fb1e 	bl	8005860 <__late_init>
 8000224:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2c>)
 8000226:	4d14      	ldr	r5, [pc, #80]	; (8000278 <endfiniloop+0x30>)

08000228 <initloop>:
 8000228:	42ac      	cmp	r4, r5
 800022a:	da03      	bge.n	8000234 <endinitloop>
 800022c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000230:	4788      	blx	r1
 8000232:	e7f9      	b.n	8000228 <initloop>

08000234 <endinitloop>:
 8000234:	f000 fb1c 	bl	8000870 <main>
 8000238:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x34>)
 800023a:	4d11      	ldr	r5, [pc, #68]	; (8000280 <endfiniloop+0x38>)

0800023c <finiloop>:
 800023c:	42ac      	cmp	r4, r5
 800023e:	da03      	bge.n	8000248 <endfiniloop>
 8000240:	f854 1b04 	ldr.w	r1, [r4], #4
 8000244:	4788      	blx	r1
 8000246:	e7f9      	b.n	800023c <finiloop>

08000248 <endfiniloop>:
 8000248:	f005 bb02 	b.w	8005850 <__default_exit>
 800024c:	20000800 	.word	0x20000800
 8000250:	55555555 	.word	0x55555555
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08006b50 	.word	0x08006b50
 8000264:	20000800 	.word	0x20000800
 8000268:	200008b8 	.word	0x200008b8
 800026c:	200008b8 	.word	0x200008b8
 8000270:	20001378 	.word	0x20001378
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f005 f910 	bl	80054d0 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f004 fea6 	bl	8005000 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <bmk12_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <bmk12_setup+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80002c2:	2200      	movs	r2, #0
 80002c4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80002c6:	605b      	str	r3, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	4770      	bx	lr
 80002cc:	20000b34 	.word	0x20000b34

080002d0 <bmk11_setup>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <bmk11_setup+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80002d2:	2201      	movs	r2, #1
 80002d4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80002d6:	605b      	str	r3, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	4770      	bx	lr
 80002dc:	20000a30 	.word	0x20000a30

080002e0 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
	...

080002f0 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80002f0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <Thread1+0x28>)
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <Thread1+0x2c>)
 80002f6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 80002f8:	4c09      	ldr	r4, [pc, #36]	; (8000320 <Thread1+0x30>)
 80002fa:	619a      	str	r2, [r3, #24]
 80002fc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000300:	462e      	mov	r6, r5
 8000302:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8000304:	f241 3088 	movw	r0, #5000	; 0x1388
 8000308:	f005 f9e2 	bl	80056d0 <chThdSleep>
    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 800030c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 800030e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000312:	f005 f9dd 	bl	80056d0 <chThdSleep>
 8000316:	e7f4      	b.n	8000302 <Thread1+0x12>
 8000318:	20000b78 	.word	0x20000b78
 800031c:	08006210 	.word	0x08006210
 8000320:	40020c00 	.word	0x40020c00
	...

08000330 <bmk13_execute>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8000330:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8000332:	482f      	ldr	r0, [pc, #188]	; (80003f0 <bmk13_execute+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8000334:	4c2f      	ldr	r4, [pc, #188]	; (80003f4 <bmk13_execute+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8000336:	f003 fb5b 	bl	80039f0 <test_print>
  test_printn(sizeof(ch_system_t));
 800033a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800033e:	f003 fb67 	bl	8003a10 <test_printn>
  test_println(" bytes");
 8000342:	4620      	mov	r0, r4
 8000344:	f003 fb34 	bl	80039b0 <test_println>
  test_print("--- Thread: ");
 8000348:	482b      	ldr	r0, [pc, #172]	; (80003f8 <bmk13_execute+0xc8>)
 800034a:	f003 fb51 	bl	80039f0 <test_print>
  test_printn(sizeof(thread_t));
 800034e:	2044      	movs	r0, #68	; 0x44
 8000350:	f003 fb5e 	bl	8003a10 <test_printn>
  test_println(" bytes");
 8000354:	4620      	mov	r0, r4
 8000356:	f003 fb2b 	bl	80039b0 <test_println>
  test_print("--- Timer : ");
 800035a:	4828      	ldr	r0, [pc, #160]	; (80003fc <bmk13_execute+0xcc>)
 800035c:	f003 fb48 	bl	80039f0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8000360:	2014      	movs	r0, #20
 8000362:	f003 fb55 	bl	8003a10 <test_printn>
  test_println(" bytes");
 8000366:	4620      	mov	r0, r4
 8000368:	f003 fb22 	bl	80039b0 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 800036c:	4824      	ldr	r0, [pc, #144]	; (8000400 <bmk13_execute+0xd0>)
 800036e:	f003 fb3f 	bl	80039f0 <test_print>
  test_printn(sizeof(semaphore_t));
 8000372:	200c      	movs	r0, #12
 8000374:	f003 fb4c 	bl	8003a10 <test_printn>
  test_println(" bytes");
 8000378:	4620      	mov	r0, r4
 800037a:	f003 fb19 	bl	80039b0 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800037e:	4821      	ldr	r0, [pc, #132]	; (8000404 <bmk13_execute+0xd4>)
 8000380:	f003 fb36 	bl	80039f0 <test_print>
  test_printn(sizeof(event_source_t));
 8000384:	2004      	movs	r0, #4
 8000386:	f003 fb43 	bl	8003a10 <test_printn>
  test_println(" bytes");
 800038a:	4620      	mov	r0, r4
 800038c:	f003 fb10 	bl	80039b0 <test_println>
  test_print("--- EventL: ");
 8000390:	481d      	ldr	r0, [pc, #116]	; (8000408 <bmk13_execute+0xd8>)
 8000392:	f003 fb2d 	bl	80039f0 <test_print>
  test_printn(sizeof(event_listener_t));
 8000396:	2014      	movs	r0, #20
 8000398:	f003 fb3a 	bl	8003a10 <test_printn>
  test_println(" bytes");
 800039c:	4620      	mov	r0, r4
 800039e:	f003 fb07 	bl	80039b0 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 80003a2:	481a      	ldr	r0, [pc, #104]	; (800040c <bmk13_execute+0xdc>)
 80003a4:	f003 fb24 	bl	80039f0 <test_print>
  test_printn(sizeof(mutex_t));
 80003a8:	2010      	movs	r0, #16
 80003aa:	f003 fb31 	bl	8003a10 <test_printn>
  test_println(" bytes");
 80003ae:	4620      	mov	r0, r4
 80003b0:	f003 fafe 	bl	80039b0 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80003b4:	4816      	ldr	r0, [pc, #88]	; (8000410 <bmk13_execute+0xe0>)
 80003b6:	f003 fb1b 	bl	80039f0 <test_print>
  test_printn(sizeof(condition_variable_t));
 80003ba:	2008      	movs	r0, #8
 80003bc:	f003 fb28 	bl	8003a10 <test_printn>
  test_println(" bytes");
 80003c0:	4620      	mov	r0, r4
 80003c2:	f003 faf5 	bl	80039b0 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 80003c6:	4813      	ldr	r0, [pc, #76]	; (8000414 <bmk13_execute+0xe4>)
 80003c8:	f003 fb12 	bl	80039f0 <test_print>
  test_printn(sizeof(io_queue_t));
 80003cc:	2024      	movs	r0, #36	; 0x24
 80003ce:	f003 fb1f 	bl	8003a10 <test_printn>
  test_println(" bytes");
 80003d2:	4620      	mov	r0, r4
 80003d4:	f003 faec 	bl	80039b0 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <bmk13_execute+0xe8>)
 80003da:	f003 fb09 	bl	80039f0 <test_print>
  test_printn(sizeof(mailbox_t));
 80003de:	2028      	movs	r0, #40	; 0x28
 80003e0:	f003 fb16 	bl	8003a10 <test_printn>
  test_println(" bytes");
 80003e4:	4620      	mov	r0, r4
#endif
}
 80003e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80003ea:	f003 bae1 	b.w	80039b0 <test_println>
 80003ee:	bf00      	nop
 80003f0:	08006218 	.word	0x08006218
 80003f4:	08006228 	.word	0x08006228
 80003f8:	08006230 	.word	0x08006230
 80003fc:	08006240 	.word	0x08006240
 8000400:	08006250 	.word	0x08006250
 8000404:	08006260 	.word	0x08006260
 8000408:	08006270 	.word	0x08006270
 800040c:	08006280 	.word	0x08006280
 8000410:	08006290 	.word	0x08006290
 8000414:	080062a0 	.word	0x080062a0
 8000418:	080062b0 	.word	0x080062b0
 800041c:	00000000 	.word	0x00000000

08000420 <bmk12_execute>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8000420:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8000422:	f003 f8fd 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 8000426:	f005 fcc3 	bl	8005db0 <test_start_timer.constprop.2>
 800042a:	4d14      	ldr	r5, [pc, #80]	; (800047c <bmk12_execute+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800042c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800042e:	4814      	ldr	r0, [pc, #80]	; (8000480 <bmk12_execute+0x60>)
 8000430:	f005 f816 	bl	8005460 <chMtxLock>
    chMtxUnlock(&mtx1);
 8000434:	4812      	ldr	r0, [pc, #72]	; (8000480 <bmk12_execute+0x60>)
 8000436:	f004 ff73 	bl	8005320 <chMtxUnlock>
    chMtxLock(&mtx1);
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <bmk12_execute+0x60>)
 800043c:	f005 f810 	bl	8005460 <chMtxLock>
    chMtxUnlock(&mtx1);
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <bmk12_execute+0x60>)
 8000442:	f004 ff6d 	bl	8005320 <chMtxUnlock>
    chMtxLock(&mtx1);
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <bmk12_execute+0x60>)
 8000448:	f005 f80a 	bl	8005460 <chMtxLock>
    chMtxUnlock(&mtx1);
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <bmk12_execute+0x60>)
 800044e:	f004 ff67 	bl	8005320 <chMtxUnlock>
    chMtxLock(&mtx1);
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <bmk12_execute+0x60>)
 8000454:	f005 f804 	bl	8005460 <chMtxLock>
    chMtxUnlock(&mtx1);
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <bmk12_execute+0x60>)
 800045a:	f004 ff61 	bl	8005320 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800045e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8000460:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0e3      	beq.n	800042e <bmk12_execute+0xe>
  test_print("--- Score : ");
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <bmk12_execute+0x64>)
 8000468:	f003 fac2 	bl	80039f0 <test_print>
  test_printn(n * 4);
 800046c:	00a0      	lsls	r0, r4, #2
 800046e:	f003 facf 	bl	8003a10 <test_printn>
  test_println(" lock+unlock/S");
 8000472:	4805      	ldr	r0, [pc, #20]	; (8000488 <bmk12_execute+0x68>)
}
 8000474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8000478:	f003 ba9a 	b.w	80039b0 <test_println>
 800047c:	20000cc8 	.word	0x20000cc8
 8000480:	20000b34 	.word	0x20000b34
 8000484:	080062c0 	.word	0x080062c0
 8000488:	080062d0 	.word	0x080062d0
 800048c:	00000000 	.word	0x00000000

08000490 <bmk11_execute>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8000490:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8000492:	f003 f8c5 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 8000496:	f005 fc8b 	bl	8005db0 <test_start_timer.constprop.2>
 800049a:	4d14      	ldr	r5, [pc, #80]	; (80004ec <bmk11_execute+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 800049c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 800049e:	4814      	ldr	r0, [pc, #80]	; (80004f0 <bmk11_execute+0x60>)
 80004a0:	f004 fe86 	bl	80051b0 <chSemWait>
    chSemSignal(&sem1);
 80004a4:	4812      	ldr	r0, [pc, #72]	; (80004f0 <bmk11_execute+0x60>)
 80004a6:	f004 fe0b 	bl	80050c0 <chSemSignal>
    chSemWait(&sem1);
 80004aa:	4811      	ldr	r0, [pc, #68]	; (80004f0 <bmk11_execute+0x60>)
 80004ac:	f004 fe80 	bl	80051b0 <chSemWait>
    chSemSignal(&sem1);
 80004b0:	480f      	ldr	r0, [pc, #60]	; (80004f0 <bmk11_execute+0x60>)
 80004b2:	f004 fe05 	bl	80050c0 <chSemSignal>
    chSemWait(&sem1);
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <bmk11_execute+0x60>)
 80004b8:	f004 fe7a 	bl	80051b0 <chSemWait>
    chSemSignal(&sem1);
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <bmk11_execute+0x60>)
 80004be:	f004 fdff 	bl	80050c0 <chSemSignal>
    chSemWait(&sem1);
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <bmk11_execute+0x60>)
 80004c4:	f004 fe74 	bl	80051b0 <chSemWait>
    chSemSignal(&sem1);
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <bmk11_execute+0x60>)
 80004ca:	f004 fdf9 	bl	80050c0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80004ce:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80004d0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0e3      	beq.n	800049e <bmk11_execute+0xe>
  test_print("--- Score : ");
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <bmk11_execute+0x64>)
 80004d8:	f003 fa8a 	bl	80039f0 <test_print>
  test_printn(n * 4);
 80004dc:	00a0      	lsls	r0, r4, #2
 80004de:	f003 fa97 	bl	8003a10 <test_printn>
  test_println(" wait+signal/S");
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <bmk11_execute+0x68>)
}
 80004e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80004e8:	f003 ba62 	b.w	80039b0 <test_println>
 80004ec:	20000cc8 	.word	0x20000cc8
 80004f0:	20000a30 	.word	0x20000a30
 80004f4:	080062c0 	.word	0x080062c0
 80004f8:	080062e0 	.word	0x080062e0
 80004fc:	00000000 	.word	0x00000000

08000500 <bmk10_execute>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8000500:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8000502:	f003 f88d 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 8000506:	f005 fc53 	bl	8005db0 <test_start_timer.constprop.2>
 800050a:	4d15      	ldr	r5, [pc, #84]	; (8000560 <bmk10_execute+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800050c:	2400      	movs	r4, #0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800050e:	2320      	movs	r3, #32
 8000510:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <bmk10_execute+0x64>)
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <bmk10_execute+0x68>)
 8000518:	2101      	movs	r1, #1
 800051a:	2300      	movs	r3, #0
 800051c:	f005 f838 	bl	8005590 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <bmk10_execute+0x68>)
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <bmk10_execute+0x6c>)
 8000524:	f242 7110 	movw	r1, #10000	; 0x2710
 8000528:	2300      	movs	r3, #0
 800052a:	f005 f831 	bl	8005590 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800052e:	480d      	ldr	r0, [pc, #52]	; (8000564 <bmk10_execute+0x64>)
 8000530:	f004 fff6 	bl	8005520 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <bmk10_execute+0x6c>)
 8000536:	f004 fff3 	bl	8005520 <chVTDoResetI>
 800053a:	2300      	movs	r3, #0
 800053c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8000540:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8000542:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0e2      	beq.n	800050e <bmk10_execute+0xe>
  test_print("--- Score : ");
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <bmk10_execute+0x70>)
 800054a:	f003 fa51 	bl	80039f0 <test_print>
  test_printn(n * 2);
 800054e:	0060      	lsls	r0, r4, #1
 8000550:	f003 fa5e 	bl	8003a10 <test_printn>
  test_println(" timers/S");
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <bmk10_execute+0x74>)
}
 8000556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 800055a:	f003 ba29 	b.w	80039b0 <test_println>
 800055e:	bf00      	nop
 8000560:	20000cc8 	.word	0x20000cc8
 8000564:	200008b8 	.word	0x200008b8
 8000568:	080002e1 	.word	0x080002e1
 800056c:	20000b20 	.word	0x20000b20
 8000570:	080062c0 	.word	0x080062c0
 8000574:	080062f0 	.word	0x080062f0
	...

08000580 <bmk9_execute>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000582:	4a26      	ldr	r2, [pc, #152]	; (800061c <bmk9_execute+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <bmk9_execute+0xa0>)
 8000586:	4f27      	ldr	r7, [pc, #156]	; (8000624 <bmk9_execute+0xa4>)
 8000588:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800058a:	2400      	movs	r4, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800058c:	f102 0110 	add.w	r1, r2, #16
  tqp->p_prev = (thread_t *)tqp;
 8000590:	605b      	str	r3, [r3, #4]
 8000592:	6119      	str	r1, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000594:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8000596:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8000598:	615a      	str	r2, [r3, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800059a:	609c      	str	r4, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 800059c:	61dc      	str	r4, [r3, #28]
  iqp->q_link    = link;
 800059e:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 80005a0:	f003 f83e 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 80005a4:	f005 fc04 	bl	8005db0 <test_start_timer.constprop.2>
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80005a8:	4626      	mov	r6, r4
 80005aa:	2520      	movs	r5, #32
 80005ac:	f385 8811 	msr	BASEPRI, r5
 80005b0:	2100      	movs	r1, #0
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <bmk9_execute+0xa0>)
 80005b4:	f003 fce4 	bl	8003f80 <chIQPutI>
    chIQPutI(&iq, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <bmk9_execute+0xa0>)
 80005bc:	f003 fce0 	bl	8003f80 <chIQPutI>
    chIQPutI(&iq, 2);
 80005c0:	2102      	movs	r1, #2
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <bmk9_execute+0xa0>)
 80005c4:	f003 fcdc 	bl	8003f80 <chIQPutI>
    chIQPutI(&iq, 3);
 80005c8:	2103      	movs	r1, #3
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <bmk9_execute+0xa0>)
 80005cc:	f003 fcd8 	bl	8003f80 <chIQPutI>
 80005d0:	f386 8811 	msr	BASEPRI, r6
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80005d4:	f04f 31ff 	mov.w	r1, #4294967295
 80005d8:	4811      	ldr	r0, [pc, #68]	; (8000620 <bmk9_execute+0xa0>)
 80005da:	f003 fc99 	bl	8003f10 <chIQGetTimeout>
 80005de:	f04f 31ff 	mov.w	r1, #4294967295
 80005e2:	480f      	ldr	r0, [pc, #60]	; (8000620 <bmk9_execute+0xa0>)
 80005e4:	f003 fc94 	bl	8003f10 <chIQGetTimeout>
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <bmk9_execute+0xa0>)
 80005ee:	f003 fc8f 	bl	8003f10 <chIQGetTimeout>
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <bmk9_execute+0xa0>)
 80005f4:	f04f 31ff 	mov.w	r1, #4294967295
 80005f8:	f003 fc8a 	bl	8003f10 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80005fc:	783b      	ldrb	r3, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 80005fe:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0d3      	beq.n	80005ac <bmk9_execute+0x2c>
  test_print("--- Score : ");
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <bmk9_execute+0xa8>)
 8000606:	f003 f9f3 	bl	80039f0 <test_print>
  test_printn(n * 4);
 800060a:	00a0      	lsls	r0, r4, #2
 800060c:	f003 fa00 	bl	8003a10 <test_printn>
  test_println(" bytes/S");
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <bmk9_execute+0xac>)
}
 8000612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8000616:	f003 b9cb 	b.w	80039b0 <test_println>
 800061a:	bf00      	nop
 800061c:	20000b44 	.word	0x20000b44
 8000620:	20000abc 	.word	0x20000abc
 8000624:	20000cc8 	.word	0x20000cc8
 8000628:	080062c0 	.word	0x080062c0
 800062c:	080062fc 	.word	0x080062fc

08000630 <bmk8_execute>:
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
}

static void bmk8_execute(void) {
 8000630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000634:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8000636:	ac04      	add	r4, sp, #16
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000638:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000708 <bmk8_execute+0xd8>
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800063c:	4f2d      	ldr	r7, [pc, #180]	; (80006f4 <bmk8_execute+0xc4>)
 800063e:	4e2e      	ldr	r6, [pc, #184]	; (80006f8 <bmk8_execute+0xc8>)
 8000640:	4d2e      	ldr	r5, [pc, #184]	; (80006fc <bmk8_execute+0xcc>)
}

static void bmk8_execute(void) {
  uint32_t n;

  n = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8000648:	f002 ffea 	bl	8003620 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800064c:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	9400      	str	r4, [sp, #0]
 8000654:	4633      	mov	r3, r6
 8000656:	3a01      	subs	r2, #1
 8000658:	4638      	mov	r0, r7
 800065a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800065e:	f004 fd4f 	bl	8005100 <chThdCreateStatic>
 8000662:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8000666:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	9400      	str	r4, [sp, #0]
 800066c:	4633      	mov	r3, r6
 800066e:	3a01      	subs	r2, #1
 8000670:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8000674:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000678:	f004 fd42 	bl	8005100 <chThdCreateStatic>
 800067c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8000680:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	9400      	str	r4, [sp, #0]
 8000686:	4633      	mov	r3, r6
 8000688:	3a01      	subs	r2, #1
 800068a:	f507 7024 	add.w	r0, r7, #656	; 0x290
 800068e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000692:	f004 fd35 	bl	8005100 <chThdCreateStatic>
 8000696:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800069a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	9400      	str	r4, [sp, #0]
 80006a0:	4633      	mov	r3, r6
 80006a2:	3a01      	subs	r2, #1
 80006a4:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80006a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006ac:	f004 fd28 	bl	8005100 <chThdCreateStatic>
 80006b0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80006b4:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	9400      	str	r4, [sp, #0]
 80006ba:	3a01      	subs	r2, #1
 80006bc:	4633      	mov	r3, r6
 80006be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80006c2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80006c6:	f004 fd1b 	bl	8005100 <chThdCreateStatic>
 80006ca:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 80006cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80006d0:	f004 fffe 	bl	80056d0 <chThdSleep>
  test_terminate_threads();
 80006d4:	f002 ffcc 	bl	8003670 <test_terminate_threads>
  test_wait_threads();
 80006d8:	f002 ffb2 	bl	8003640 <test_wait_threads>

  test_print("--- Score : ");
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <bmk8_execute+0xd0>)
 80006de:	f003 f987 	bl	80039f0 <test_print>
  test_printn(n);
 80006e2:	9803      	ldr	r0, [sp, #12]
 80006e4:	f003 f994 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <bmk8_execute+0xd4>)
 80006ea:	f003 f961 	bl	80039b0 <test_println>
}
 80006ee:	b004      	add	sp, #16
 80006f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006f4:	20000cf0 	.word	0x20000cf0
 80006f8:	08000711 	.word	0x08000711
 80006fc:	20000b08 	.word	0x20000b08
 8000700:	080062c0 	.word	0x080062c0
 8000704:	08006308 	.word	0x08006308
 8000708:	20000b78 	.word	0x20000b78
 800070c:	00000000 	.word	0x00000000

08000710 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread8, p) {
 8000710:	b538      	push	{r3, r4, r5, lr}
 8000712:	4d09      	ldr	r5, [pc, #36]	; (8000738 <thread8+0x28>)
 8000714:	4604      	mov	r4, r0

  do {
    chThdYield();
 8000716:	f004 fc43 	bl	8004fa0 <chThdYield>
    chThdYield();
 800071a:	f004 fc41 	bl	8004fa0 <chThdYield>
    chThdYield();
 800071e:	f004 fc3f 	bl	8004fa0 <chThdYield>
    chThdYield();
 8000722:	f004 fc3d 	bl	8004fa0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8000726:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8000728:	69aa      	ldr	r2, [r5, #24]
 800072a:	3304      	adds	r3, #4
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8000730:	075b      	lsls	r3, r3, #29
 8000732:	d5f0      	bpl.n	8000716 <thread8+0x6>
}
 8000734:	bd38      	pop	{r3, r4, r5, pc}
 8000736:	bf00      	nop
 8000738:	20000b78 	.word	0x20000b78
 800073c:	00000000 	.word	0x00000000

08000740 <bmk7_execute>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8000740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8000744:	4e3a      	ldr	r6, [pc, #232]	; (8000830 <bmk7_execute+0xf0>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <bmk7_execute+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8000748:	69b2      	ldr	r2, [r6, #24]
 800074a:	483b      	ldr	r0, [pc, #236]	; (8000838 <bmk7_execute+0xf8>)
 800074c:	6892      	ldr	r2, [r2, #8]
 800074e:	4d3b      	ldr	r5, [pc, #236]	; (800083c <bmk7_execute+0xfc>)
 8000750:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8000860 <bmk7_execute+0x120>
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8000754:	b083      	sub	sp, #12
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8000756:	2400      	movs	r4, #0
 8000758:	3205      	adds	r2, #5
 800075a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800075e:	9400      	str	r4, [sp, #0]
 8000760:	f004 fcce 	bl	8005100 <chThdCreateStatic>
 8000764:	69b3      	ldr	r3, [r6, #24]
 8000766:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	4835      	ldr	r0, [pc, #212]	; (8000840 <bmk7_execute+0x100>)
 800076c:	4b31      	ldr	r3, [pc, #196]	; (8000834 <bmk7_execute+0xf4>)
 800076e:	9400      	str	r4, [sp, #0]
 8000770:	3204      	adds	r2, #4
 8000772:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000776:	f004 fcc3 	bl	8005100 <chThdCreateStatic>
 800077a:	69b3      	ldr	r3, [r6, #24]
 800077c:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	4830      	ldr	r0, [pc, #192]	; (8000844 <bmk7_execute+0x104>)
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <bmk7_execute+0xf4>)
 8000784:	9400      	str	r4, [sp, #0]
 8000786:	3203      	adds	r2, #3
 8000788:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800078c:	f004 fcb8 	bl	8005100 <chThdCreateStatic>
 8000790:	69b3      	ldr	r3, [r6, #24]
 8000792:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	482c      	ldr	r0, [pc, #176]	; (8000848 <bmk7_execute+0x108>)
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <bmk7_execute+0xf4>)
 800079a:	9400      	str	r4, [sp, #0]
 800079c:	3202      	adds	r2, #2
 800079e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80007a2:	f004 fcad 	bl	8005100 <chThdCreateStatic>
 80007a6:	69b3      	ldr	r3, [r6, #24]
 80007a8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	4827      	ldr	r0, [pc, #156]	; (800084c <bmk7_execute+0x10c>)
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <bmk7_execute+0xf4>)
 80007b0:	9400      	str	r4, [sp, #0]
 80007b2:	3201      	adds	r2, #1
 80007b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80007b8:	f004 fca2 	bl	8005100 <chThdCreateStatic>
 80007bc:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 80007be:	f002 ff2f 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 80007c2:	f005 faf5 	bl	8005db0 <test_start_timer.constprop.2>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80007c6:	46a0      	mov	r8, r4
 80007c8:	2720      	movs	r7, #32
 80007ca:	2620      	movs	r6, #32
 80007cc:	f387 8811 	msr	BASEPRI, r7
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <bmk7_execute+0x110>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	f004 fe64 	bl	80054a0 <chSemResetI>
 80007d8:	2500      	movs	r5, #0
  chSchRescheduleS();
 80007da:	f004 fc19 	bl	8005010 <chSchRescheduleS>
 80007de:	f388 8811 	msr	BASEPRI, r8
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80007e2:	f899 3000 	ldrb.w	r3, [r9]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 80007e6:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0ee      	beq.n	80007ca <bmk7_execute+0x8a>
  test_terminate_threads();
 80007ec:	f002 ff40 	bl	8003670 <test_terminate_threads>
 80007f0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <bmk7_execute+0x110>)
 80007f6:	4629      	mov	r1, r5
 80007f8:	f004 fe52 	bl	80054a0 <chSemResetI>
  chSchRescheduleS();
 80007fc:	f004 fc08 	bl	8005010 <chSchRescheduleS>
 8000800:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8000804:	f002 ff1c 	bl	8003640 <test_wait_threads>

  test_print("--- Score : ");
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <bmk7_execute+0x114>)
 800080a:	f003 f8f1 	bl	80039f0 <test_print>
  test_printn(n);
 800080e:	4620      	mov	r0, r4
 8000810:	f003 f8fe 	bl	8003a10 <test_printn>
  test_print(" reschedules/S, ");
 8000814:	4810      	ldr	r0, [pc, #64]	; (8000858 <bmk7_execute+0x118>)
 8000816:	f003 f8eb 	bl	80039f0 <test_print>
  test_printn(n * 6);
 800081a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	f003 f8f6 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <bmk7_execute+0x11c>)
}
 8000826:	b003      	add	sp, #12
 8000828:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 800082c:	f003 b8c0 	b.w	80039b0 <test_println>
 8000830:	20000b78 	.word	0x20000b78
 8000834:	08001121 	.word	0x08001121
 8000838:	20000cf0 	.word	0x20000cf0
 800083c:	20000b08 	.word	0x20000b08
 8000840:	20000e38 	.word	0x20000e38
 8000844:	20000f80 	.word	0x20000f80
 8000848:	200010c8 	.word	0x200010c8
 800084c:	20001210 	.word	0x20001210
 8000850:	20000a30 	.word	0x20000a30
 8000854:	080062c0 	.word	0x080062c0
 8000858:	08006314 	.word	0x08006314
 800085c:	08006308 	.word	0x08006308
 8000860:	20000cc8 	.word	0x20000cc8
	...

08000870 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000870:	4bbe      	ldr	r3, [pc, #760]	; (8000b6c <main+0x2fc>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000872:	4cbf      	ldr	r4, [pc, #764]	; (8000b70 <main+0x300>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	f04f 31ff 	mov.w	r1, #4294967295
 800087a:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 800087c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000880:	6119      	str	r1, [r3, #16]
 8000882:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8000884:	6958      	ldr	r0, [r3, #20]
 8000886:	6159      	str	r1, [r3, #20]
 8000888:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800088a:	6a18      	ldr	r0, [r3, #32]
 800088c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8000890:	6218      	str	r0, [r3, #32]
 8000892:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8000894:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000896:	6259      	str	r1, [r3, #36]	; 0x24
 8000898:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800089a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800089c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008a0:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80008a2:	6821      	ldr	r1, [r4, #0]
 80008a4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80008a8:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80008aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80008ac:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80008b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80008b4:	b08b      	sub	sp, #44	; 0x2c
 80008b6:	d003      	beq.n	80008c0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80008b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80008bc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80008be:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80008c0:	4cab      	ldr	r4, [pc, #684]	; (8000b70 <main+0x300>)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80008c2:	4daa      	ldr	r5, [pc, #680]	; (8000b6c <main+0x2fc>)
 80008c4:	6862      	ldr	r2, [r4, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80008c6:	4bab      	ldr	r3, [pc, #684]	; (8000b74 <main+0x304>)
 80008c8:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8000bb0 <main+0x340>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80008cc:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8000bb4 <main+0x344>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80008d0:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8000bb8 <main+0x348>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80008d4:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8000bbc <main+0x34c>
 80008d8:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 8000bc0 <main+0x350>
 80008dc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8000bc4 <main+0x354>
 80008e0:	4fa5      	ldr	r7, [pc, #660]	; (8000b78 <main+0x308>)
 80008e2:	4ea6      	ldr	r6, [pc, #664]	; (8000b7c <main+0x30c>)
 80008e4:	48a6      	ldr	r0, [pc, #664]	; (8000b80 <main+0x310>)
 80008e6:	49a7      	ldr	r1, [pc, #668]	; (8000b84 <main+0x314>)
 80008e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80008ec:	6062      	str	r2, [r4, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80008ee:	4a9f      	ldr	r2, [pc, #636]	; (8000b6c <main+0x2fc>)
 80008f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80008f2:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 80008f6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 80008fa:	ea6f 2242 	mvn.w	r2, r2, lsl #9
 80008fe:	6322      	str	r2, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000900:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000902:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8000906:	ea6f 2242 	mvn.w	r2, r2, lsl #9
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800090a:	2400      	movs	r4, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800090c:	652a      	str	r2, [r5, #80]	; 0x50
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800090e:	f46f 42a8 	mvn.w	r2, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000912:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000914:	4d9c      	ldr	r5, [pc, #624]	; (8000b88 <main+0x318>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000916:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000918:	f64f 72ff 	movw	r2, #65535	; 0xffff

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800091c:	f8c3 800c 	str.w	r8, [r3, #12]
  gpiop->ODR     = config->odr;
 8000920:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000922:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8000bc8 <main+0x358>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000926:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000928:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800092c:	f44f 7b10 	mov.w	fp, #576	; 0x240
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000930:	f8c3 8000 	str.w	r8, [r3]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000934:	f8ca b004 	str.w	fp, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
  gpiop->PUPDR   = config->pupdr;
 800093c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8000bcc <main+0x35c>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000940:	f8ca 3008 	str.w	r3, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000944:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000948:	f8ca 800c 	str.w	r8, [sl, #12]
  gpiop->ODR     = config->odr;
 800094c:	f8ca 2014 	str.w	r2, [sl, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000950:	f04f 0840 	mov.w	r8, #64	; 0x40

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000954:	f8ca b020 	str.w	fp, [sl, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000958:	f8df b274 	ldr.w	fp, [pc, #628]	; 8000bd0 <main+0x360>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 800095c:	f8ca 8024 	str.w	r8, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000960:	f8ca b000 	str.w	fp, [sl]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000964:	f10a 5aa2 	add.w	sl, sl, #339738624	; 0x14400000
 8000968:	f50a 3a44 	add.w	sl, sl, #200704	; 0x31000
 800096c:	f50a 7aaa 	add.w	sl, sl, #340	; 0x154
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000970:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000974:	f8c9 3008 	str.w	r3, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8000978:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800097c:	f04f 4ac0 	mov.w	sl, #1610612736	; 0x60000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000980:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8000984:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8000988:	f8df a248 	ldr.w	sl, [pc, #584]	; 8000bd4 <main+0x364>
 800098c:	f8c9 a024 	str.w	sl, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000990:	f8df a244 	ldr.w	sl, [pc, #580]	; 8000bd8 <main+0x368>
 8000994:	f8c9 a000 	str.w	sl, [r9]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000998:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8000bdc <main+0x36c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800099c:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80009a0:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8000be0 <main+0x370>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80009a4:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 80009a8:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 80009ac:	f640 79ff 	movw	r9, #4095	; 0xfff
 80009b0:	f8cc 9014 	str.w	r9, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80009b4:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80009b8:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80009bc:	f8cc a000 	str.w	sl, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009c0:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80009c4:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 80009c8:	f8ce 400c 	str.w	r4, [lr, #12]
  gpiop->ODR     = config->odr;
 80009cc:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 80009d0:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 80009d4:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80009d8:	f8ce 8000 	str.w	r8, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009dc:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80009de:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80009e0:	60fc      	str	r4, [r7, #12]
  gpiop->ODR     = config->odr;
 80009e2:	617a      	str	r2, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80009e4:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80009e6:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80009e8:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009ea:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80009ec:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80009ee:	60f4      	str	r4, [r6, #12]
  gpiop->ODR     = config->odr;
 80009f0:	6172      	str	r2, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80009f2:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80009f4:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80009f6:	6034      	str	r4, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009f8:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80009fa:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80009fc:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 80009fe:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000a00:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000a02:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a04:	6004      	str	r4, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000a06:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a08:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a0a:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8000a0c:	614a      	str	r2, [r1, #20]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000a0e:	4a5f      	ldr	r2, [pc, #380]	; (8000b8c <main+0x31c>)
  gpiop->AFRL    = config->afrl;
 8000a10:	620c      	str	r4, [r1, #32]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000a12:	f04f 0910 	mov.w	r9, #16
  gpiop->AFRH    = config->afrh;
 8000a16:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a18:	600c      	str	r4, [r1, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000a1a:	6154      	str	r4, [r2, #20]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000a1c:	f8c2 9038 	str.w	r9, [r2, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000a20:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <main+0x2fc>)
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8000a22:	4d5a      	ldr	r5, [pc, #360]	; (8000b8c <main+0x31c>)
 8000a24:	6c11      	ldr	r1, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000a26:	4f5a      	ldr	r7, [pc, #360]	; (8000b90 <main+0x320>)
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000a28:	485a      	ldr	r0, [pc, #360]	; (8000b94 <main+0x324>)
 8000a2a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000a2c:	46aa      	mov	sl, r5

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000a2e:	f041 0101 	orr.w	r1, r1, #1
 8000a32:	f84a 0b04 	str.w	r0, [sl], #4
 8000a36:	6411      	str	r1, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000a38:	68b8      	ldr	r0, [r7, #8]
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000a3a:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8000be4 <main+0x374>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000a3e:	f8c5 a004 	str.w	sl, [r5, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000a42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000a46:	f105 0a74 	add.w	sl, r5, #116	; 0x74
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8000a4a:	f5ae 3ee6 	sub.w	lr, lr, #117760	; 0x1cc00

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	f8c5 a040 	str.w	sl, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 8000a56:	f8c5 b04c 	str.w	fp, [r5, #76]	; 0x4c
 8000a5a:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8000a5e:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000a60:	652d      	str	r5, [r5, #80]	; 0x50
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000a62:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000be8 <main+0x378>
 8000a66:	60b8      	str	r0, [r7, #8]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000a68:	2201      	movs	r2, #1
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000a6a:	f105 0754 	add.w	r7, r5, #84	; 0x54

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000a6e:	4e4a      	ldr	r6, [pc, #296]	; (8000b98 <main+0x328>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a70:	f105 0e0c 	add.w	lr, r5, #12

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000a74:	f242 0acf 	movw	sl, #8399	; 0x20cf
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000a7e:	3064      	adds	r0, #100	; 0x64
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000a80:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000a82:	f105 0a30 	add.w	sl, r5, #48	; 0x30
 8000a86:	722a      	strb	r2, [r5, #8]
  STM32_ST_TIM->CCMR1  = 0;
 8000a88:	618c      	str	r4, [r1, #24]
 8000a8a:	f8c5 e00c 	str.w	lr, [r5, #12]
  STM32_ST_TIM->CCR[0] = 0;
 8000a8e:	634c      	str	r4, [r1, #52]	; 0x34
  tqp->p_prev = (thread_t *)tqp;
 8000a90:	f8c5 e010 	str.w	lr, [r5, #16]
  STM32_ST_TIM->DIER   = 0;
 8000a94:	60cc      	str	r4, [r1, #12]
 8000a96:	f04f 0e80 	mov.w	lr, #128	; 0x80
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000a9a:	61af      	str	r7, [r5, #24]
  STM32_ST_TIM->CR2    = 0;
 8000a9c:	604c      	str	r4, [r1, #4]
  iqp->q_rdptr   = bp;
 8000a9e:	626f      	str	r7, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8000aa0:	622f      	str	r7, [r5, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000aa2:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  iqp->q_top     = bp + size;
 8000aa6:	61e8      	str	r0, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000aa8:	63e8      	str	r0, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8000aaa:	64a8      	str	r0, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8000aac:	6468      	str	r0, [r5, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000aae:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8000ab2:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000ab6:	614a      	str	r2, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000ab8:	600a      	str	r2, [r1, #0]
 8000aba:	9203      	str	r2, [sp, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000abc:	f886 e31c 	strb.w	lr, [r6, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ac0:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000ac4:	6037      	str	r7, [r6, #0]
 8000ac6:	f8cc 4008 	str.w	r4, [ip, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aca:	f8dc a00c 	ldr.w	sl, [ip, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000ace:	4933      	ldr	r1, [pc, #204]	; (8000b9c <main+0x32c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ad0:	4f33      	ldr	r7, [pc, #204]	; (8000ba0 <main+0x330>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ad2:	f8df e118 	ldr.w	lr, [pc, #280]	; 8000bec <main+0x37c>
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000ad6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8000ada:	ea0a 0000 	and.w	r0, sl, r0
  reg_value  =  (reg_value                                   |
 8000ade:	4301      	orrs	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000ae0:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000ae6:	492f      	ldr	r1, [pc, #188]	; (8000ba4 <main+0x334>)
 8000ae8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000aec:	60f8      	str	r0, [r7, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000aee:	f8de 0000 	ldr.w	r0, [lr]
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000af2:	624b      	str	r3, [r1, #36]	; 0x24
 8000af4:	4310      	orrs	r0, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	2720      	movs	r7, #32
 8000af8:	f8ce 0000 	str.w	r0, [lr]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000afc:	f04f 0a00 	mov.w	sl, #0
 8000b00:	f88c 901f 	strb.w	r9, [ip, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000b04:	f101 0e1c 	add.w	lr, r1, #28
 8000b08:	f88c 7022 	strb.w	r7, [ip, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000b0c:	eb0d 0009 	add.w	r0, sp, r9
 8000b10:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000b12:	6049      	str	r1, [r1, #4]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000b14:	f04f 0b00 	mov.w	fp, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000b18:	9304      	str	r3, [sp, #16]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000b1a:	608c      	str	r4, [r1, #8]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000b1c:	628c      	str	r4, [r1, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000b1e:	674c      	str	r4, [r1, #116]	; 0x74
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000b20:	f8c1 e01c 	str.w	lr, [r1, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b24:	f8c1 e020 	str.w	lr, [r1, #32]
 8000b28:	9102      	str	r1, [sp, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8000b2a:	6109      	str	r1, [r1, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8000b2c:	6149      	str	r1, [r1, #20]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000b2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000b32:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8000b34:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8000b36:	9407      	str	r4, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000b38:	f004 fea2 	bl	8005880 <chTMStartMeasurementX.constprop.62>
  chTMStopMeasurementX(&tm);
 8000b3c:	eb0d 0009 	add.w	r0, sp, r9
 8000b40:	f004 fa06 	bl	8004f50 <chTMStopMeasurementX>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <main+0x338>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b46:	9902      	ldr	r1, [sp, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <main+0x33c>)
 8000b4a:	f8d1 9014 	ldr.w	r9, [r1, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000b4e:	9a03      	ldr	r2, [sp, #12]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b50:	f8c1 9044 	str.w	r9, [r1, #68]	; 0x44
 8000b54:	f023 0e07 	bic.w	lr, r3, #7
  ch.tm.offset = tm.last;
 8000b58:	9b06      	ldr	r3, [sp, #24]
 8000b5a:	674b      	str	r3, [r1, #116]	; 0x74
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b5c:	f100 0310 	add.w	r3, r0, #16
 8000b60:	6103      	str	r3, [r0, #16]
  tqp->p_prev = (thread_t *)tqp;
 8000b62:	6143      	str	r3, [r0, #20]
 8000b64:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8000b68:	e042      	b.n	8000bf0 <main+0x380>
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40021400 	.word	0x40021400
 8000b7c:	40021800 	.word	0x40021800
 8000b80:	40021c00 	.word	0x40021c00
 8000b84:	40022000 	.word	0x40022000
 8000b88:	55560000 	.word	0x55560000
 8000b8c:	20000a44 	.word	0x20000a44
 8000b90:	e0042000 	.word	0xe0042000
 8000b94:	08005ec0 	.word	0x08005ec0
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	05fa0300 	.word	0x05fa0300
 8000ba0:	e000edf0 	.word	0xe000edf0
 8000ba4:	20000b78 	.word	0x20000b78
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	20000ae8 	.word	0x20000ae8
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40010054 	.word	0x40010054
 8000bb8:	000aaa00 	.word	0x000aaa00
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	2aa0aa00 	.word	0x2aa0aa00
 8000bcc:	55514515 	.word	0x55514515
 8000bd0:	00082080 	.word	0x00082080
 8000bd4:	00060600 	.word	0x00060600
 8000bd8:	02208001 	.word	0x02208001
 8000bdc:	00555055 	.word	0x00555055
 8000be0:	55000100 	.word	0x55000100
 8000be4:	08003481 	.word	0x08003481
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	e0001000 	.word	0xe0001000
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000bf0:	f8c1 8038 	str.w	r8, [r1, #56]	; 0x38
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000bf4:	f881 404d 	strb.w	r4, [r1, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000bf8:	f8c1 806c 	str.w	r8, [r1, #108]	; 0x6c
  tp->p_mtxlist = NULL;
 8000bfc:	668c      	str	r4, [r1, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000bfe:	664c      	str	r4, [r1, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000c00:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000c04:	648c      	str	r4, [r1, #72]	; 0x48
  REG_INSERT(tp);
 8000c06:	6409      	str	r1, [r1, #64]	; 0x40
 8000c08:	6184      	str	r4, [r0, #24]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000c0a:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8000d18 <main+0x4a8>
 8000c0e:	f8c9 3010 	str.w	r3, [r9, #16]
 8000c12:	614b      	str	r3, [r1, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000c14:	618b      	str	r3, [r1, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000c16:	f101 0354 	add.w	r3, r1, #84	; 0x54
 8000c1a:	f8df a100 	ldr.w	sl, [pc, #256]	; 8000d1c <main+0x4ac>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000c1e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8000d20 <main+0x4b0>
 8000c22:	654b      	str	r3, [r1, #84]	; 0x54
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <main+0x47c>)
 8000c26:	6003      	str	r3, [r0, #0]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000c28:	f02c 0c07 	bic.w	ip, ip, #7
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000c2c:	f101 0358 	add.w	r3, r1, #88	; 0x58
  default_heap.h_free.h.u.next = NULL;
 8000c30:	6084      	str	r4, [r0, #8]
  default_heap.h_free.h.size = 0;
 8000c32:	60c4      	str	r4, [r0, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000c34:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
 8000c38:	658b      	str	r3, [r1, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 8000c3a:	65cb      	str	r3, [r1, #92]	; 0x5c
 8000c3c:	f8ca c000 	str.w	ip, [sl]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000c40:	f8c9 e000 	str.w	lr, [r9]
 8000c44:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c48:	b662      	cpsie	i
 8000c4a:	698b      	ldr	r3, [r1, #24]
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <main+0x480>)
 8000c4e:	6198      	str	r0, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000c50:	f101 0078 	add.w	r0, r1, #120	; 0x78
 8000c54:	9400      	str	r4, [sp, #0]
 8000c56:	21d8      	movs	r1, #216	; 0xd8
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <main+0x484>)
 8000c5a:	f004 fa51 	bl	8005100 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <main+0x488>)
 8000c60:	6183      	str	r3, [r0, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c62:	f387 8811 	msr	BASEPRI, r7
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8000c66:	7a2b      	ldrb	r3, [r5, #8]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10c      	bne.n	8000c86 <main+0x416>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <main+0x48c>)
 8000c6e:	4923      	ldr	r1, [pc, #140]	; (8000cfc <main+0x48c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000c72:	22c0      	movs	r2, #192	; 0xc0
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	640b      	str	r3, [r1, #64]	; 0x40
 8000c7a:	f886 2326 	strb.w	r2, [r6, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000c7e:	f8c6 8184 	str.w	r8, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000c82:	f8c6 8004 	str.w	r8, [r6, #4]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <main+0x490>)

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <main+0x494>)
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8000c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	f000 818d 	beq.w	8000fac <main+0x73c>
 8000c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c96:	4293      	cmp	r3, r2
 8000c98:	f000 8188 	beq.w	8000fac <main+0x73c>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;
 8000c9c:	f240 4245 	movw	r2, #1093	; 0x445
 8000ca0:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000ca2:	f244 0240 	movw	r2, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000ca6:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000ca8:	f242 112c 	movw	r1, #8492	; 0x212c
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8000cac:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
  else
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000cae:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000cb0:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000cb2:	60d9      	str	r1, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
 8000cb4:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8000cb6:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8000cb8:	685b      	ldr	r3, [r3, #4]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <main+0x490>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	721a      	strb	r2, [r3, #8]
 8000cc0:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8000cc4:	2004      	movs	r0, #4
 8000cc6:	f005 f813 	bl	8005cf0 <_pal_lld_setgroupmode.constprop.6>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8000cca:	2008      	movs	r0, #8
 8000ccc:	f005 f810 	bl	8005cf0 <_pal_lld_setgroupmode.constprop.6>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8000cd0:	9400      	str	r4, [sp, #0]
 8000cd2:	4c0d      	ldr	r4, [pc, #52]	; (8000d08 <main+0x498>)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <main+0x49c>)
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <main+0x4a0>)
 8000cd8:	4e0e      	ldr	r6, [pc, #56]	; (8000d14 <main+0x4a4>)
 8000cda:	f8df a048 	ldr.w	sl, [pc, #72]	; 8000d24 <main+0x4b4>
 8000cde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	f004 fa0c 	bl	8005100 <chThdCreateStatic>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000ce8:	46a3      	mov	fp, r4
 8000cea:	e021      	b.n	8000d30 <main+0x4c0>
 8000cec:	080035b1 	.word	0x080035b1
 8000cf0:	08005e60 	.word	0x08005e60
 8000cf4:	08004e21 	.word	0x08004e21
 8000cf8:	08006408 	.word	0x08006408
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	20000a44 	.word	0x20000a44
 8000d04:	40011000 	.word	0x40011000
 8000d08:	20000ae0 	.word	0x20000ae0
 8000d0c:	200008d0 	.word	0x200008d0
 8000d10:	080002f1 	.word	0x080002f1
 8000d14:	20000a18 	.word	0x20000a18
 8000d18:	2000137f 	.word	0x2000137f
 8000d1c:	20000a2c 	.word	0x20000a2c
 8000d20:	20000b1c 	.word	0x20000b1c
 8000d24:	20000b08 	.word	0x20000b08
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
      TestThread(&SD2);
    chThdSleepMilliseconds(500);
 8000d28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d2c:	f004 fcd0 	bl	80056d0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 8000d30:	4ba0      	ldr	r3, [pc, #640]	; (8000fb4 <main+0x744>)
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	d5f7      	bpl.n	8000d28 <main+0x4b8>
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8000d38:	4b9f      	ldr	r3, [pc, #636]	; (8000fb8 <main+0x748>)
  test_println("");
 8000d3a:	48a0      	ldr	r0, [pc, #640]	; (8000fbc <main+0x74c>)
 * @param[in] p         pointer to a @p BaseChannel object for test output
 */
void TestThread(void *p) {
  int i, j;

  chp = p;
 8000d3c:	6023      	str	r3, [r4, #0]
  test_println("");
 8000d3e:	f002 fe37 	bl	80039b0 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8000d42:	489f      	ldr	r0, [pc, #636]	; (8000fc0 <main+0x750>)
  test_println("***");
 8000d44:	4d9f      	ldr	r5, [pc, #636]	; (8000fc4 <main+0x754>)
void TestThread(void *p) {
  int i, j;

  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
 8000d46:	f002 fe33 	bl	80039b0 <test_println>
  test_println("***");
 8000d4a:	489f      	ldr	r0, [pc, #636]	; (8000fc8 <main+0x758>)
 8000d4c:	f002 fe30 	bl	80039b0 <test_println>
 8000d50:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000d52:	6820      	ldr	r0, [r4, #0]
 8000d54:	6803      	ldr	r3, [r0, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d5a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	d1f7      	bne.n	8000d52 <main+0x4e2>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8000d62:	489a      	ldr	r0, [pc, #616]	; (8000fcc <main+0x75c>)
 8000d64:	4d9a      	ldr	r5, [pc, #616]	; (8000fd0 <main+0x760>)
 8000d66:	f002 fe23 	bl	80039b0 <test_println>
 8000d6a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	6803      	ldr	r3, [r0, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d74:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d1f7      	bne.n	8000d6c <main+0x4fc>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8000d7c:	4895      	ldr	r0, [pc, #596]	; (8000fd4 <main+0x764>)
 8000d7e:	4d96      	ldr	r5, [pc, #600]	; (8000fd8 <main+0x768>)
 8000d80:	f002 fe16 	bl	80039b0 <test_println>
 8000d84:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000d86:	6820      	ldr	r0, [r4, #0]
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000d8e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d1f7      	bne.n	8000d86 <main+0x516>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8000d96:	4891      	ldr	r0, [pc, #580]	; (8000fdc <main+0x76c>)
 8000d98:	4d91      	ldr	r5, [pc, #580]	; (8000fe0 <main+0x770>)
 8000d9a:	f002 fe09 	bl	80039b0 <test_println>
 8000d9e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000da8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d1f7      	bne.n	8000da0 <main+0x530>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8000db0:	488c      	ldr	r0, [pc, #560]	; (8000fe4 <main+0x774>)
 8000db2:	4d8d      	ldr	r5, [pc, #564]	; (8000fe8 <main+0x778>)
 8000db4:	f002 fdfc 	bl	80039b0 <test_println>
 8000db8:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000dba:	6820      	ldr	r0, [r4, #0]
 8000dbc:	6803      	ldr	r3, [r0, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000dc2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d1f7      	bne.n	8000dba <main+0x54a>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8000dca:	4888      	ldr	r0, [pc, #544]	; (8000fec <main+0x77c>)
 8000dcc:	4d88      	ldr	r5, [pc, #544]	; (8000ff0 <main+0x780>)
 8000dce:	f002 fdef 	bl	80039b0 <test_println>
 8000dd2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	6803      	ldr	r3, [r0, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000ddc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000de0:	2900      	cmp	r1, #0
 8000de2:	d1f7      	bne.n	8000dd4 <main+0x564>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8000de4:	4883      	ldr	r0, [pc, #524]	; (8000ff4 <main+0x784>)
 8000de6:	4d84      	ldr	r5, [pc, #528]	; (8000ff8 <main+0x788>)
 8000de8:	f002 fde2 	bl	80039b0 <test_println>
 8000dec:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000dee:	6820      	ldr	r0, [r4, #0]
 8000df0:	6803      	ldr	r3, [r0, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000df6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d1f7      	bne.n	8000dee <main+0x57e>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8000dfe:	487f      	ldr	r0, [pc, #508]	; (8000ffc <main+0x78c>)
 8000e00:	4d7f      	ldr	r5, [pc, #508]	; (8001000 <main+0x790>)
 8000e02:	f002 fdd5 	bl	80039b0 <test_println>
 8000e06:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	6803      	ldr	r3, [r0, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000e10:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d1f7      	bne.n	8000e08 <main+0x598>
 8000e18:	4b7a      	ldr	r3, [pc, #488]	; (8001004 <main+0x794>)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8000e1a:	487b      	ldr	r0, [pc, #492]	; (8001008 <main+0x798>)
 8000e1c:	9102      	str	r1, [sp, #8]
 8000e1e:	9303      	str	r3, [sp, #12]
 8000e20:	f002 fdc6 	bl	80039b0 <test_println>
#endif
  test_println("");
 8000e24:	4865      	ldr	r0, [pc, #404]	; (8000fbc <main+0x74c>)

  test_global_fail = FALSE;
 8000e26:	f8df 9214 	ldr.w	r9, [pc, #532]	; 800103c <main+0x7cc>
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");
 8000e2a:	f002 fdc1 	bl	80039b0 <test_println>

  test_global_fail = FALSE;
 8000e2e:	4b77      	ldr	r3, [pc, #476]	; (800100c <main+0x79c>)
 8000e30:	9902      	ldr	r1, [sp, #8]
 8000e32:	7019      	strb	r1, [r3, #0]
 8000e34:	9b02      	ldr	r3, [sp, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	9302      	str	r3, [sp, #8]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8000e3a:	2700      	movs	r7, #0

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8000e3c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8000e40:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 808b 	beq.w	8000f60 <main+0x6f0>
      print_line();
 8000e4a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8001040 <main+0x7d0>
 8000e4e:	f002 fbcf 	bl	80035f0 <print_line.lto_priv.133>
 8000e52:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	6803      	ldr	r3, [r0, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000e5c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8000e60:	2900      	cmp	r1, #0
 8000e62:	d1f7      	bne.n	8000e54 <main+0x5e4>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8000e64:	9802      	ldr	r0, [sp, #8]
      test_print(".");
      test_printn(j + 1);
 8000e66:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8001044 <main+0x7d4>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8000e6a:	f002 fdd1 	bl	8003a10 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000e6e:	f8db 0000 	ldr.w	r0, [fp]
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	212e      	movs	r1, #46	; 0x2e
 8000e76:	689b      	ldr	r3, [r3, #8]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000e78:	3701      	adds	r7, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000e7a:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f002 fdc7 	bl	8003a10 <test_printn>
 8000e82:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	6803      	ldr	r3, [r0, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000e8c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8000e90:	2900      	cmp	r1, #0
 8000e92:	d1f7      	bne.n	8000e84 <main+0x614>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	f8d3 8000 	ldr.w	r8, [r3]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000e9a:	f898 1000 	ldrb.w	r1, [r8]
 8000e9e:	b139      	cbz	r1, 8000eb0 <main+0x640>
    chSequentialStreamPut(chp, *msgp++);
 8000ea0:	6820      	ldr	r0, [r4, #0]
 8000ea2:	6803      	ldr	r3, [r0, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000ea8:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8000eac:	2900      	cmp	r1, #0
 8000eae:	d1f7      	bne.n	8000ea0 <main+0x630>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8000eb0:	4857      	ldr	r0, [pc, #348]	; (8001010 <main+0x7a0>)
 8000eb2:	f002 fd7d 	bl	80039b0 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8000eb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eba:	f004 fc09 	bl	80056d0 <chThdSleep>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <main+0x7a4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8000ec0:	682d      	ldr	r5, [r5, #0]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8000ec2:	6033      	str	r3, [r6, #0]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8000ec4:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8000ec6:	f8ca 3000 	str.w	r3, [sl]
 8000eca:	f8ca 3004 	str.w	r3, [sl, #4]
 8000ece:	f8ca 3008 	str.w	r3, [sl, #8]
 8000ed2:	f8ca 300c 	str.w	r3, [sl, #12]
 8000ed6:	f8ca 3010 	str.w	r3, [sl, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8000eda:	494f      	ldr	r1, [pc, #316]	; (8001018 <main+0x7a8>)
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8000edc:	686a      	ldr	r2, [r5, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8000ede:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8000ee0:	b102      	cbz	r2, 8000ee4 <main+0x674>
    tcp->setup();
 8000ee2:	4790      	blx	r2
  tcp->execute();
 8000ee4:	68eb      	ldr	r3, [r5, #12]
 8000ee6:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8000ee8:	68ab      	ldr	r3, [r5, #8]
 8000eea:	b103      	cbz	r3, 8000eee <main+0x67e>
    tcp->teardown();
 8000eec:	4798      	blx	r3

  test_wait_threads();
 8000eee:	f002 fba7 	bl	8003640 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <main+0x7a8>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d050      	beq.n	8000f9c <main+0x72c>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8000efa:	4d48      	ldr	r5, [pc, #288]	; (800101c <main+0x7ac>)
 8000efc:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000efe:	6820      	ldr	r0, [r4, #0]
 8000f00:	6803      	ldr	r3, [r0, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000f06:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000f0a:	2900      	cmp	r1, #0
 8000f0c:	d1f7      	bne.n	8000efe <main+0x68e>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <main+0x7b0>)
 8000f10:	4d44      	ldr	r5, [pc, #272]	; (8001024 <main+0x7b4>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f002 fd7c 	bl	8003a10 <test_printn>
 8000f18:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	6803      	ldr	r3, [r0, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000f22:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000f26:	2900      	cmp	r1, #0
 8000f28:	d1f7      	bne.n	8000f1a <main+0x6aa>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8000f2a:	6833      	ldr	r3, [r6, #0]
 8000f2c:	4a39      	ldr	r2, [pc, #228]	; (8001014 <main+0x7a4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d909      	bls.n	8000f46 <main+0x6d6>
 8000f32:	4d38      	ldr	r5, [pc, #224]	; (8001014 <main+0x7a4>)
    chSequentialStreamPut(chp, *cp++);
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000f3a:	6803      	ldr	r3, [r0, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8000f40:	6833      	ldr	r3, [r6, #0]
 8000f42:	429d      	cmp	r5, r3
 8000f44:	d3f6      	bcc.n	8000f34 <main+0x6c4>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8000f46:	4838      	ldr	r0, [pc, #224]	; (8001028 <main+0x7b8>)
 8000f48:	f002 fd32 	bl	80039b0 <test_println>
 8000f4c:	9b03      	ldr	r3, [sp, #12]
 8000f4e:	f8d3 9000 	ldr.w	r9, [r3]

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8000f52:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8000f56:	eb09 0587 	add.w	r5, r9, r7, lsl #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f af75 	bne.w	8000e4a <main+0x5da>
#endif
  test_println("");

  test_global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8000f60:	9b03      	ldr	r3, [sp, #12]
 8000f62:	f853 9f04 	ldr.w	r9, [r3, #4]!
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	f1b9 0f00 	cmp.w	r9, #0
 8000f6c:	f47f af62 	bne.w	8000e34 <main+0x5c4>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8000f70:	f002 fb3e 	bl	80035f0 <print_line.lto_priv.133>
  test_println("");
 8000f74:	4d2d      	ldr	r5, [pc, #180]	; (800102c <main+0x7bc>)
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <main+0x74c>)
 8000f78:	f002 fd1a 	bl	80039b0 <test_println>
 8000f7c:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8000f7e:	6820      	ldr	r0, [r4, #0]
 8000f80:	6803      	ldr	r3, [r0, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8000f86:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	d1f7      	bne.n	8000f7e <main+0x70e>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <main+0x79c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b93b      	cbnz	r3, 8000fa4 <main+0x734>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8000f94:	4826      	ldr	r0, [pc, #152]	; (8001030 <main+0x7c0>)
 8000f96:	f002 fd0b 	bl	80039b0 <test_println>
 8000f9a:	e6c5      	b.n	8000d28 <main+0x4b8>
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <main+0x7c4>)
 8000f9e:	f002 fd07 	bl	80039b0 <test_println>
 8000fa2:	e74b      	b.n	8000e3c <main+0x5cc>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (test_global_fail)
    test_println("FAILURE");
 8000fa4:	4824      	ldr	r0, [pc, #144]	; (8001038 <main+0x7c8>)
 8000fa6:	f002 fd03 	bl	80039b0 <test_println>
 8000faa:	e6bd      	b.n	8000d28 <main+0x4b8>
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
 8000fac:	f640 028b 	movw	r2, #2187	; 0x88b
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	e676      	b.n	8000ca2 <main+0x432>
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	20000a44 	.word	0x20000a44
 8000fbc:	08006324 	.word	0x08006324
 8000fc0:	08006410 	.word	0x08006410
 8000fc4:	08006328 	.word	0x08006328
 8000fc8:	0800642c 	.word	0x0800642c
 8000fcc:	08006454 	.word	0x08006454
 8000fd0:	0800633c 	.word	0x0800633c
 8000fd4:	0800645c 	.word	0x0800645c
 8000fd8:	08006350 	.word	0x08006350
 8000fdc:	08006474 	.word	0x08006474
 8000fe0:	08006364 	.word	0x08006364
 8000fe4:	080064bc 	.word	0x080064bc
 8000fe8:	08006378 	.word	0x08006378
 8000fec:	080064c8 	.word	0x080064c8
 8000ff0:	0800638c 	.word	0x0800638c
 8000ff4:	080064d4 	.word	0x080064d4
 8000ff8:	080063a0 	.word	0x080063a0
 8000ffc:	080064ec 	.word	0x080064ec
 8001000:	080063b4 	.word	0x080063b4
 8001004:	08006050 	.word	0x08006050
 8001008:	08006518 	.word	0x08006518
 800100c:	20000a3c 	.word	0x20000a3c
 8001010:	08006430 	.word	0x08006430
 8001014:	20000a1c 	.word	0x20000a1c
 8001018:	200008cc 	.word	0x200008cc
 800101c:	080063dc 	.word	0x080063dc
 8001020:	20000a40 	.word	0x20000a40
 8001024:	080063f4 	.word	0x080063f4
 8001028:	08006434 	.word	0x08006434
 800102c:	080063f8 	.word	0x080063f8
 8001030:	08006444 	.word	0x08006444
 8001034:	08006438 	.word	0x08006438
 8001038:	0800644c 	.word	0x0800644c
 800103c:	08005fe0 	.word	0x08005fe0
 8001040:	080063c8 	.word	0x080063c8
 8001044:	080063d8 	.word	0x080063d8
	...

08001050 <bmk7_setup.lto_priv.132>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <bmk7_setup.lto_priv.132+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8001052:	2200      	movs	r2, #0
 8001054:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001056:	605b      	str	r3, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	4770      	bx	lr
 800105c:	20000a30 	.word	0x20000a30

08001060 <sys2_execute.lto_priv.78>:
 8001060:	2320      	movs	r3, #32
 8001062:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001066:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800106a:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800106e:	b662      	cpsie	i

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001070:	2300      	movs	r3, #0
 8001072:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001076:	b662      	cpsie	i
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	0000      	movs	r0, r0
	...

08001080 <notify>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
	...

08001090 <queues2_setup.lto_priv.124>:
 * This test case tests synchronous and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8001090:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <queues2_setup.lto_priv.124+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <queues2_setup.lto_priv.124+0x28>)
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <queues2_setup.lto_priv.124+0x2c>)
 8001098:	601b      	str	r3, [r3, #0]
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800109a:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800109c:	2404      	movs	r4, #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800109e:	2100      	movs	r1, #0
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80010a0:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80010a2:	609c      	str	r4, [r3, #8]
  tqp->p_prev = (thread_t *)tqp;
 80010a4:	605b      	str	r3, [r3, #4]
  oqp->q_buffer  = bp;
 80010a6:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80010a8:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80010aa:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80010ac:	61d8      	str	r0, [r3, #28]
  oqp->q_link    = link;
 80010ae:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80010b0:	bc30      	pop	{r4, r5}
 80010b2:	4770      	bx	lr
 80010b4:	20000cf0 	.word	0x20000cf0
 80010b8:	20000800 	.word	0x20000800
 80010bc:	08001081 	.word	0x08001081

080010c0 <queues1_setup.lto_priv.122>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <queues1_setup.lto_priv.122+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <queues1_setup.lto_priv.122+0x28>)
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <queues1_setup.lto_priv.122+0x2c>)
 * This test case tests synchronous and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 80010c6:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80010c8:	2100      	movs	r1, #0
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80010ca:	1d14      	adds	r4, r2, #4
 80010cc:	611c      	str	r4, [r3, #16]
 80010ce:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80010d0:	605b      	str	r3, [r3, #4]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80010d2:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80010d4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80010d6:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80010d8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80010da:	6099      	str	r1, [r3, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80010dc:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80010de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000cf0 	.word	0x20000cf0
 80010e8:	20000824 	.word	0x20000824
 80010ec:	08001081 	.word	0x08001081

080010f0 <dyn3_setup.lto_priv.120>:
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <dyn3_setup.lto_priv.120+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <dyn3_setup.lto_priv.120+0x2c>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 80010f4:	b410      	push	{r4}
 80010f6:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80010f8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 80010fc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001100:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8001104:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 800110a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8001110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000cf0 	.word	0x20000cf0
 800111c:	20001358 	.word	0x20001358

08001120 <thread3.lto_priv.68>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static THD_FUNCTION(thread3, p) {
 8001120:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001122:	4c06      	ldr	r4, [pc, #24]	; (800113c <thread3.lto_priv.68+0x1c>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001124:	69a3      	ldr	r3, [r4, #24]
 8001126:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8001128:	075a      	lsls	r2, r3, #29
 800112a:	d406      	bmi.n	800113a <thread3.lto_priv.68+0x1a>
    chSemWait(&sem1);
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <thread3.lto_priv.68+0x20>)
 800112e:	f004 f83f 	bl	80051b0 <chSemWait>
 8001132:	69a3      	ldr	r3, [r4, #24]
 8001134:	7f5b      	ldrb	r3, [r3, #29]
 */

static THD_FUNCTION(thread3, p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8001136:	075b      	lsls	r3, r3, #29
 8001138:	d5f8      	bpl.n	800112c <thread3.lto_priv.68+0xc>
 800113a:	bd10      	pop	{r4, pc}
 800113c:	20000b78 	.word	0x20000b78
 8001140:	20000a30 	.word	0x20000a30
	...

08001150 <bmk6_execute.lto_priv.131>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <bmk6_execute.lto_priv.131+0x4c>)
 8001154:	4f12      	ldr	r7, [pc, #72]	; (80011a0 <bmk6_execute.lto_priv.131+0x50>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800115a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
 800115c:	f002 fa60 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 8001160:	f004 fe26 	bl	8005db0 <test_start_timer.constprop.2>
 * a second of continuous operations.
 */

static void bmk6_execute(void) {

  uint32_t n = 0;
 8001164:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8001166:	3501      	adds	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8001168:	4626      	mov	r6, r4
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <bmk6_execute.lto_priv.131+0x54>)
 800116c:	9600      	str	r6, [sp, #0]
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <bmk6_execute.lto_priv.131+0x58>)
 8001170:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001174:	462a      	mov	r2, r5
 8001176:	f003 ffc3 	bl	8005100 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800117a:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800117c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f3      	beq.n	800116a <bmk6_execute.lto_priv.131+0x1a>
  test_print("--- Score : ");
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <bmk6_execute.lto_priv.131+0x5c>)
 8001184:	f002 fc34 	bl	80039f0 <test_print>
  test_printn(n);
 8001188:	4620      	mov	r0, r4
 800118a:	f002 fc41 	bl	8003a10 <test_printn>
  test_println(" threads/S");
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <bmk6_execute.lto_priv.131+0x60>)
}
 8001190:	b003      	add	sp, #12
 8001192:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8001196:	f002 bc0b 	b.w	80039b0 <test_println>
 800119a:	bf00      	nop
 800119c:	20000b78 	.word	0x20000b78
 80011a0:	20000cc8 	.word	0x20000cc8
 80011a4:	08001d61 	.word	0x08001d61
 80011a8:	20000cf0 	.word	0x20000cf0
 80011ac:	080062c0 	.word	0x080062c0
 80011b0:	08006a50 	.word	0x08006a50
	...

080011c0 <bmk5_execute.lto_priv.130>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <bmk5_execute.lto_priv.130+0x50>)
 80011c4:	4f13      	ldr	r7, [pc, #76]	; (8001214 <bmk5_execute.lto_priv.130+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	b083      	sub	sp, #12

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80011ca:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
 80011cc:	f002 fa28 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 80011d0:	f004 fdee 	bl	8005db0 <test_start_timer.constprop.2>
 * a second of continuous operations.
 */

static void bmk5_execute(void) {

  uint32_t n = 0;
 80011d4:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80011d6:	3d01      	subs	r5, #1
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 80011d8:	4626      	mov	r6, r4
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <bmk5_execute.lto_priv.130+0x58>)
 80011dc:	9600      	str	r6, [sp, #0]
 80011de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80011e2:	462a      	mov	r2, r5
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <bmk5_execute.lto_priv.130+0x5c>)
 80011e6:	f003 ff8b 	bl	8005100 <chThdCreateStatic>
 80011ea:	f004 f809 	bl	8005200 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80011ee:	783b      	ldrb	r3, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 80011f0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f1      	beq.n	80011da <bmk5_execute.lto_priv.130+0x1a>
  test_print("--- Score : ");
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <bmk5_execute.lto_priv.130+0x60>)
 80011f8:	f002 fbfa 	bl	80039f0 <test_print>
  test_printn(n);
 80011fc:	4620      	mov	r0, r4
 80011fe:	f002 fc07 	bl	8003a10 <test_printn>
  test_println(" threads/S");
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <bmk5_execute.lto_priv.130+0x64>)
}
 8001204:	b003      	add	sp, #12
 8001206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800120a:	f002 bbd1 	b.w	80039b0 <test_println>
 800120e:	bf00      	nop
 8001210:	20000b78 	.word	0x20000b78
 8001214:	20000cc8 	.word	0x20000cc8
 8001218:	08001d61 	.word	0x08001d61
 800121c:	20000cf0 	.word	0x20000cf0
 8001220:	080062c0 	.word	0x080062c0
 8001224:	08006a50 	.word	0x08006a50
	...

08001230 <bmk4_execute.lto_priv.129>:
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8001230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <bmk4_execute.lto_priv.129+0x9c>)
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8001236:	4826      	ldr	r0, [pc, #152]	; (80012d0 <bmk4_execute.lto_priv.129+0xa0>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <bmk4_execute.lto_priv.129+0xa4>)
 800123c:	6892      	ldr	r2, [r2, #8]
 800123e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80012e4 <bmk4_execute.lto_priv.129+0xb4>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
  chSysUnlock();
}

static void bmk4_execute(void) {
 8001242:	b082      	sub	sp, #8
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8001244:	2500      	movs	r5, #0
 8001246:	3201      	adds	r2, #1
 8001248:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800124c:	9500      	str	r5, [sp, #0]
 800124e:	f003 ff57 	bl	8005100 <chThdCreateStatic>
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <bmk4_execute.lto_priv.129+0xa8>)
 8001254:	4604      	mov	r4, r0
 8001256:	6018      	str	r0, [r3, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8001258:	f002 f9e2 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 800125c:	f004 fda8 	bl	8005db0 <test_start_timer.constprop.2>
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8001260:	46aa      	mov	sl, r5

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001262:	f04f 0820 	mov.w	r8, #32
 8001266:	2720      	movs	r7, #32
 8001268:	f388 8811 	msr	BASEPRI, r8
 800126c:	2100      	movs	r1, #0
 800126e:	4620      	mov	r0, r4
 8001270:	f003 fef6 	bl	8005060 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8001274:	4620      	mov	r0, r4
 8001276:	2100      	movs	r1, #0
 8001278:	f003 fef2 	bl	8005060 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 800127c:	4620      	mov	r0, r4
 800127e:	2100      	movs	r1, #0
 8001280:	f003 feee 	bl	8005060 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8001284:	4620      	mov	r0, r4
 8001286:	2100      	movs	r1, #0
 8001288:	f003 feea 	bl	8005060 <chSchWakeupS>
 800128c:	2600      	movs	r6, #0
 800128e:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001292:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8001296:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0e4      	beq.n	8001266 <bmk4_execute.lto_priv.129+0x36>
 800129c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	4620      	mov	r0, r4
 80012a6:	f003 fedb 	bl	8005060 <chSchWakeupS>
 80012aa:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 80012ae:	f002 f9c7 	bl	8003640 <test_wait_threads>
  test_print("--- Score : ");
 80012b2:	480a      	ldr	r0, [pc, #40]	; (80012dc <bmk4_execute.lto_priv.129+0xac>)
 80012b4:	f002 fb9c 	bl	80039f0 <test_print>
  test_printn(n * 2);
 80012b8:	0068      	lsls	r0, r5, #1
 80012ba:	f002 fba9 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 80012be:	4808      	ldr	r0, [pc, #32]	; (80012e0 <bmk4_execute.lto_priv.129+0xb0>)
}
 80012c0:	b002      	add	sp, #8
 80012c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 80012c6:	f002 bb73 	b.w	80039b0 <test_println>
 80012ca:	bf00      	nop
 80012cc:	20000b78 	.word	0x20000b78
 80012d0:	20000cf0 	.word	0x20000cf0
 80012d4:	080012f1 	.word	0x080012f1
 80012d8:	20000b08 	.word	0x20000b08
 80012dc:	080062c0 	.word	0x080062c0
 80012e0:	08006308 	.word	0x08006308
 80012e4:	20000cc8 	.word	0x20000cc8
	...

080012f0 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

static THD_FUNCTION(thread4, p) {
 80012f2:	b510      	push	{r4, lr}
 80012f4:	2320      	movs	r3, #32
 80012f6:	6994      	ldr	r4, [r2, #24]
 80012f8:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f003 ff3f 	bl	8005180 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8001302:	6a23      	ldr	r3, [r4, #32]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f9      	beq.n	80012fc <thread4+0xc>
 8001308:	2300      	movs	r3, #0
 800130a:	f383 8811 	msr	BASEPRI, r3
 800130e:	bd10      	pop	{r4, pc}
 8001310:	20000b78 	.word	0x20000b78
	...

08001320 <thread2.lto_priv.138>:

  chThdExit((msg_t)p);
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static THD_FUNCTION(thread2, p) {
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	2620      	movs	r6, #32
 8001324:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8001326:	f002 ff03 	bl	8004130 <chMsgWait>
 800132a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800132c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8001330:	4621      	mov	r1, r4
 8001332:	f003 fe95 	bl	8005060 <chSchWakeupS>
 8001336:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 800133a:	2c00      	cmp	r4, #0
 800133c:	d1f3      	bne.n	8001326 <thread2.lto_priv.138+0x6>
}
 800133e:	bd70      	pop	{r4, r5, r6, pc}

08001340 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8001344:	f002 f96c 	bl	8003620 <test_wait_tick>
  test_start_timer(1000);
 8001348:	f004 fd32 	bl	8005db0 <test_start_timer.constprop.2>
 800134c:	4e07      	ldr	r6, [pc, #28]	; (800136c <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800134e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8001350:	4628      	mov	r0, r5
 8001352:	2101      	movs	r1, #1
 8001354:	f002 ff0c 	bl	8004170 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8001358:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800135a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f7      	beq.n	8001350 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8001360:	4628      	mov	r0, r5
 8001362:	2100      	movs	r1, #0
 8001364:	f002 ff04 	bl	8004170 <chMsgSend>
  return n;
}
 8001368:	4620      	mov	r0, r4
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	20000cc8 	.word	0x20000cc8

08001370 <bmk3_execute.lto_priv.128>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8001370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001374:	4f2c      	ldr	r7, [pc, #176]	; (8001428 <bmk3_execute.lto_priv.128+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8001376:	4d2d      	ldr	r5, [pc, #180]	; (800142c <bmk3_execute.lto_priv.128+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <bmk3_execute.lto_priv.128+0xc0>)
 800137c:	6892      	ldr	r2, [r2, #8]
 800137e:	4c2d      	ldr	r4, [pc, #180]	; (8001434 <bmk3_execute.lto_priv.128+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8001380:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001444 <bmk3_execute.lto_priv.128+0xd4>
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8001384:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8001386:	2600      	movs	r6, #0
 8001388:	3201      	adds	r2, #1
 800138a:	4628      	mov	r0, r5
 800138c:	9600      	str	r6, [sp, #0]
 800138e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001392:	f003 feb5 	bl	8005100 <chThdCreateStatic>
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	9600      	str	r6, [sp, #0]
 800139e:	4643      	mov	r3, r8
 80013a0:	3a02      	subs	r2, #2
 80013a2:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80013a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80013aa:	f003 fea9 	bl	8005100 <chThdCreateStatic>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	9600      	str	r6, [sp, #0]
 80013b6:	4643      	mov	r3, r8
 80013b8:	3a03      	subs	r2, #3
 80013ba:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80013be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80013c2:	f003 fe9d 	bl	8005100 <chThdCreateStatic>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	9600      	str	r6, [sp, #0]
 80013ce:	4643      	mov	r3, r8
 80013d0:	3a04      	subs	r2, #4
 80013d2:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80013d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80013da:	f003 fe91 	bl	8005100 <chThdCreateStatic>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	9600      	str	r6, [sp, #0]
 80013e6:	3a05      	subs	r2, #5
 80013e8:	4643      	mov	r3, r8
 80013ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80013ee:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80013f2:	f003 fe85 	bl	8005100 <chThdCreateStatic>
 80013f6:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f7ff ffa1 	bl	8001340 <msg_loop_test>
 80013fe:	4604      	mov	r4, r0
  test_wait_threads();
 8001400:	f002 f91e 	bl	8003640 <test_wait_threads>
  test_print("--- Score : ");
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <bmk3_execute.lto_priv.128+0xc8>)
 8001406:	f002 faf3 	bl	80039f0 <test_print>
  test_printn(n);
 800140a:	4620      	mov	r0, r4
 800140c:	f002 fb00 	bl	8003a10 <test_printn>
  test_print(" msgs/S, ");
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <bmk3_execute.lto_priv.128+0xcc>)
 8001412:	f002 faed 	bl	80039f0 <test_print>
  test_printn(n << 1);
 8001416:	0060      	lsls	r0, r4, #1
 8001418:	f002 fafa 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <bmk3_execute.lto_priv.128+0xd0>)
}
 800141e:	b002      	add	sp, #8
 8001420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8001424:	f002 bac4 	b.w	80039b0 <test_println>
 8001428:	20000b78 	.word	0x20000b78
 800142c:	20000cf0 	.word	0x20000cf0
 8001430:	08001321 	.word	0x08001321
 8001434:	20000b08 	.word	0x20000b08
 8001438:	080062c0 	.word	0x080062c0
 800143c:	08006a5c 	.word	0x08006a5c
 8001440:	08006308 	.word	0x08006308
 8001444:	08001d61 	.word	0x08001d61
	...

08001450 <bmk2_execute.lto_priv.127>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8001450:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <bmk2_execute.lto_priv.127+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <bmk2_execute.lto_priv.127+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <bmk2_execute.lto_priv.127+0x58>)
 800145a:	6892      	ldr	r2, [r2, #8]
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 800145c:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800145e:	2100      	movs	r1, #0
 8001460:	3201      	adds	r2, #1
 8001462:	9100      	str	r1, [sp, #0]
 8001464:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001468:	f003 fe4a 	bl	8005100 <chThdCreateStatic>
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <bmk2_execute.lto_priv.127+0x5c>)
 800146e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8001470:	f7ff ff66 	bl	8001340 <msg_loop_test>
 8001474:	4604      	mov	r4, r0
  test_wait_threads();
 8001476:	f002 f8e3 	bl	8003640 <test_wait_threads>
  test_print("--- Score : ");
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <bmk2_execute.lto_priv.127+0x60>)
 800147c:	f002 fab8 	bl	80039f0 <test_print>
  test_printn(n);
 8001480:	4620      	mov	r0, r4
 8001482:	f002 fac5 	bl	8003a10 <test_printn>
  test_print(" msgs/S, ");
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <bmk2_execute.lto_priv.127+0x64>)
 8001488:	f002 fab2 	bl	80039f0 <test_print>
  test_printn(n << 1);
 800148c:	0060      	lsls	r0, r4, #1
 800148e:	f002 fabf 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <bmk2_execute.lto_priv.127+0x68>)
}
 8001494:	b002      	add	sp, #8
 8001496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800149a:	f002 ba89 	b.w	80039b0 <test_println>
 800149e:	bf00      	nop
 80014a0:	20000b78 	.word	0x20000b78
 80014a4:	20000cf0 	.word	0x20000cf0
 80014a8:	08001321 	.word	0x08001321
 80014ac:	20000b08 	.word	0x20000b08
 80014b0:	080062c0 	.word	0x080062c0
 80014b4:	08006a5c 	.word	0x08006a5c
 80014b8:	08006308 	.word	0x08006308
 80014bc:	00000000 	.word	0x00000000

080014c0 <bmk1_execute.lto_priv.126>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80014c0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <bmk1_execute.lto_priv.126+0x50>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <bmk1_execute.lto_priv.126+0x54>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <bmk1_execute.lto_priv.126+0x58>)
 80014ca:	6892      	ldr	r2, [r2, #8]
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 80014cc:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 80014ce:	2100      	movs	r1, #0
 80014d0:	3a01      	subs	r2, #1
 80014d2:	9100      	str	r1, [sp, #0]
 80014d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80014d8:	f003 fe12 	bl	8005100 <chThdCreateStatic>
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <bmk1_execute.lto_priv.126+0x5c>)
 80014de:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80014e0:	f7ff ff2e 	bl	8001340 <msg_loop_test>
 80014e4:	4604      	mov	r4, r0
  test_wait_threads();
 80014e6:	f002 f8ab 	bl	8003640 <test_wait_threads>
  test_print("--- Score : ");
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <bmk1_execute.lto_priv.126+0x60>)
 80014ec:	f002 fa80 	bl	80039f0 <test_print>
  test_printn(n);
 80014f0:	4620      	mov	r0, r4
 80014f2:	f002 fa8d 	bl	8003a10 <test_printn>
  test_print(" msgs/S, ");
 80014f6:	480b      	ldr	r0, [pc, #44]	; (8001524 <bmk1_execute.lto_priv.126+0x64>)
 80014f8:	f002 fa7a 	bl	80039f0 <test_print>
  test_printn(n << 1);
 80014fc:	0060      	lsls	r0, r4, #1
 80014fe:	f002 fa87 	bl	8003a10 <test_printn>
  test_println(" ctxswc/S");
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <bmk1_execute.lto_priv.126+0x68>)
}
 8001504:	b002      	add	sp, #8
 8001506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800150a:	f002 ba51 	b.w	80039b0 <test_println>
 800150e:	bf00      	nop
 8001510:	20000b78 	.word	0x20000b78
 8001514:	20000cf0 	.word	0x20000cf0
 8001518:	08001321 	.word	0x08001321
 800151c:	20000b08 	.word	0x20000b08
 8001520:	080062c0 	.word	0x080062c0
 8001524:	08006a5c 	.word	0x08006a5c
 8001528:	08006308 	.word	0x08006308
 800152c:	00000000 	.word	0x00000000

08001530 <sys3_execute.lto_priv.79>:
 * <h2>Description</h2>
 * The chSysIntegrityCheckI() API is invoked in order to asses the state of the
 * system data structures.
 */

static void sys3_execute(void) {
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	2420      	movs	r4, #32
 8001534:	f384 8811 	msr	BASEPRI, r4
  bool result;

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8001538:	2001      	movs	r0, #1
 800153a:	f004 f8f9 	bl	8005730 <chSysIntegrityCheckI>
 800153e:	2300      	movs	r3, #0
 8001540:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(1, result == false, "ready list check failed");
 8001544:	f080 0101 	eor.w	r1, r0, #1
 8001548:	b2c9      	uxtb	r1, r1
 800154a:	2001      	movs	r0, #1
 800154c:	f002 fa00 	bl	8003950 <_test_assert>
 8001550:	4605      	mov	r5, r0
 8001552:	b100      	cbz	r0, 8001556 <sys3_execute.lto_priv.79+0x26>
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 800155a:	2002      	movs	r0, #2
 800155c:	f004 f8e8 	bl	8005730 <chSysIntegrityCheckI>
 8001560:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(2, result == false, "virtual timers list check failed");
 8001564:	f080 0101 	eor.w	r1, r0, #1
 8001568:	b2c9      	uxtb	r1, r1
 800156a:	2002      	movs	r0, #2
 800156c:	f002 f9f0 	bl	8003950 <_test_assert>
 8001570:	4605      	mov	r5, r0
 8001572:	2800      	cmp	r0, #0
 8001574:	d1ee      	bne.n	8001554 <sys3_execute.lto_priv.79+0x24>
 8001576:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 800157a:	2004      	movs	r0, #4
 800157c:	f004 f8d8 	bl	8005730 <chSysIntegrityCheckI>
 8001580:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(3, result == false, "registry list check failed");
 8001584:	f080 0101 	eor.w	r1, r0, #1
 8001588:	b2c9      	uxtb	r1, r1
 800158a:	2003      	movs	r0, #3
 800158c:	f002 f9e0 	bl	8003950 <_test_assert>
 8001590:	4605      	mov	r5, r0
 8001592:	2800      	cmp	r0, #0
 8001594:	d1de      	bne.n	8001554 <sys3_execute.lto_priv.79+0x24>
 8001596:	f384 8811 	msr	BASEPRI, r4

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 800159a:	2008      	movs	r0, #8
 800159c:	f004 f8c8 	bl	8005730 <chSysIntegrityCheckI>
 80015a0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 80015a4:	f080 0101 	eor.w	r1, r0, #1
 80015a8:	b2c9      	uxtb	r1, r1
 80015aa:	2004      	movs	r0, #4
}
 80015ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_assert(3, result == false, "registry list check failed");

  chSysLock();
  result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
  chSysUnlock();
  test_assert(4, result == false, "port layer check failed");
 80015b0:	f002 b9ce 	b.w	8003950 <_test_assert>
	...

080015c0 <sys1_execute.lto_priv.77>:
  sts = chSysGetStatusAndLockX();
  chSysRestoreStatusX(sts);
  chSysUnlockFromISR();
}

static void sys1_execute(void) {
 80015c0:	b510      	push	{r4, lr}
 80015c2:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015c4:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80015c8:	b91b      	cbnz	r3, 80015d2 <sys1_execute.lto_priv.77+0x12>
 80015ca:	f004 f8a1 	bl	8005710 <chSysGetStatusAndLockX.part.2.lto_priv.141>
 80015ce:	f004 f88f 	bl	80056f0 <chSysRestoreStatusX.part.3.lto_priv.140>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80015d2:	2320      	movs	r3, #32
 80015d4:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015d8:	f3ef 8311 	mrs	r3, BASEPRI
 80015dc:	b91b      	cbnz	r3, 80015e6 <sys1_execute.lto_priv.77+0x26>
 80015de:	f004 f897 	bl	8005710 <chSysGetStatusAndLockX.part.2.lto_priv.141>
 80015e2:	f004 f885 	bl	80056f0 <chSysRestoreStatusX.part.3.lto_priv.140>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80015e6:	2300      	movs	r3, #0
 80015e8:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015ec:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80015f0:	b913      	cbnz	r3, 80015f8 <sys1_execute.lto_priv.77+0x38>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80015f2:	2320      	movs	r3, #32
 80015f4:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015f8:	f3ef 8311 	mrs	r3, BASEPRI
 80015fc:	b913      	cbnz	r3, 8001604 <sys1_execute.lto_priv.77+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80015fe:	2320      	movs	r3, #32
 8001600:	f383 8811 	msr	BASEPRI, r3
 8001604:	2300      	movs	r3, #0
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	2220      	movs	r2, #32
 800160c:	f382 8811 	msr	BASEPRI, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001610:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8001614:	b10a      	cbz	r2, 800161a <sys1_execute.lto_priv.77+0x5a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001616:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800161a:	f3ef 8311 	mrs	r3, BASEPRI
 800161e:	b113      	cbz	r3, 8001626 <sys1_execute.lto_priv.77+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001620:	2300      	movs	r3, #0
 8001622:	f383 8811 	msr	BASEPRI, r3
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	9304      	str	r3, [sp, #16]
 800162a:	2320      	movs	r3, #32
 800162c:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001630:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8001632:	ac01      	add	r4, sp, #4
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8001634:	b113      	cbz	r3, 800163c <sys1_execute.lto_priv.77+0x7c>
    chVTDoResetI(vtp);
 8001636:	4620      	mov	r0, r4
 8001638:	f003 ff72 	bl	8005520 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800163c:	4620      	mov	r0, r4
 800163e:	2101      	movs	r1, #1
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <sys1_execute.lto_priv.77+0xb0>)
 8001642:	2300      	movs	r3, #0
 8001644:	f003 ffa4 	bl	8005590 <chVTDoSetI>
 8001648:	2400      	movs	r4, #0
 800164a:	f384 8811 	msr	BASEPRI, r4
  chSysUnconditionalUnlock();

  /*/Testing from ISR context using a virtual timer.*/
  chVTObjectInit(&vt);
  chVTSet(&vt, 1, vtcb, NULL);
  chThdSleep(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f004 f83e 	bl	80056d0 <chThdSleep>
 8001654:	2320      	movs	r3, #32
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	9904      	ldr	r1, [sp, #16]
 800165c:	f384 8811 	msr	BASEPRI, r4

  test_assert(1, chVTIsArmed(&vt) == false, "timer still armed");
 8001660:	2001      	movs	r0, #1
 8001662:	fab1 f181 	clz	r1, r1
 8001666:	0949      	lsrs	r1, r1, #5
 8001668:	f002 f972 	bl	8003950 <_test_assert>
}
 800166c:	b006      	add	sp, #24
 800166e:	bd10      	pop	{r4, pc}
 8001670:	08001681 	.word	0x08001681
	...

08001680 <vtcb>:
 *
 * <h2>Description</h2>
 * The critical zones API is invoked for coverage.
 */

static void vtcb(void *p) {
 8001680:	b508      	push	{r3, lr}
 8001682:	2320      	movs	r3, #32
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	2200      	movs	r2, #0
 800168a:	f382 8811 	msr	BASEPRI, r2
 800168e:	f383 8811 	msr	BASEPRI, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001692:	f3ef 8311 	mrs	r3, BASEPRI
 8001696:	b91b      	cbnz	r3, 80016a0 <vtcb+0x20>
 8001698:	f004 f83a 	bl	8005710 <chSysGetStatusAndLockX.part.2.lto_priv.141>
 800169c:	f004 f828 	bl	80056f0 <chSysRestoreStatusX.part.3.lto_priv.140>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80016a0:	2300      	movs	r3, #0
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	bd08      	pop	{r3, pc}
	...

080016b0 <thread2.lto_priv.137>:
}

static THD_FUNCTION(thread2, p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <thread2.lto_priv.137+0xc>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016b8:	f002 bb9a 	b.w	8003df0 <chOQPutTimeout>
 80016bc:	20000800 	.word	0x20000800

080016c0 <queues2_execute.lto_priv.125>:
}

static void queues2_execute(void) {
 80016c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016c4:	2320      	movs	r3, #32
 80016c6:	b082      	sub	sp, #8
 80016c8:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80016cc:	4f8f      	ldr	r7, [pc, #572]	; (800190c <queues2_execute.lto_priv.125+0x24c>)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d05d      	beq.n	8001792 <queues2_execute.lto_priv.125+0xd2>
 80016d6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 80016d8:	2001      	movs	r0, #1
 80016da:	f002 f939 	bl	8003950 <_test_assert>
 80016de:	bbb8      	cbnz	r0, 8001750 <queues2_execute.lto_priv.125+0x90>
 80016e0:	f380 8811 	msr	BASEPRI, r0
 80016e4:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 80016e6:	4d89      	ldr	r5, [pc, #548]	; (800190c <queues2_execute.lto_priv.125+0x24c>)
 80016e8:	4621      	mov	r1, r4
 80016ea:	3401      	adds	r4, #1
 80016ec:	4628      	mov	r0, r5
 80016ee:	f04f 32ff 	mov.w	r2, #4294967295
 80016f2:	b2e4      	uxtb	r4, r4
 80016f4:	f002 fb7c 	bl	8003df0 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80016f8:	2c45      	cmp	r4, #69	; 0x45
 80016fa:	d1f4      	bne.n	80016e6 <queues2_execute.lto_priv.125+0x26>
 80016fc:	2620      	movs	r6, #32
 80016fe:	f386 8811 	msr	BASEPRI, r6
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8001702:	2002      	movs	r0, #2
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001704:	68a9      	ldr	r1, [r5, #8]
 8001706:	fab1 f181 	clz	r1, r1
 800170a:	0949      	lsrs	r1, r1, #5
 800170c:	f002 f920 	bl	8003950 <_test_assert>
 8001710:	4680      	mov	r8, r0
 8001712:	b9e8      	cbnz	r0, 8001750 <queues2_execute.lto_priv.125+0x90>
 8001714:	f380 8811 	msr	BASEPRI, r0
 8001718:	2404      	movs	r4, #4
 800171a:	4682      	mov	sl, r0
 800171c:	f04f 0920 	mov.w	r9, #32
 8001720:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8001724:	4d79      	ldr	r5, [pc, #484]	; (800190c <queues2_execute.lto_priv.125+0x24c>)
 8001726:	4628      	mov	r0, r5
 8001728:	f002 fb3a 	bl	8003da0 <chOQGetI>
 800172c:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    test_emit_token(c);
 8001730:	b2c0      	uxtb	r0, r0
 8001732:	f002 f925 	bl	8003980 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8001736:	3c01      	subs	r4, #1
 8001738:	d1f0      	bne.n	800171c <queues2_execute.lto_priv.125+0x5c>
 800173a:	f389 8811 	msr	BASEPRI, r9
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800173e:	696a      	ldr	r2, [r5, #20]
 8001740:	69ab      	ldr	r3, [r5, #24]
 8001742:	429a      	cmp	r2, r3
 8001744:	d02a      	beq.n	800179c <queues2_execute.lto_priv.125+0xdc>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8001746:	4641      	mov	r1, r8
 8001748:	2003      	movs	r0, #3
 800174a:	f002 f901 	bl	8003950 <_test_assert>
 800174e:	b128      	cbz	r0, 800175c <queues2_execute.lto_priv.125+0x9c>
 8001750:	2300      	movs	r3, #0
 8001752:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8001756:	b002      	add	sp, #8
 8001758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800175c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8001760:	2004      	movs	r0, #4
 8001762:	496b      	ldr	r1, [pc, #428]	; (8001910 <queues2_execute.lto_priv.125+0x250>)
 8001764:	f001 ffbc 	bl	80036e0 <_test_assert_sequence>
 8001768:	4604      	mov	r4, r0
 800176a:	2800      	cmp	r0, #0
 800176c:	d1f3      	bne.n	8001756 <queues2_execute.lto_priv.125+0x96>
 800176e:	2620      	movs	r6, #32
 8001770:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8001774:	4d65      	ldr	r5, [pc, #404]	; (800190c <queues2_execute.lto_priv.125+0x24c>)
 8001776:	4628      	mov	r0, r5
 8001778:	f002 fb12 	bl	8003da0 <chOQGetI>
 800177c:	3003      	adds	r0, #3
 800177e:	bf14      	ite	ne
 8001780:	2100      	movne	r1, #0
 8001782:	2101      	moveq	r1, #1
 8001784:	2005      	movs	r0, #5
 8001786:	f002 f8e3 	bl	8003950 <_test_assert>
 800178a:	b170      	cbz	r0, 80017aa <queues2_execute.lto_priv.125+0xea>
 800178c:	f384 8811 	msr	BASEPRI, r4
 8001790:	e7e1      	b.n	8001756 <queues2_execute.lto_priv.125+0x96>
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	3100      	adds	r1, #0
 8001796:	bf18      	it	ne
 8001798:	2101      	movne	r1, #1
 800179a:	e79d      	b.n	80016d8 <queues2_execute.lto_priv.125+0x18>
 800179c:	68ab      	ldr	r3, [r5, #8]
 800179e:	f113 0800 	adds.w	r8, r3, #0
 80017a2:	bf18      	it	ne
 80017a4:	f04f 0801 	movne.w	r8, #1
 80017a8:	e7cd      	b.n	8001746 <queues2_execute.lto_priv.125+0x86>
 80017aa:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 80017ae:	4959      	ldr	r1, [pc, #356]	; (8001914 <queues2_execute.lto_priv.125+0x254>)
 80017b0:	4603      	mov	r3, r0
 80017b2:	2208      	movs	r2, #8
 80017b4:	4628      	mov	r0, r5
 80017b6:	f002 fa9b 	bl	8003cf0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80017ba:	f1a0 0104 	sub.w	r1, r0, #4
 80017be:	2006      	movs	r0, #6
 80017c0:	fab1 f181 	clz	r1, r1
 80017c4:	0949      	lsrs	r1, r1, #5
 80017c6:	f002 f8c3 	bl	8003950 <_test_assert>
 80017ca:	4604      	mov	r4, r0
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d1c2      	bne.n	8001756 <queues2_execute.lto_priv.125+0x96>
 80017d0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 80017d4:	2007      	movs	r0, #7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80017d6:	68a9      	ldr	r1, [r5, #8]
 80017d8:	fab1 f181 	clz	r1, r1
 80017dc:	0949      	lsrs	r1, r1, #5
 80017de:	f002 f8b7 	bl	8003950 <_test_assert>
 80017e2:	4680      	mov	r8, r0
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d1d1      	bne.n	800178c <queues2_execute.lto_priv.125+0xcc>
 80017e8:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80017ec:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <queues2_execute.lto_priv.125+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80017ee:	484b      	ldr	r0, [pc, #300]	; (800191c <queues2_execute.lto_priv.125+0x25c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <queues2_execute.lto_priv.125+0x260>)
 80017f4:	6892      	ldr	r2, [r2, #8]
 80017f6:	f8cd 8000 	str.w	r8, [sp]
 80017fa:	3201      	adds	r2, #1
 80017fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001800:	f003 fc7e 	bl	8005100 <chThdCreateStatic>
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <queues2_execute.lto_priv.125+0x264>)
 8001806:	6018      	str	r0, [r3, #0]
 8001808:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 800180c:	68e9      	ldr	r1, [r5, #12]
 800180e:	692b      	ldr	r3, [r5, #16]
 8001810:	68aa      	ldr	r2, [r5, #8]
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8001816:	f1a1 0104 	sub.w	r1, r1, #4
 800181a:	2008      	movs	r0, #8
 800181c:	fab1 f181 	clz	r1, r1
 8001820:	0949      	lsrs	r1, r1, #5
 8001822:	f002 f895 	bl	8003950 <_test_assert>
 8001826:	b110      	cbz	r0, 800182e <queues2_execute.lto_priv.125+0x16e>
 8001828:	f388 8811 	msr	BASEPRI, r8
 800182c:	e793      	b.n	8001756 <queues2_execute.lto_priv.125+0x96>
 800182e:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8001832:	f001 ff05 	bl	8003640 <test_wait_threads>
 8001836:	f386 8811 	msr	BASEPRI, r6
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 800183a:	68e9      	ldr	r1, [r5, #12]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 800183c:	692a      	ldr	r2, [r5, #16]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800183e:	682b      	ldr	r3, [r5, #0]
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001840:	61a9      	str	r1, [r5, #24]
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001842:	1a52      	subs	r2, r2, r1
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8001844:	42ab      	cmp	r3, r5
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8001846:	6169      	str	r1, [r5, #20]
  oqp->q_counter = chQSizeX(oqp);
 8001848:	60aa      	str	r2, [r5, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800184a:	bf18      	it	ne
 800184c:	f06f 0401 	mvnne.w	r4, #1
 8001850:	d009      	beq.n	8001866 <queues2_execute.lto_priv.125+0x1a6>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	603a      	str	r2, [r7, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001856:	6057      	str	r7, [r2, #4]
  (void) chSchReadyI(tp);
 8001858:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800185a:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 800185c:	f003 fcf0 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	42bb      	cmp	r3, r7
 8001864:	d1f5      	bne.n	8001852 <queues2_execute.lto_priv.125+0x192>
 8001866:	2500      	movs	r5, #0
 8001868:	f385 8811 	msr	BASEPRI, r5
 800186c:	2620      	movs	r6, #32
 800186e:	f386 8811 	msr	BASEPRI, r6
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4c24      	ldr	r4, [pc, #144]	; (800190c <queues2_execute.lto_priv.125+0x24c>)
 800187a:	1a9b      	subs	r3, r3, r2

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 800187c:	1a59      	subs	r1, r3, r1
 800187e:	2009      	movs	r0, #9
 8001880:	fab1 f181 	clz	r1, r1
 8001884:	0949      	lsrs	r1, r1, #5
 8001886:	f002 f863 	bl	8003950 <_test_assert>
 800188a:	4603      	mov	r3, r0
 800188c:	b110      	cbz	r0, 8001894 <queues2_execute.lto_priv.125+0x1d4>
 800188e:	f385 8811 	msr	BASEPRI, r5
 8001892:	e760      	b.n	8001756 <queues2_execute.lto_priv.125+0x96>
 8001894:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8001898:	491e      	ldr	r1, [pc, #120]	; (8001914 <queues2_execute.lto_priv.125+0x254>)
 800189a:	2202      	movs	r2, #2
 800189c:	4620      	mov	r0, r4
 800189e:	f002 fa27 	bl	8003cf0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80018a2:	3802      	subs	r0, #2
 80018a4:	4241      	negs	r1, r0
 80018a6:	4141      	adcs	r1, r0
 80018a8:	200a      	movs	r0, #10
 80018aa:	f002 f851 	bl	8003950 <_test_assert>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f47f af50 	bne.w	8001756 <queues2_execute.lto_priv.125+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80018b6:	4917      	ldr	r1, [pc, #92]	; (8001914 <queues2_execute.lto_priv.125+0x254>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	4620      	mov	r0, r4
 80018bc:	f002 fa18 	bl	8003cf0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80018c0:	1e82      	subs	r2, r0, #2
 80018c2:	4251      	negs	r1, r2
 80018c4:	4151      	adcs	r1, r2
 80018c6:	200b      	movs	r0, #11
 80018c8:	f002 f842 	bl	8003950 <_test_assert>
 80018cc:	4605      	mov	r5, r0
 80018ce:	2800      	cmp	r0, #0
 80018d0:	f47f af41 	bne.w	8001756 <queues2_execute.lto_priv.125+0x96>
 80018d4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 80018d8:	200c      	movs	r0, #12
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80018da:	68a1      	ldr	r1, [r4, #8]
 80018dc:	fab1 f181 	clz	r1, r1
 80018e0:	0949      	lsrs	r1, r1, #5
 80018e2:	f002 f835 	bl	8003950 <_test_assert>
 80018e6:	4601      	mov	r1, r0
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1d0      	bne.n	800188e <queues2_execute.lto_priv.125+0x1ce>
 80018ec:	f380 8811 	msr	BASEPRI, r0

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 80018f0:	220a      	movs	r2, #10
 80018f2:	4620      	mov	r0, r4
 80018f4:	f002 fa7c 	bl	8003df0 <chOQPutTimeout>
 80018f8:	1c43      	adds	r3, r0, #1
 80018fa:	4259      	negs	r1, r3
 80018fc:	4159      	adcs	r1, r3
 80018fe:	200d      	movs	r0, #13
}
 8001900:	b002      	add	sp, #8
 8001902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8001906:	f002 b823 	b.w	8003950 <_test_assert>
 800190a:	bf00      	nop
 800190c:	20000800 	.word	0x20000800
 8001910:	08006a68 	.word	0x08006a68
 8001914:	20000e38 	.word	0x20000e38
 8001918:	20000b78 	.word	0x20000b78
 800191c:	20000cf0 	.word	0x20000cf0
 8001920:	080016b1 	.word	0x080016b1
 8001924:	20000b08 	.word	0x20000b08
	...

08001930 <thread1.lto_priv.135>:
}

static THD_FUNCTION(thread1, p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <thread1.lto_priv.135+0xc>)
 8001932:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001936:	f002 baeb 	b.w	8003f10 <chIQGetTimeout>
 800193a:	bf00      	nop
 800193c:	20000824 	.word	0x20000824

08001940 <queues1_execute.lto_priv.123>:
}

static void queues1_execute(void) {
 8001940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001944:	2420      	movs	r4, #32
 8001946:	b082      	sub	sp, #8
 8001948:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800194c:	4f98      	ldr	r7, [pc, #608]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 800194e:	2001      	movs	r0, #1
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	fab1 f181 	clz	r1, r1
 8001956:	0949      	lsrs	r1, r1, #5
 8001958:	f001 fffa 	bl	8003950 <_test_assert>
 800195c:	4606      	mov	r6, r0
 800195e:	b9e8      	cbnz	r0, 800199c <queues1_execute.lto_priv.123+0x5c>
 8001960:	f380 8811 	msr	BASEPRI, r0
 8001964:	f384 8811 	msr	BASEPRI, r4
 8001968:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800196a:	4d91      	ldr	r5, [pc, #580]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 800196c:	4621      	mov	r1, r4
 800196e:	3401      	adds	r4, #1
 8001970:	4628      	mov	r0, r5
 8001972:	b2e4      	uxtb	r4, r4
 8001974:	f002 fb04 	bl	8003f80 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8001978:	2c45      	cmp	r4, #69	; 0x45
 800197a:	d1f6      	bne.n	800196a <queues1_execute.lto_priv.123+0x2a>
 800197c:	2300      	movs	r3, #0
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	2320      	movs	r3, #32
 8001984:	f383 8811 	msr	BASEPRI, r3
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001988:	69aa      	ldr	r2, [r5, #24]
 800198a:	696b      	ldr	r3, [r5, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	d03a      	beq.n	8001a06 <queues1_execute.lto_priv.123+0xc6>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8001990:	4631      	mov	r1, r6
 8001992:	2002      	movs	r0, #2
 8001994:	f001 ffdc 	bl	8003950 <_test_assert>
 8001998:	4604      	mov	r4, r0
 800199a:	b128      	cbz	r0, 80019a8 <queues1_execute.lto_priv.123+0x68>
 800199c:	2300      	movs	r3, #0
 800199e:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80019a2:	b002      	add	sp, #8
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a8:	f380 8811 	msr	BASEPRI, r0
 80019ac:	2320      	movs	r3, #32
 80019ae:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 80019b2:	487f      	ldr	r0, [pc, #508]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 80019b4:	4621      	mov	r1, r4
 80019b6:	f002 fae3 	bl	8003f80 <chIQPutI>
 80019ba:	3004      	adds	r0, #4
 80019bc:	bf14      	ite	ne
 80019be:	2100      	movne	r1, #0
 80019c0:	2101      	moveq	r1, #1
 80019c2:	2003      	movs	r0, #3
 80019c4:	f001 ffc4 	bl	8003950 <_test_assert>
 80019c8:	b9c0      	cbnz	r0, 80019fc <queues1_execute.lto_priv.123+0xbc>
 80019ca:	f380 8811 	msr	BASEPRI, r0
 80019ce:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80019d0:	4d77      	ldr	r5, [pc, #476]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 80019d2:	f04f 31ff 	mov.w	r1, #4294967295
 80019d6:	4628      	mov	r0, r5
 80019d8:	f002 fa9a 	bl	8003f10 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 80019dc:	b2c0      	uxtb	r0, r0
 80019de:	f001 ffcf 	bl	8003980 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80019e2:	3c01      	subs	r4, #1
 80019e4:	d1f4      	bne.n	80019d0 <queues1_execute.lto_priv.123+0x90>
 80019e6:	2620      	movs	r6, #32
 80019e8:	f386 8811 	msr	BASEPRI, r6
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 80019ec:	2004      	movs	r0, #4
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80019ee:	68a9      	ldr	r1, [r5, #8]
 80019f0:	fab1 f181 	clz	r1, r1
 80019f4:	0949      	lsrs	r1, r1, #5
 80019f6:	f001 ffab 	bl	8003950 <_test_assert>
 80019fa:	b148      	cbz	r0, 8001a10 <queues1_execute.lto_priv.123+0xd0>
 80019fc:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8001a00:	b002      	add	sp, #8
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001a06:	68ae      	ldr	r6, [r5, #8]
 8001a08:	3600      	adds	r6, #0
 8001a0a:	bf18      	it	ne
 8001a0c:	2601      	movne	r6, #1
 8001a0e:	e7bf      	b.n	8001990 <queues1_execute.lto_priv.123+0x50>
 8001a10:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8001a14:	2005      	movs	r0, #5
 8001a16:	4967      	ldr	r1, [pc, #412]	; (8001bb4 <queues1_execute.lto_priv.123+0x274>)
 8001a18:	f001 fe62 	bl	80036e0 <_test_assert_sequence>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1c0      	bne.n	80019a2 <queues1_execute.lto_priv.123+0x62>
 8001a20:	f386 8811 	msr	BASEPRI, r6
 8001a24:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8001a26:	4d62      	ldr	r5, [pc, #392]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 8001a28:	4621      	mov	r1, r4
 8001a2a:	3401      	adds	r4, #1
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	b2e4      	uxtb	r4, r4
 8001a30:	f002 faa6 	bl	8003f80 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8001a34:	2c45      	cmp	r4, #69	; 0x45
 8001a36:	d1f6      	bne.n	8001a26 <queues1_execute.lto_priv.123+0xe6>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8001a3e:	495e      	ldr	r1, [pc, #376]	; (8001bb8 <queues1_execute.lto_priv.123+0x278>)
 8001a40:	2208      	movs	r2, #8
 8001a42:	4628      	mov	r0, r5
 8001a44:	f002 fa14 	bl	8003e70 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8001a48:	f1a0 0104 	sub.w	r1, r0, #4
 8001a4c:	2006      	movs	r0, #6
 8001a4e:	fab1 f181 	clz	r1, r1
 8001a52:	0949      	lsrs	r1, r1, #5
 8001a54:	f001 ff7c 	bl	8003950 <_test_assert>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d1a1      	bne.n	80019a2 <queues1_execute.lto_priv.123+0x62>
 8001a5e:	2620      	movs	r6, #32
 8001a60:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8001a64:	2007      	movs	r0, #7
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001a66:	68a9      	ldr	r1, [r5, #8]
 8001a68:	fab1 f181 	clz	r1, r1
 8001a6c:	0949      	lsrs	r1, r1, #5
 8001a6e:	f001 ff6f 	bl	8003950 <_test_assert>
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d1c2      	bne.n	80019fc <queues1_execute.lto_priv.123+0xbc>
 8001a76:	f380 8811 	msr	BASEPRI, r0
 8001a7a:	f386 8811 	msr	BASEPRI, r6
 8001a7e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8001a80:	4d4b      	ldr	r5, [pc, #300]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 8001a82:	4621      	mov	r1, r4
 8001a84:	3401      	adds	r4, #1
 8001a86:	4628      	mov	r0, r5
 8001a88:	b2e4      	uxtb	r4, r4
 8001a8a:	f002 fa79 	bl	8003f80 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8001a8e:	2c45      	cmp	r4, #69	; 0x45
 8001a90:	d1f6      	bne.n	8001a80 <queues1_execute.lto_priv.123+0x140>
 8001a92:	2300      	movs	r3, #0
 8001a94:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8001a98:	4947      	ldr	r1, [pc, #284]	; (8001bb8 <queues1_execute.lto_priv.123+0x278>)
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f002 f9e7 	bl	8003e70 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8001aa2:	f1a0 0102 	sub.w	r1, r0, #2
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	fab1 f181 	clz	r1, r1
 8001aac:	0949      	lsrs	r1, r1, #5
 8001aae:	f001 ff4f 	bl	8003950 <_test_assert>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f47f af75 	bne.w	80019a2 <queues1_execute.lto_priv.123+0x62>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8001ab8:	4603      	mov	r3, r0
 8001aba:	493f      	ldr	r1, [pc, #252]	; (8001bb8 <queues1_execute.lto_priv.123+0x278>)
 8001abc:	2202      	movs	r2, #2
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f002 f9d6 	bl	8003e70 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8001ac4:	f1a0 0102 	sub.w	r1, r0, #2
 8001ac8:	2009      	movs	r0, #9
 8001aca:	fab1 f181 	clz	r1, r1
 8001ace:	0949      	lsrs	r1, r1, #5
 8001ad0:	f001 ff3e 	bl	8003950 <_test_assert>
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	f47f af63 	bne.w	80019a2 <queues1_execute.lto_priv.123+0x62>
 8001adc:	2620      	movs	r6, #32
 8001ade:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	68a9      	ldr	r1, [r5, #8]
 8001ae6:	fab1 f181 	clz	r1, r1
 8001aea:	0949      	lsrs	r1, r1, #5
 8001aec:	f001 ff30 	bl	8003950 <_test_assert>
 8001af0:	4604      	mov	r4, r0
 8001af2:	b110      	cbz	r0, 8001afa <queues1_execute.lto_priv.123+0x1ba>
 8001af4:	f388 8811 	msr	BASEPRI, r8
 8001af8:	e753      	b.n	80019a2 <queues1_execute.lto_priv.123+0x62>
 8001afa:	f380 8811 	msr	BASEPRI, r0
 8001afe:	f386 8811 	msr	BASEPRI, r6

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8001b02:	4621      	mov	r1, r4
 8001b04:	4628      	mov	r0, r5
 8001b06:	f002 fa3b 	bl	8003f80 <chIQPutI>
 8001b0a:	682b      	ldr	r3, [r5, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001b0c:	68ea      	ldr	r2, [r5, #12]
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001b0e:	60ac      	str	r4, [r5, #8]
 8001b10:	42ab      	cmp	r3, r5
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001b12:	61aa      	str	r2, [r5, #24]
  iqp->q_wrptr = iqp->q_buffer;
 8001b14:	616a      	str	r2, [r5, #20]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001b16:	bf18      	it	ne
 8001b18:	f06f 0401 	mvnne.w	r4, #1
 8001b1c:	d009      	beq.n	8001b32 <queues1_execute.lto_priv.123+0x1f2>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	603a      	str	r2, [r7, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001b22:	6057      	str	r7, [r2, #4]
  (void) chSchReadyI(tp);
 8001b24:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001b26:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 8001b28:	f003 fb8a 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	42bb      	cmp	r3, r7
 8001b30:	d1f5      	bne.n	8001b1e <queues1_execute.lto_priv.123+0x1de>
 8001b32:	f04f 0800 	mov.w	r8, #0
 8001b36:	f388 8811 	msr	BASEPRI, r8
 8001b3a:	2620      	movs	r6, #32
 8001b3c:	f386 8811 	msr	BASEPRI, r6
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8001b40:	200b      	movs	r0, #11
 */
static inline size_t chIQGetFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)chQSpaceI(iqp);
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	fab1 f181 	clz	r1, r1
 8001b48:	0949      	lsrs	r1, r1, #5
 8001b4a:	f001 ff01 	bl	8003950 <_test_assert>
 8001b4e:	4d18      	ldr	r5, [pc, #96]	; (8001bb0 <queues1_execute.lto_priv.123+0x270>)
 8001b50:	4604      	mov	r4, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1ce      	bne.n	8001af4 <queues1_execute.lto_priv.123+0x1b4>
 8001b56:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <queues1_execute.lto_priv.123+0x27c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8001b5c:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <queues1_execute.lto_priv.123+0x280>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <queues1_execute.lto_priv.123+0x284>)
 8001b62:	6892      	ldr	r2, [r2, #8]
 8001b64:	9400      	str	r4, [sp, #0]
 8001b66:	3201      	adds	r2, #1
 8001b68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001b6c:	f003 fac8 	bl	8005100 <chThdCreateStatic>
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <queues1_execute.lto_priv.123+0x288>)
 8001b72:	6018      	str	r0, [r3, #0]
 8001b74:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8001b78:	200c      	movs	r0, #12
 8001b7a:	68a9      	ldr	r1, [r5, #8]
 8001b7c:	fab1 f181 	clz	r1, r1
 8001b80:	0949      	lsrs	r1, r1, #5
 8001b82:	f001 fee5 	bl	8003950 <_test_assert>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	f47f af38 	bne.w	80019fc <queues1_execute.lto_priv.123+0xbc>
 8001b8c:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8001b90:	f001 fd56 	bl	8003640 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8001b94:	4628      	mov	r0, r5
 8001b96:	210a      	movs	r1, #10
 8001b98:	f002 f9ba 	bl	8003f10 <chIQGetTimeout>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	4259      	negs	r1, r3
 8001ba0:	4159      	adcs	r1, r3
 8001ba2:	200d      	movs	r0, #13
}
 8001ba4:	b002      	add	sp, #8
 8001ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8001baa:	f001 bed1 	b.w	8003950 <_test_assert>
 8001bae:	bf00      	nop
 8001bb0:	20000824 	.word	0x20000824
 8001bb4:	08006a68 	.word	0x08006a68
 8001bb8:	20000e38 	.word	0x20000e38
 8001bbc:	20000b78 	.word	0x20000b78
 8001bc0:	20000cf0 	.word	0x20000cf0
 8001bc4:	08001931 	.word	0x08001931
 8001bc8:	20000b08 	.word	0x20000b08
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8001bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bd4:	4680      	mov	r8, r0
 8001bd6:	2520      	movs	r5, #32
 8001bd8:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8001bdc:	4e10      	ldr	r6, [pc, #64]	; (8001c20 <regfind+0x50>)
 8001bde:	6930      	ldr	r0, [r6, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs++;
 8001be0:	7f83      	ldrb	r3, [r0, #30]
 8001be2:	3301      	adds	r3, #1
 8001be4:	7783      	strb	r3, [r0, #30]
 8001be6:	f04f 0900 	mov.w	r9, #0
 8001bea:	f389 8811 	msr	BASEPRI, r9
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8001bee:	464f      	mov	r7, r9
 8001bf0:	e000      	b.n	8001bf4 <regfind+0x24>

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8001bf2:	4620      	mov	r0, r4
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8001bf4:	4540      	cmp	r0, r8
 8001bf6:	bf08      	it	eq
 8001bf8:	f049 0901 	orreq.w	r9, r9, #1
 8001bfc:	f385 8811 	msr	BASEPRI, r5
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8001c00:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8001c02:	42b4      	cmp	r4, r6
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->p_refs < (trefs_t)255, "too many references");
    ntp->p_refs++;
 8001c04:	bf1d      	ittte	ne
 8001c06:	7fa3      	ldrbne	r3, [r4, #30]
 8001c08:	3301      	addne	r3, #1
 8001c0a:	77a3      	strbne	r3, [r4, #30]
  chSysLock();
  ntp = tp->p_newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8001c0c:	2400      	moveq	r4, #0
 8001c0e:	f387 8811 	msr	BASEPRI, r7
    ntp->p_refs++;
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8001c12:	f003 f95d 	bl	8004ed0 <chThdRelease>
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d1eb      	bne.n	8001bf2 <regfind+0x22>
  return found;
}
 8001c1a:	4648      	mov	r0, r9
 8001c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c20:	20000b78 	.word	0x20000b78
	...

08001c30 <dyn3_execute.lto_priv.121>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <dyn3_execute.lto_priv.121+0x11c>)
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8001c32:	4947      	ldr	r1, [pc, #284]	; (8001d50 <dyn3_execute.lto_priv.121+0x120>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	6898      	ldr	r0, [r3, #8]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8001c38:	b510      	push	{r4, lr}
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8001c3a:	3801      	subs	r0, #1
 8001c3c:	f003 fe28 	bl	8005890 <chThdCreateFromHeap.constprop.59>
 8001c40:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8001c42:	2001      	movs	r0, #1
 8001c44:	7fa1      	ldrb	r1, [r4, #30]
 8001c46:	1a09      	subs	r1, r1, r0
 8001c48:	fab1 f181 	clz	r1, r1
 8001c4c:	0949      	lsrs	r1, r1, #5
 8001c4e:	f001 fe7f 	bl	8003950 <_test_assert>
 8001c52:	b100      	cbz	r0, 8001c56 <dyn3_execute.lto_priv.121+0x26>
 8001c54:	bd10      	pop	{r4, pc}
 8001c56:	2320      	movs	r3, #32
 8001c58:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < (trefs_t)255, "too many references");
  tp->p_refs++;
 8001c5c:	7fa3      	ldrb	r3, [r4, #30]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	77a3      	strb	r3, [r4, #30]
 8001c62:	f380 8811 	msr	BASEPRI, r0
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8001c66:	7fa1      	ldrb	r1, [r4, #30]
 8001c68:	2002      	movs	r0, #2
 8001c6a:	1a09      	subs	r1, r1, r0
 8001c6c:	fab1 f181 	clz	r1, r1
 8001c70:	0949      	lsrs	r1, r1, #5
 8001c72:	f001 fe6d 	bl	8003950 <_test_assert>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d1ec      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  chThdRelease(tp);
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f003 f928 	bl	8004ed0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8001c80:	7fa1      	ldrb	r1, [r4, #30]
 8001c82:	2003      	movs	r0, #3
 8001c84:	f1a1 0101 	sub.w	r1, r1, #1
 8001c88:	fab1 f181 	clz	r1, r1
 8001c8c:	0949      	lsrs	r1, r1, #5
 8001c8e:	f001 fe5f 	bl	8003950 <_test_assert>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1de      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff ff9a 	bl	8001bd0 <regfind>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	f001 fe56 	bl	8003950 <_test_assert>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1d5      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  test_assert(5, regfind(tp), "thread disappeared");
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ff91 	bl	8001bd0 <regfind>
 8001cae:	4601      	mov	r1, r0
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	f001 fe4d 	bl	8003950 <_test_assert>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d1cc      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f003 f908 	bl	8004ed0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8001cc0:	7fa1      	ldrb	r1, [r4, #30]
 8001cc2:	fab1 f181 	clz	r1, r1
 8001cc6:	2006      	movs	r0, #6
 8001cc8:	0949      	lsrs	r1, r1, #5
 8001cca:	f001 fe41 	bl	8003950 <_test_assert>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d1c0      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8001cd2:	7f21      	ldrb	r1, [r4, #28]
 8001cd4:	fab1 f181 	clz	r1, r1
 8001cd8:	2007      	movs	r0, #7
 8001cda:	0949      	lsrs	r1, r1, #5
 8001cdc:	f001 fe38 	bl	8003950 <_test_assert>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d1b7      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  test_assert(8, regfind(tp), "thread disappeared");
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff ff73 	bl	8001bd0 <regfind>
 8001cea:	4601      	mov	r1, r0
 8001cec:	2008      	movs	r0, #8
 8001cee:	f001 fe2f 	bl	8003950 <_test_assert>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d1ae      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  test_assert(9, regfind(tp), "thread disappeared");
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff ff6a 	bl	8001bd0 <regfind>
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	2009      	movs	r0, #9
 8001d00:	f001 fe26 	bl	8003950 <_test_assert>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d1a5      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8001d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d0c:	f003 fce0 	bl	80056d0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8001d10:	7f21      	ldrb	r1, [r4, #28]
 8001d12:	f1a1 030f 	sub.w	r3, r1, #15
 8001d16:	4259      	negs	r1, r3
 8001d18:	4159      	adcs	r1, r3
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f001 fe18 	bl	8003950 <_test_assert>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d197      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff53 	bl	8001bd0 <regfind>
 8001d2a:	4601      	mov	r1, r0
 8001d2c:	200b      	movs	r0, #11
 8001d2e:	f001 fe0f 	bl	8003950 <_test_assert>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d18e      	bne.n	8001c54 <dyn3_execute.lto_priv.121+0x24>
  test_assert(12, !regfind(tp), "thread still in registry");
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff4a 	bl	8001bd0 <regfind>
 8001d3c:	f080 0101 	eor.w	r1, r0, #1
 8001d40:	b2c9      	uxtb	r1, r1
 8001d42:	200c      	movs	r0, #12
}
 8001d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8001d48:	f001 be02 	b.w	8003950 <_test_assert>
 8001d4c:	20000b78 	.word	0x20000b78
 8001d50:	08006a70 	.word	0x08006a70
	...

08001d60 <thread1.lto_priv.136>:
static mutex_t mtx1;
#endif

static THD_FUNCTION(thread1, p) {

  chThdExit((msg_t)p);
 8001d60:	f003 bbb6 	b.w	80054d0 <chThdExit>
	...

08001d70 <dyn2_setup.lto_priv.118>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <dyn2_setup.lto_priv.118+0x10>)
 8001d72:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8001d74:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d78:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001d7a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	4770      	bx	lr
 8001d80:	20000ccc 	.word	0x20000ccc
	...

08001d90 <dyn1_setup.lto_priv.116>:
  heapp->h_free.h.u.next = hp;
 8001d90:	4909      	ldr	r1, [pc, #36]	; (8001db8 <dyn1_setup.lto_priv.116+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <dyn1_setup.lto_priv.116+0x2c>)

  test_emit_token(*(char *)p);
}

#if CH_CFG_USE_HEAP || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8001d94:	b410      	push	{r4}
 8001d96:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001d98:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 8001d9c:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001da0:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8001da4:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001daa:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8001db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000cf0 	.word	0x20000cf0
 8001dbc:	20001358 	.word	0x20001358

08001dc0 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	4770      	bx	lr
	...

08001dd0 <pools1_setup.lto_priv.114>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <pools1_setup.lto_priv.114+0x10>)
 8001dd2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8001dd4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001dd8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001dda:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	4770      	bx	lr
 8001de0:	20000850 	.word	0x20000850
	...

08001df0 <heap1_setup.lto_priv.112>:
  heapp->h_free.h.u.next = hp;
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <heap1_setup.lto_priv.112+0x28>)
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <heap1_setup.lto_priv.112+0x2c>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8001df4:	b410      	push	{r4}
 8001df6:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001df8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
 8001dfc:	e881 0014 	stmia.w	r1, {r2, r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001e00:	f103 0010 	add.w	r0, r3, #16
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
  heapp->h_free.h.u.next = hp;
 8001e04:	6099      	str	r1, [r3, #8]
  heapp->h_free.h.size = 0;
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	6118      	str	r0, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001e0a:	6158      	str	r0, [r3, #20]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp = buf;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = NULL;
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8001e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000cf0 	.word	0x20000cf0
 8001e1c:	20000b58 	.word	0x20000b58

08001e20 <pools1_execute.lto_priv.115>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <pools1_execute.lto_priv.115+0xc0>)
 8001e24:	4c2f      	ldr	r4, [pc, #188]	; (8001ee4 <pools1_execute.lto_priv.115+0xc4>)
 8001e26:	2205      	movs	r2, #5
 8001e28:	2520      	movs	r5, #32
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001e30:	6821      	ldr	r1, [r4, #0]
 8001e32:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001e3a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001e3c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8001e3e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8001e40:	d1f4      	bne.n	8001e2c <pools1_execute.lto_priv.115+0xc>
 8001e42:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8001e44:	4827      	ldr	r0, [pc, #156]	; (8001ee4 <pools1_execute.lto_priv.115+0xc4>)
 8001e46:	f001 fe7b 	bl	8003b40 <chPoolAlloc>
 8001e4a:	1c01      	adds	r1, r0, #0
 8001e4c:	bf18      	it	ne
 8001e4e:	2101      	movne	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f001 fd7d 	bl	8003950 <_test_assert>
 8001e56:	bb90      	cbnz	r0, 8001ebe <pools1_execute.lto_priv.115+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8001e58:	3d01      	subs	r5, #1
 8001e5a:	d1f3      	bne.n	8001e44 <pools1_execute.lto_priv.115+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8001e5c:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <pools1_execute.lto_priv.115+0xc4>)
 8001e5e:	f001 fe6f 	bl	8003b40 <chPoolAlloc>
 8001e62:	fab0 f180 	clz	r1, r0
 8001e66:	2002      	movs	r0, #2
 8001e68:	0949      	lsrs	r1, r1, #5
 8001e6a:	f001 fd71 	bl	8003950 <_test_assert>
 8001e6e:	bb30      	cbnz	r0, 8001ebe <pools1_execute.lto_priv.115+0x9e>
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <pools1_execute.lto_priv.115+0xc8>)
 8001e72:	2020      	movs	r0, #32
 8001e74:	f103 0614 	add.w	r6, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8001e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e7c:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001e80:	6821      	ldr	r1, [r4, #0]
 8001e82:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8001e84:	6022      	str	r2, [r4, #0]
 8001e86:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8001e8a:	42b3      	cmp	r3, r6
 8001e8c:	d1f4      	bne.n	8001e78 <pools1_execute.lto_priv.115+0x58>
 8001e8e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8001e90:	4d14      	ldr	r5, [pc, #80]	; (8001ee4 <pools1_execute.lto_priv.115+0xc4>)
 8001e92:	4628      	mov	r0, r5
 8001e94:	f001 fe54 	bl	8003b40 <chPoolAlloc>
 8001e98:	1c01      	adds	r1, r0, #0
 8001e9a:	bf18      	it	ne
 8001e9c:	2101      	movne	r1, #1
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f001 fd56 	bl	8003950 <_test_assert>
 8001ea4:	b958      	cbnz	r0, 8001ebe <pools1_execute.lto_priv.115+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8001ea6:	3c01      	subs	r4, #1
 8001ea8:	d1f2      	bne.n	8001e90 <pools1_execute.lto_priv.115+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f001 fe48 	bl	8003b40 <chPoolAlloc>
 8001eb0:	fab0 f180 	clz	r1, r0
 8001eb4:	2004      	movs	r0, #4
 8001eb6:	0949      	lsrs	r1, r1, #5
 8001eb8:	f001 fd4a 	bl	8003950 <_test_assert>
 8001ebc:	b100      	cbz	r0, 8001ec0 <pools1_execute.lto_priv.115+0xa0>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8001ec0:	2210      	movs	r2, #16
  mp->mp_provider = provider;
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <pools1_execute.lto_priv.115+0xcc>)
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001ec4:	602c      	str	r4, [r5, #0]

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001ec6:	4628      	mov	r0, r5
  mp->mp_object_size = size;
 8001ec8:	606a      	str	r2, [r5, #4]
  mp->mp_provider = provider;
 8001eca:	60ab      	str	r3, [r5, #8]
 8001ecc:	f001 fe38 	bl	8003b40 <chPoolAlloc>
}
 8001ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001ed4:	fab0 f180 	clz	r1, r0
 8001ed8:	2005      	movs	r0, #5
 8001eda:	0949      	lsrs	r1, r1, #5
 8001edc:	f001 bd38 	b.w	8003950 <_test_assert>
 8001ee0:	20000cf0 	.word	0x20000cf0
 8001ee4:	20000850 	.word	0x20000850
 8001ee8:	08006a20 	.word	0x08006a20
 8001eec:	08001dc1 	.word	0x08001dc1

08001ef0 <dyn2_execute.lto_priv.119>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <dyn2_execute.lto_priv.119+0xc0>)
 8001ef2:	4930      	ldr	r1, [pc, #192]	; (8001fb4 <dyn2_execute.lto_priv.119+0xc4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001ef4:	6992      	ldr	r2, [r2, #24]
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8001ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <dyn2_execute.lto_priv.119+0xc8>)
 8001efa:	6895      	ldr	r5, [r2, #8]
 8001efc:	f103 0710 	add.w	r7, r3, #16
 8001f00:	2620      	movs	r6, #32
 8001f02:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8001f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f08:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001f0c:	6808      	ldr	r0, [r1, #0]
 8001f0e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8001f10:	600a      	str	r2, [r1, #0]
 8001f12:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8001f16:	42bb      	cmp	r3, r7
 8001f18:	d1f4      	bne.n	8001f04 <dyn2_execute.lto_priv.119+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8001f1a:	4928      	ldr	r1, [pc, #160]	; (8001fbc <dyn2_execute.lto_priv.119+0xcc>)
 8001f1c:	4c28      	ldr	r4, [pc, #160]	; (8001fc0 <dyn2_execute.lto_priv.119+0xd0>)
 8001f1e:	1e68      	subs	r0, r5, #1
 8001f20:	f003 fd06 	bl	8005930 <chThdCreateFromMemoryPool.constprop.58>
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001f24:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <dyn2_execute.lto_priv.119+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8001f26:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001f28:	1ea8      	subs	r0, r5, #2
 8001f2a:	f003 fd01 	bl	8005930 <chThdCreateFromMemoryPool.constprop.58>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8001f2e:	4926      	ldr	r1, [pc, #152]	; (8001fc8 <dyn2_execute.lto_priv.119+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8001f30:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8001f32:	1ee8      	subs	r0, r5, #3
 8001f34:	f003 fcfc 	bl	8005930 <chThdCreateFromMemoryPool.constprop.58>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8001f38:	4924      	ldr	r1, [pc, #144]	; (8001fcc <dyn2_execute.lto_priv.119+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8001f3a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8001f3c:	1f28      	subs	r0, r5, #4
 8001f3e:	f003 fcf7 	bl	8005930 <chThdCreateFromMemoryPool.constprop.58>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8001f42:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <dyn2_execute.lto_priv.119+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8001f44:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8001f46:	1f68      	subs	r0, r5, #5
 8001f48:	f003 fcf2 	bl	8005930 <chThdCreateFromMemoryPool.constprop.58>

  test_assert(1, (threads[0] != NULL) &&
 8001f4c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8001f4e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8001f50:	b141      	cbz	r1, 8001f64 <dyn2_execute.lto_priv.119+0x74>
 8001f52:	6861      	ldr	r1, [r4, #4]
 8001f54:	b131      	cbz	r1, 8001f64 <dyn2_execute.lto_priv.119+0x74>
 8001f56:	68a1      	ldr	r1, [r4, #8]
 8001f58:	b121      	cbz	r1, 8001f64 <dyn2_execute.lto_priv.119+0x74>
 8001f5a:	68e1      	ldr	r1, [r4, #12]
 8001f5c:	b111      	cbz	r1, 8001f64 <dyn2_execute.lto_priv.119+0x74>
 8001f5e:	fab0 f180 	clz	r1, r0
 8001f62:	0949      	lsrs	r1, r1, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	f001 fcf3 	bl	8003950 <_test_assert>
 8001f6a:	b100      	cbz	r0, 8001f6e <dyn2_execute.lto_priv.119+0x7e>
 8001f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8001f6e:	f001 fb67 	bl	8003640 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8001f72:	2002      	movs	r0, #2
 8001f74:	4917      	ldr	r1, [pc, #92]	; (8001fd4 <dyn2_execute.lto_priv.119+0xe4>)
 8001f76:	f001 fbb3 	bl	80036e0 <_test_assert_sequence>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d1f6      	bne.n	8001f6c <dyn2_execute.lto_priv.119+0x7c>
 8001f7e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <dyn2_execute.lto_priv.119+0xc4>)
 8001f82:	f001 fddd 	bl	8003b40 <chPoolAlloc>
 8001f86:	1c01      	adds	r1, r0, #0
 8001f88:	bf18      	it	ne
 8001f8a:	2101      	movne	r1, #1
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f001 fcdf 	bl	8003950 <_test_assert>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1ea      	bne.n	8001f6c <dyn2_execute.lto_priv.119+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8001f96:	3c01      	subs	r4, #1
 8001f98:	d1f2      	bne.n	8001f80 <dyn2_execute.lto_priv.119+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <dyn2_execute.lto_priv.119+0xc4>)
 8001f9c:	f001 fdd0 	bl	8003b40 <chPoolAlloc>
}
 8001fa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8001fa4:	fab0 f180 	clz	r1, r0
 8001fa8:	2004      	movs	r0, #4
 8001faa:	0949      	lsrs	r1, r1, #5
 8001fac:	f001 bcd0 	b.w	8003950 <_test_assert>
 8001fb0:	20000b78 	.word	0x20000b78
 8001fb4:	20000ccc 	.word	0x20000ccc
 8001fb8:	08006a20 	.word	0x08006a20
 8001fbc:	08006a70 	.word	0x08006a70
 8001fc0:	20000b08 	.word	0x20000b08
 8001fc4:	08006a80 	.word	0x08006a80
 8001fc8:	08006a84 	.word	0x08006a84
 8001fcc:	08006a88 	.word	0x08006a88
 8001fd0:	08006a94 	.word	0x08006a94
 8001fd4:	08006a68 	.word	0x08006a68
	...

08001fe0 <thread.lto_priv.64>:
 * one to fail.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8001fe0:	7800      	ldrb	r0, [r0, #0]
 8001fe2:	f001 bccd 	b.w	8003980 <test_emit_token>
 8001fe6:	bf00      	nop
	...

08001ff0 <dyn1_execute.lto_priv.117>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8001ff0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <dyn1_execute.lto_priv.117+0xb4>)
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8001ff4:	482c      	ldr	r0, [pc, #176]	; (80020a8 <dyn1_execute.lto_priv.117+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001ff6:	699b      	ldr	r3, [r3, #24]
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8001ff8:	4c2c      	ldr	r4, [pc, #176]	; (80020ac <dyn1_execute.lto_priv.117+0xbc>)
 8001ffa:	689d      	ldr	r5, [r3, #8]
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8001ffc:	b082      	sub	sp, #8
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8001ffe:	a901      	add	r1, sp, #4
 8002000:	f001 fdb6 	bl	8003b70 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8002004:	492a      	ldr	r1, [pc, #168]	; (80020b0 <dyn1_execute.lto_priv.117+0xc0>)
 8002006:	1e68      	subs	r0, r5, #1
 8002008:	f003 fc42 	bl	8005890 <chThdCreateFromHeap.constprop.59>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800200c:	4929      	ldr	r1, [pc, #164]	; (80020b4 <dyn1_execute.lto_priv.117+0xc4>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 800200e:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002010:	1ea8      	subs	r0, r5, #2
 8002012:	f003 fc3d 	bl	8005890 <chThdCreateFromHeap.constprop.59>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8002016:	4669      	mov	r1, sp
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002018:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800201a:	4823      	ldr	r0, [pc, #140]	; (80020a8 <dyn1_execute.lto_priv.117+0xb8>)
 800201c:	f001 fda8 	bl	8003b70 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8002020:	9900      	ldr	r1, [sp, #0]
 8002022:	4821      	ldr	r0, [pc, #132]	; (80020a8 <dyn1_execute.lto_priv.117+0xb8>)
 8002024:	f001 fe1c 	bl	8003c60 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <dyn1_execute.lto_priv.117+0xc8>)
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 800202a:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 800202c:	1ee8      	subs	r0, r5, #3
 800202e:	f003 fc2f 	bl	8005890 <chThdCreateFromHeap.constprop.59>
 8002032:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8002034:	4630      	mov	r0, r6
 8002036:	f001 fdc3 	bl	8003bc0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 800203a:	6821      	ldr	r1, [r4, #0]
 800203c:	b121      	cbz	r1, 8002048 <dyn1_execute.lto_priv.117+0x58>
 800203e:	6861      	ldr	r1, [r4, #4]
 8002040:	b111      	cbz	r1, 8002048 <dyn1_execute.lto_priv.117+0x58>
 8002042:	68a1      	ldr	r1, [r4, #8]
 8002044:	b331      	cbz	r1, 8002094 <dyn1_execute.lto_priv.117+0xa4>
 8002046:	2100      	movs	r1, #0
 8002048:	2001      	movs	r0, #1
 800204a:	f001 fc81 	bl	8003950 <_test_assert>
 800204e:	b108      	cbz	r0, 8002054 <dyn1_execute.lto_priv.117+0x64>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8002050:	b002      	add	sp, #8
 8002052:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8002054:	f001 faf4 	bl	8003640 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8002058:	2002      	movs	r0, #2
 800205a:	4918      	ldr	r1, [pc, #96]	; (80020bc <dyn1_execute.lto_priv.117+0xcc>)
 800205c:	f001 fb40 	bl	80036e0 <_test_assert_sequence>
 8002060:	2800      	cmp	r0, #0
 8002062:	d1f5      	bne.n	8002050 <dyn1_execute.lto_priv.117+0x60>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8002064:	4669      	mov	r1, sp
 8002066:	4810      	ldr	r0, [pc, #64]	; (80020a8 <dyn1_execute.lto_priv.117+0xb8>)
 8002068:	f001 fd82 	bl	8003b70 <chHeapStatus>
 800206c:	f1a0 0101 	sub.w	r1, r0, #1
 8002070:	2003      	movs	r0, #3
 8002072:	fab1 f181 	clz	r1, r1
 8002076:	0949      	lsrs	r1, r1, #5
 8002078:	f001 fc6a 	bl	8003950 <_test_assert>
 800207c:	2800      	cmp	r0, #0
 800207e:	d1e7      	bne.n	8002050 <dyn1_execute.lto_priv.117+0x60>
  test_assert(4, n == sz, "heap size changed");
 8002080:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8002084:	2004      	movs	r0, #4
 8002086:	1ac9      	subs	r1, r1, r3
 8002088:	fab1 f181 	clz	r1, r1
 800208c:	0949      	lsrs	r1, r1, #5
 800208e:	f001 fc5f 	bl	8003950 <_test_assert>
 8002092:	e7dd      	b.n	8002050 <dyn1_execute.lto_priv.117+0x60>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8002094:	68e3      	ldr	r3, [r4, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1d6      	bne.n	8002048 <dyn1_execute.lto_priv.117+0x58>
 800209a:	6921      	ldr	r1, [r4, #16]
 800209c:	fab1 f181 	clz	r1, r1
 80020a0:	0949      	lsrs	r1, r1, #5
 80020a2:	e7d1      	b.n	8002048 <dyn1_execute.lto_priv.117+0x58>
 80020a4:	20000b78 	.word	0x20000b78
 80020a8:	20001358 	.word	0x20001358
 80020ac:	20000b08 	.word	0x20000b08
 80020b0:	08006a70 	.word	0x08006a70
 80020b4:	08006a80 	.word	0x08006a80
 80020b8:	08006a84 	.word	0x08006a84
 80020bc:	08006a8c 	.word	0x08006a8c

080020c0 <heap1_execute.lto_priv.113>:

static void heap1_execute(void) {
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 80020c4:	a901      	add	r1, sp, #4
 80020c6:	2000      	movs	r0, #0
 80020c8:	f001 fd52 	bl	8003b70 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 80020cc:	2110      	movs	r1, #16
 80020ce:	2000      	movs	r0, #0
 80020d0:	f001 fdc6 	bl	8003c60 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 80020d4:	1c01      	adds	r1, r0, #0
 80020d6:	4605      	mov	r5, r0
 80020d8:	bf18      	it	ne
 80020da:	2101      	movne	r1, #1
 80020dc:	2001      	movs	r0, #1
 80020de:	f001 fc37 	bl	8003950 <_test_assert>
 80020e2:	4604      	mov	r4, r0
 80020e4:	b108      	cbz	r0, 80020ea <heap1_execute.lto_priv.113+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 80020e6:	b002      	add	sp, #8
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 80020ea:	4628      	mov	r0, r5
 80020ec:	f001 fd68 	bl	8003bc0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 80020f0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80020f4:	4620      	mov	r0, r4
 80020f6:	f001 fdb3 	bl	8003c60 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 80020fa:	fab0 f180 	clz	r1, r0
 80020fe:	2002      	movs	r0, #2
 8002100:	0949      	lsrs	r1, r1, #5
 8002102:	f001 fc25 	bl	8003950 <_test_assert>
 8002106:	2800      	cmp	r0, #0
 8002108:	d1ed      	bne.n	80020e6 <heap1_execute.lto_priv.113+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800210a:	a901      	add	r1, sp, #4
 800210c:	487b      	ldr	r0, [pc, #492]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800210e:	f001 fd2f 	bl	8003b70 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002112:	2110      	movs	r1, #16
 8002114:	4879      	ldr	r0, [pc, #484]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002116:	f001 fda3 	bl	8003c60 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800211a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800211c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800211e:	4877      	ldr	r0, [pc, #476]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002120:	f001 fd9e 	bl	8003c60 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002124:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002126:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002128:	4874      	ldr	r0, [pc, #464]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800212a:	f001 fd99 	bl	8003c60 <chHeapAlloc>
 800212e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8002130:	4630      	mov	r0, r6
 8002132:	f001 fd45 	bl	8003bc0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8002136:	4628      	mov	r0, r5
 8002138:	f001 fd42 	bl	8003bc0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 800213c:	4620      	mov	r0, r4
 800213e:	f001 fd3f 	bl	8003bc0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002142:	4669      	mov	r1, sp
 8002144:	486d      	ldr	r0, [pc, #436]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002146:	f001 fd13 	bl	8003b70 <chHeapStatus>
 800214a:	f1a0 0101 	sub.w	r1, r0, #1
 800214e:	2003      	movs	r0, #3
 8002150:	fab1 f181 	clz	r1, r1
 8002154:	0949      	lsrs	r1, r1, #5
 8002156:	f001 fbfb 	bl	8003950 <_test_assert>
 800215a:	2800      	cmp	r0, #0
 800215c:	d1c3      	bne.n	80020e6 <heap1_execute.lto_priv.113+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800215e:	2110      	movs	r1, #16
 8002160:	4866      	ldr	r0, [pc, #408]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002162:	f001 fd7d 	bl	8003c60 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002166:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002168:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800216a:	4864      	ldr	r0, [pc, #400]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800216c:	f001 fd78 	bl	8003c60 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002170:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002172:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002174:	4861      	ldr	r0, [pc, #388]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002176:	f001 fd73 	bl	8003c60 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 800217a:	f001 fd21 	bl	8003bc0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 800217e:	4628      	mov	r0, r5
 8002180:	f001 fd1e 	bl	8003bc0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8002184:	4620      	mov	r0, r4
 8002186:	f001 fd1b 	bl	8003bc0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800218a:	4669      	mov	r1, sp
 800218c:	485b      	ldr	r0, [pc, #364]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800218e:	f001 fcef 	bl	8003b70 <chHeapStatus>
 8002192:	f1a0 0101 	sub.w	r1, r0, #1
 8002196:	2004      	movs	r0, #4
 8002198:	fab1 f181 	clz	r1, r1
 800219c:	0949      	lsrs	r1, r1, #5
 800219e:	f001 fbd7 	bl	8003950 <_test_assert>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d19f      	bne.n	80020e6 <heap1_execute.lto_priv.113+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80021a6:	2111      	movs	r1, #17
 80021a8:	4854      	ldr	r0, [pc, #336]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021aa:	f001 fd59 	bl	8003c60 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80021ae:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80021b0:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80021b2:	4852      	ldr	r0, [pc, #328]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021b4:	f001 fd54 	bl	8003c60 <chHeapAlloc>
 80021b8:	4605      	mov	r5, r0
  chHeapFree(p1);
 80021ba:	4620      	mov	r0, r4
 80021bc:	f001 fd00 	bl	8003bc0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80021c0:	4669      	mov	r1, sp
 80021c2:	484e      	ldr	r0, [pc, #312]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021c4:	f001 fcd4 	bl	8003b70 <chHeapStatus>
 80021c8:	f1a0 0102 	sub.w	r1, r0, #2
 80021cc:	2005      	movs	r0, #5
 80021ce:	fab1 f181 	clz	r1, r1
 80021d2:	0949      	lsrs	r1, r1, #5
 80021d4:	f001 fbbc 	bl	8003950 <_test_assert>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d184      	bne.n	80020e6 <heap1_execute.lto_priv.113+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 80021dc:	2110      	movs	r1, #16
 80021de:	4847      	ldr	r0, [pc, #284]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021e0:	f001 fd3e 	bl	8003c60 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80021e4:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 80021e6:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80021e8:	4844      	ldr	r0, [pc, #272]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021ea:	f001 fcc1 	bl	8003b70 <chHeapStatus>
 80021ee:	2801      	cmp	r0, #1
 80021f0:	f000 8081 	beq.w	80022f6 <heap1_execute.lto_priv.113+0x236>
 80021f4:	4669      	mov	r1, sp
 80021f6:	4841      	ldr	r0, [pc, #260]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80021f8:	f001 fcba 	bl	8003b70 <chHeapStatus>
 80021fc:	f1a0 0102 	sub.w	r1, r0, #2
 8002200:	fab1 f181 	clz	r1, r1
 8002204:	0949      	lsrs	r1, r1, #5
 8002206:	2006      	movs	r0, #6
 8002208:	f001 fba2 	bl	8003950 <_test_assert>
 800220c:	2800      	cmp	r0, #0
 800220e:	f47f af6a 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8002212:	4628      	mov	r0, r5
 8002214:	f001 fcd4 	bl	8003bc0 <chHeapFree>
  chHeapFree(p1);
 8002218:	4620      	mov	r0, r4
 800221a:	f001 fcd1 	bl	8003bc0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800221e:	4669      	mov	r1, sp
 8002220:	4836      	ldr	r0, [pc, #216]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002222:	f001 fca5 	bl	8003b70 <chHeapStatus>
 8002226:	1e46      	subs	r6, r0, #1
 8002228:	4271      	negs	r1, r6
 800222a:	4171      	adcs	r1, r6
 800222c:	2007      	movs	r0, #7
 800222e:	f001 fb8f 	bl	8003950 <_test_assert>
 8002232:	2800      	cmp	r0, #0
 8002234:	f47f af57 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002238:	2110      	movs	r1, #16
 800223a:	4830      	ldr	r0, [pc, #192]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800223c:	f001 fd10 	bl	8003c60 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002240:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002242:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002244:	482d      	ldr	r0, [pc, #180]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002246:	f001 fd0b 	bl	8003c60 <chHeapAlloc>
 800224a:	4604      	mov	r4, r0
  chHeapFree(p1);
 800224c:	4628      	mov	r0, r5
 800224e:	f001 fcb7 	bl	8003bc0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002252:	4669      	mov	r1, sp
 8002254:	4829      	ldr	r0, [pc, #164]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002256:	f001 fc8b 	bl	8003b70 <chHeapStatus>
 800225a:	1e85      	subs	r5, r0, #2
 800225c:	4269      	negs	r1, r5
 800225e:	4169      	adcs	r1, r5
 8002260:	2008      	movs	r0, #8
 8002262:	f001 fb75 	bl	8003950 <_test_assert>
 8002266:	2800      	cmp	r0, #0
 8002268:	f47f af3d 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 800226c:	2120      	movs	r1, #32
 800226e:	4823      	ldr	r0, [pc, #140]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002270:	f001 fcf6 	bl	8003c60 <chHeapAlloc>
  chHeapFree(p1);
 8002274:	f001 fca4 	bl	8003bc0 <chHeapFree>
  chHeapFree(p2);
 8002278:	4620      	mov	r0, r4
 800227a:	f001 fca1 	bl	8003bc0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800227e:	4669      	mov	r1, sp
 8002280:	481e      	ldr	r0, [pc, #120]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 8002282:	f001 fc75 	bl	8003b70 <chHeapStatus>
 8002286:	3801      	subs	r0, #1
 8002288:	4241      	negs	r1, r0
 800228a:	4141      	adcs	r1, r0
 800228c:	2009      	movs	r0, #9
 800228e:	f001 fb5f 	bl	8003950 <_test_assert>
 8002292:	2800      	cmp	r0, #0
 8002294:	f47f af27 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8002298:	4669      	mov	r1, sp
 800229a:	4818      	ldr	r0, [pc, #96]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 800229c:	f001 fc68 	bl	8003b70 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	4816      	ldr	r0, [pc, #88]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80022a4:	f001 fcdc 	bl	8003c60 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80022a8:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 80022aa:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80022ae:	f001 fc5f 	bl	8003b70 <chHeapStatus>
 80022b2:	fab0 f180 	clz	r1, r0
 80022b6:	200a      	movs	r0, #10
 80022b8:	0949      	lsrs	r1, r1, #5
 80022ba:	f001 fb49 	bl	8003950 <_test_assert>
 80022be:	2800      	cmp	r0, #0
 80022c0:	f47f af11 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>
  chHeapFree(p1);
 80022c4:	4620      	mov	r0, r4
 80022c6:	f001 fc7b 	bl	8003bc0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80022ca:	4669      	mov	r1, sp
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <heap1_execute.lto_priv.113+0x23c>)
 80022ce:	f001 fc4f 	bl	8003b70 <chHeapStatus>
 80022d2:	1e42      	subs	r2, r0, #1
 80022d4:	4251      	negs	r1, r2
 80022d6:	4151      	adcs	r1, r2
 80022d8:	200b      	movs	r0, #11
 80022da:	f001 fb39 	bl	8003950 <_test_assert>
 80022de:	2800      	cmp	r0, #0
 80022e0:	f47f af01 	bne.w	80020e6 <heap1_execute.lto_priv.113+0x26>
  test_assert(12, n == sz, "size changed");
 80022e4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80022e8:	1acb      	subs	r3, r1, r3
 80022ea:	4259      	negs	r1, r3
 80022ec:	4159      	adcs	r1, r3
 80022ee:	200c      	movs	r0, #12
 80022f0:	f001 fb2e 	bl	8003950 <_test_assert>
 80022f4:	e6f7      	b.n	80020e6 <heap1_execute.lto_priv.113+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 80022f6:	4601      	mov	r1, r0
 80022f8:	e785      	b.n	8002206 <heap1_execute.lto_priv.113+0x146>
 80022fa:	bf00      	nop
 80022fc:	20000b58 	.word	0x20000b58

08002300 <evt3_execute.lto_priv.111>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8002300:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002302:	4c55      	ldr	r4, [pc, #340]	; (8002458 <evt3_execute.lto_priv.111+0x158>)
 8002304:	2320      	movs	r3, #32
 8002306:	69a2      	ldr	r2, [r4, #24]
 8002308:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800230c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800230e:	b93b      	cbnz	r3, 8002320 <evt3_execute.lto_priv.111+0x20>
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8002316:	2001      	movs	r0, #1
 8002318:	f001 fb1a 	bl	8003950 <_test_assert>
 800231c:	b180      	cbz	r0, 8002340 <evt3_execute.lto_priv.111+0x40>
 800231e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8002320:	4259      	negs	r1, r3
 8002322:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8002324:	ea23 0301 	bic.w	r3, r3, r1
 8002328:	6353      	str	r3, [r2, #52]	; 0x34
 800232a:	2300      	movs	r3, #0
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	2001      	movs	r0, #1
 8002332:	fab1 f181 	clz	r1, r1
 8002336:	0949      	lsrs	r1, r1, #5
 8002338:	f001 fb0a 	bl	8003950 <_test_assert>
 800233c:	2800      	cmp	r0, #0
 800233e:	d1ee      	bne.n	800231e <evt3_execute.lto_priv.111+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002340:	69a3      	ldr	r3, [r4, #24]
 8002342:	2220      	movs	r2, #32
 8002344:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
 8002348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234a:	2a00      	cmp	r2, #0
 800234c:	d06f      	beq.n	800242e <evt3_execute.lto_priv.111+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 800234e:	6358      	str	r0, [r3, #52]	; 0x34
 8002350:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8002354:	4601      	mov	r1, r0
 8002356:	2002      	movs	r0, #2
 8002358:	f001 fafa 	bl	8003950 <_test_assert>
 800235c:	2800      	cmp	r0, #0
 800235e:	d1de      	bne.n	800231e <evt3_execute.lto_priv.111+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002360:	69a3      	ldr	r3, [r4, #24]
 8002362:	2220      	movs	r2, #32
 8002364:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	3201      	adds	r2, #1
 800236c:	d063      	beq.n	8002436 <evt3_execute.lto_priv.111+0x136>
 800236e:	f380 8811 	msr	BASEPRI, r0
 8002372:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8002374:	4601      	mov	r1, r0
 8002376:	2003      	movs	r0, #3
 8002378:	f001 faea 	bl	8003950 <_test_assert>
 800237c:	2800      	cmp	r0, #0
 800237e:	d1ce      	bne.n	800231e <evt3_execute.lto_priv.111+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002380:	69a6      	ldr	r6, [r4, #24]
 8002382:	2320      	movs	r3, #32
 8002384:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8002388:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800238a:	b94d      	cbnz	r5, 80023a0 <evt3_execute.lto_priv.111+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002390:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002392:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002394:	4601      	mov	r1, r0
 8002396:	f003 f93b 	bl	8005610 <chSchGoSleepTimeoutS>
 800239a:	2800      	cmp	r0, #0
 800239c:	db4f      	blt.n	800243e <evt3_execute.lto_priv.111+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800239e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 80023a0:	4269      	negs	r1, r5
 80023a2:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 80023a4:	ea25 0501 	bic.w	r5, r5, r1
 80023a8:	6375      	str	r5, [r6, #52]	; 0x34
 80023aa:	2300      	movs	r3, #0
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	fab1 f181 	clz	r1, r1
 80023b4:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 80023b6:	2004      	movs	r0, #4
 80023b8:	f001 faca 	bl	8003950 <_test_assert>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d1ae      	bne.n	800231e <evt3_execute.lto_priv.111+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80023c0:	69a6      	ldr	r6, [r4, #24]
 80023c2:	2320      	movs	r3, #32
 80023c4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80023c8:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80023ca:	b94d      	cbnz	r5, 80023e0 <evt3_execute.lto_priv.111+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80023d0:	200a      	movs	r0, #10
  if (m == (eventmask_t)0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80023d2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80023d4:	4601      	mov	r1, r0
 80023d6:	f003 f91b 	bl	8005610 <chSchGoSleepTimeoutS>
 80023da:	2800      	cmp	r0, #0
 80023dc:	db33      	blt.n	8002446 <evt3_execute.lto_priv.111+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80023de:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 80023e0:	2300      	movs	r3, #0
 80023e2:	6373      	str	r3, [r6, #52]	; 0x34
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	fab5 f185 	clz	r1, r5
 80023ec:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 80023ee:	2005      	movs	r0, #5
 80023f0:	f001 faae 	bl	8003950 <_test_assert>
 80023f4:	4605      	mov	r5, r0
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d191      	bne.n	800231e <evt3_execute.lto_priv.111+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80023fa:	69a4      	ldr	r4, [r4, #24]
 80023fc:	2320      	movs	r3, #32
 80023fe:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 8002402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002404:	3301      	adds	r3, #1
 8002406:	d008      	beq.n	800241a <evt3_execute.lto_priv.111+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800240e:	200b      	movs	r0, #11
 8002410:	210a      	movs	r1, #10
 8002412:	f003 f8fd 	bl	8005610 <chSchGoSleepTimeoutS>
 8002416:	2800      	cmp	r0, #0
 8002418:	db19      	blt.n	800244e <evt3_execute.lto_priv.111+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800241a:	2300      	movs	r3, #0
 800241c:	6363      	str	r3, [r4, #52]	; 0x34
 800241e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8002422:	4629      	mov	r1, r5
 8002424:	2006      	movs	r0, #6
}
 8002426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 800242a:	f001 ba91 	b.w	8003950 <_test_assert>
 800242e:	f380 8811 	msr	BASEPRI, r0
 8002432:	2001      	movs	r0, #1
 8002434:	e78e      	b.n	8002354 <evt3_execute.lto_priv.111+0x54>
 8002436:	6358      	str	r0, [r3, #52]	; 0x34
 8002438:	f380 8811 	msr	BASEPRI, r0
 800243c:	e79a      	b.n	8002374 <evt3_execute.lto_priv.111+0x74>
 800243e:	f385 8811 	msr	BASEPRI, r5
 8002442:	2101      	movs	r1, #1
 8002444:	e7b7      	b.n	80023b6 <evt3_execute.lto_priv.111+0xb6>
 8002446:	f385 8811 	msr	BASEPRI, r5
 800244a:	2101      	movs	r1, #1
 800244c:	e7cf      	b.n	80023ee <evt3_execute.lto_priv.111+0xee>
 800244e:	f385 8811 	msr	BASEPRI, r5
 8002452:	2501      	movs	r5, #1
 8002454:	e7e5      	b.n	8002422 <evt3_execute.lto_priv.111+0x122>
 8002456:	bf00      	nop
 8002458:	20000b78 	.word	0x20000b78
 800245c:	00000000 	.word	0x00000000

08002460 <evt3_setup.lto_priv.110>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8002460:	f003 bb1e 	b.w	8005aa0 <chEvtGetAndClearEvents.constprop.41>
	...

08002470 <evt2_setup.lto_priv.108>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8002470:	f003 bb16 	b.w	8005aa0 <chEvtGetAndClearEvents.constprop.41>
	...

08002480 <evt2_execute.lto_priv.109>:
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
}

static void evt2_execute(void) {
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	2520      	movs	r5, #32
 8002486:	b08d      	sub	sp, #52	; 0x34
 8002488:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->p_epending |= events;
 800248c:	4ca7      	ldr	r4, [pc, #668]	; (800272c <evt2_execute.lto_priv.109+0x2ac>)
 800248e:	69a2      	ldr	r2, [r4, #24]
 8002490:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002492:	f043 0307 	orr.w	r3, r3, #7
 8002496:	6353      	str	r3, [r2, #52]	; 0x34
 8002498:	2300      	movs	r3, #0
 800249a:	f383 8811 	msr	BASEPRI, r3

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 800249e:	f003 fb0f 	bl	8005ac0 <chEvtWaitOne.constprop.37>
  test_assert(1, m == 1, "single event error");
 80024a2:	f1a0 0101 	sub.w	r1, r0, #1
 80024a6:	2001      	movs	r0, #1
 80024a8:	fab1 f181 	clz	r1, r1
 80024ac:	0949      	lsrs	r1, r1, #5
 80024ae:	f001 fa4f 	bl	8003950 <_test_assert>
 80024b2:	b110      	cbz	r0, 80024ba <evt2_execute.lto_priv.109+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80024b4:	b00d      	add	sp, #52	; 0x34
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80024ba:	f003 fb01 	bl	8005ac0 <chEvtWaitOne.constprop.37>
  test_assert(2, m == 2, "single event error");
 80024be:	f1a0 0102 	sub.w	r1, r0, #2
 80024c2:	2002      	movs	r0, #2
 80024c4:	fab1 f181 	clz	r1, r1
 80024c8:	0949      	lsrs	r1, r1, #5
 80024ca:	f001 fa41 	bl	8003950 <_test_assert>
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d1f0      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 80024d2:	f003 faf5 	bl	8005ac0 <chEvtWaitOne.constprop.37>
  test_assert(3, m == 4, "single event error");
 80024d6:	f1a0 0104 	sub.w	r1, r0, #4
 80024da:	2003      	movs	r0, #3
 80024dc:	fab1 f181 	clz	r1, r1
 80024e0:	0949      	lsrs	r1, r1, #5
 80024e2:	f001 fa35 	bl	8003950 <_test_assert>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d1e4      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80024ea:	f003 fad9 	bl	8005aa0 <chEvtGetAndClearEvents.constprop.41>
  test_assert(4, m == 0, "stuck event");
 80024ee:	fab0 f180 	clz	r1, r0
 80024f2:	2004      	movs	r0, #4
 80024f4:	0949      	lsrs	r1, r1, #5
 80024f6:	f001 fa2b 	bl	8003950 <_test_assert>
 80024fa:	4606      	mov	r6, r0
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d1d9      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8002500:	f001 f88e 	bl	8003620 <test_wait_tick>
 8002504:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002508:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800250c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8002510:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002514:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002516:	4b86      	ldr	r3, [pc, #536]	; (8002730 <evt2_execute.lto_priv.109+0x2b0>)
 8002518:	688a      	ldr	r2, [r1, #8]
 800251a:	4886      	ldr	r0, [pc, #536]	; (8002734 <evt2_execute.lto_priv.109+0x2b4>)
 800251c:	9100      	str	r1, [sp, #0]
 800251e:	3a01      	subs	r2, #1
 8002520:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002524:	f002 fdec 	bl	8005100 <chThdCreateStatic>
 8002528:	4e83      	ldr	r6, [pc, #524]	; (8002738 <evt2_execute.lto_priv.109+0x2b8>)
 800252a:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800252c:	f003 fac8 	bl	8005ac0 <chEvtWaitOne.constprop.37>
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8002530:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8002534:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8002536:	f207 2226 	addw	r2, r7, #550	; 0x226
 800253a:	2005      	movs	r0, #5
 800253c:	f001 f8b0 	bl	80036a0 <_test_assert_time_window>
 8002540:	2800      	cmp	r0, #0
 8002542:	d1b7      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_assert(6, m == 1, "single event error");
 8002544:	f1a9 0101 	sub.w	r1, r9, #1
 8002548:	2006      	movs	r0, #6
 800254a:	fab1 f181 	clz	r1, r1
 800254e:	0949      	lsrs	r1, r1, #5
 8002550:	f001 f9fe 	bl	8003950 <_test_assert>
 8002554:	2800      	cmp	r0, #0
 8002556:	d1ad      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002558:	f003 faa2 	bl	8005aa0 <chEvtGetAndClearEvents.constprop.41>
  test_assert(7, m == 0, "stuck event");
 800255c:	fab0 f180 	clz	r1, r0
 8002560:	2007      	movs	r0, #7
 8002562:	0949      	lsrs	r1, r1, #5
 8002564:	f001 f9f4 	bl	8003950 <_test_assert>
 8002568:	4607      	mov	r7, r0
 800256a:	2800      	cmp	r0, #0
 800256c:	d1a2      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_wait_threads();
 800256e:	f001 f867 	bl	8003640 <test_wait_threads>
 8002572:	f385 8811 	msr	BASEPRI, r5
 8002576:	69a2      	ldr	r2, [r4, #24]
 8002578:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800257a:	f043 0305 	orr.w	r3, r3, #5
 800257e:	6353      	str	r3, [r2, #52]	; 0x34
 8002580:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8002584:	f003 fabc 	bl	8005b00 <chEvtWaitAny.constprop.36>
  test_assert(8, m == 5, "unexpected pending bit");
 8002588:	1f47      	subs	r7, r0, #5
 800258a:	4279      	negs	r1, r7
 800258c:	4179      	adcs	r1, r7
 800258e:	2008      	movs	r0, #8
 8002590:	f001 f9de 	bl	8003950 <_test_assert>
 8002594:	2800      	cmp	r0, #0
 8002596:	d18d      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002598:	f003 fa82 	bl	8005aa0 <chEvtGetAndClearEvents.constprop.41>
  test_assert(9, m == 0, "stuck event");
 800259c:	fab0 f180 	clz	r1, r0
 80025a0:	2009      	movs	r0, #9
 80025a2:	0949      	lsrs	r1, r1, #5
 80025a4:	f001 f9d4 	bl	8003950 <_test_assert>
 80025a8:	4607      	mov	r7, r0
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d182      	bne.n	80024b4 <evt2_execute.lto_priv.109+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80025ae:	f001 f837 	bl	8003620 <test_wait_tick>
 80025b2:	f385 8811 	msr	BASEPRI, r5
 80025b6:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 80025ba:	f387 8811 	msr	BASEPRI, r7
 80025be:	69a1      	ldr	r1, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80025c0:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <evt2_execute.lto_priv.109+0x2b0>)
 80025c2:	688a      	ldr	r2, [r1, #8]
 80025c4:	485b      	ldr	r0, [pc, #364]	; (8002734 <evt2_execute.lto_priv.109+0x2b4>)
 80025c6:	9100      	str	r1, [sp, #0]
 80025c8:	3a01      	subs	r2, #1
 80025ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025ce:	f002 fd97 	bl	8005100 <chThdCreateStatic>
 80025d2:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80025d4:	f003 fa94 	bl	8005b00 <chEvtWaitAny.constprop.36>
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80025d8:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80025dc:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80025de:	f205 2226 	addw	r2, r5, #550	; 0x226
 80025e2:	200a      	movs	r0, #10
 80025e4:	f001 f85c 	bl	80036a0 <_test_assert_time_window>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f47f af63 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_assert(11, m == 1, "single event error");
 80025ee:	1e78      	subs	r0, r7, #1
 80025f0:	4241      	negs	r1, r0
 80025f2:	4141      	adcs	r1, r0
 80025f4:	200b      	movs	r0, #11
 80025f6:	f001 f9ab 	bl	8003950 <_test_assert>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	f47f af5a 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002600:	f003 fa4e 	bl	8005aa0 <chEvtGetAndClearEvents.constprop.41>
  test_assert(12, m == 0, "stuck event");
 8002604:	fab0 f180 	clz	r1, r0
 8002608:	200c      	movs	r0, #12
 800260a:	0949      	lsrs	r1, r1, #5
 800260c:	f001 f9a0 	bl	8003950 <_test_assert>
 8002610:	4607      	mov	r7, r0
 8002612:	2800      	cmp	r0, #0
 8002614:	f47f af4e 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_wait_threads();
 8002618:	f001 f812 	bl	8003640 <test_wait_threads>
 800261c:	4d47      	ldr	r5, [pc, #284]	; (800273c <evt2_execute.lto_priv.109+0x2bc>)
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <evt2_execute.lto_priv.109+0x2c0>)
 8002620:	602d      	str	r5, [r5, #0]
 8002622:	601b      	str	r3, [r3, #0]
 8002624:	f04f 0b20 	mov.w	fp, #32
 8002628:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800262c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002630:	682a      	ldr	r2, [r5, #0]
 8002632:	f849 2d28 	str.w	r2, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002636:	69a1      	ldr	r1, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8002638:	9705      	str	r7, [sp, #20]

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800263a:	2001      	movs	r0, #1
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002640:	9103      	str	r1, [sp, #12]
  elp->el_events   = events;
 8002642:	9004      	str	r0, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8002644:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8002648:	9206      	str	r2, [sp, #24]
 800264a:	f387 8811 	msr	BASEPRI, r7
 800264e:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002652:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800265c:	2004      	movs	r0, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800265e:	69a1      	ldr	r1, [r4, #24]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8002660:	970a      	str	r7, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8002662:	920b      	str	r2, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002664:	9108      	str	r1, [sp, #32]
  elp->el_events   = events;
 8002666:	9009      	str	r0, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8002668:	f8c3 8000 	str.w	r8, [r3]
 800266c:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8002670:	f000 ffd6 	bl	8003620 <test_wait_tick>
 8002674:	f38b 8811 	msr	BASEPRI, fp
 8002678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800267c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 8002680:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002684:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <evt2_execute.lto_priv.109+0x2c4>)
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	482a      	ldr	r0, [pc, #168]	; (8002734 <evt2_execute.lto_priv.109+0x2b4>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	3a01      	subs	r2, #1
 8002690:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <evt2_execute.lto_priv.109+0x2c8>)
 8002696:	f002 fd33 	bl	8005100 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 800269a:	f50a 77fa 	add.w	r7, sl, #500	; 0x1f4
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800269e:	6030      	str	r0, [r6, #0]
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 80026a0:	69a4      	ldr	r4, [r4, #24]
 80026a2:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();
  if ((ctp->p_epending & events) != events) {
 80026a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026a8:	f003 0205 	and.w	r2, r3, #5
 80026ac:	2a05      	cmp	r2, #5
 80026ae:	d005      	beq.n	80026bc <evt2_execute.lto_priv.109+0x23c>
    ctp->p_u.ewmask = events;
 80026b0:	2305      	movs	r3, #5
 80026b2:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80026b4:	200b      	movs	r0, #11
 80026b6:	f002 fd63 	bl	8005180 <chSchGoSleepS>
 80026ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 80026bc:	f023 0305 	bic.w	r3, r3, #5
 80026c0:	6363      	str	r3, [r4, #52]	; 0x34
 80026c2:	2300      	movs	r3, #0
 80026c4:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80026c8:	200d      	movs	r0, #13
 80026ca:	4639      	mov	r1, r7
 80026cc:	f20a 2226 	addw	r2, sl, #550	; 0x226
 80026d0:	f000 ffe6 	bl	80036a0 <_test_assert_time_window>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	f47f aeed 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80026da:	f003 f9e1 	bl	8005aa0 <chEvtGetAndClearEvents.constprop.41>
  test_assert(14, m == 0, "stuck event");
 80026de:	fab0 f180 	clz	r1, r0
 80026e2:	200e      	movs	r0, #14
 80026e4:	0949      	lsrs	r1, r1, #5
 80026e6:	f001 f933 	bl	8003950 <_test_assert>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	f47f aee2 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 80026f0:	4c13      	ldr	r4, [pc, #76]	; (8002740 <evt2_execute.lto_priv.109+0x2c0>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 80026f2:	f000 ffa5 	bl	8003640 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80026f6:	4649      	mov	r1, r9
 80026f8:	4810      	ldr	r0, [pc, #64]	; (800273c <evt2_execute.lto_priv.109+0x2bc>)
 80026fa:	f002 fbd1 	bl	8004ea0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 80026fe:	4641      	mov	r1, r8
 8002700:	4620      	mov	r0, r4
 8002702:	f002 fbcd 	bl	8004ea0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8002706:	6829      	ldr	r1, [r5, #0]
 8002708:	1b4a      	subs	r2, r1, r5
 800270a:	4251      	negs	r1, r2
 800270c:	4151      	adcs	r1, r2
 800270e:	200f      	movs	r0, #15
 8002710:	f001 f91e 	bl	8003950 <_test_assert>
 8002714:	2800      	cmp	r0, #0
 8002716:	f47f aecd 	bne.w	80024b4 <evt2_execute.lto_priv.109+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 800271a:	6821      	ldr	r1, [r4, #0]
 800271c:	1b0b      	subs	r3, r1, r4
 800271e:	4259      	negs	r1, r3
 8002720:	4159      	adcs	r1, r3
 8002722:	2010      	movs	r0, #16
 8002724:	f001 f914 	bl	8003950 <_test_assert>
 8002728:	e6c4      	b.n	80024b4 <evt2_execute.lto_priv.109+0x34>
 800272a:	bf00      	nop
 800272c:	20000b78 	.word	0x20000b78
 8002730:	08002791 	.word	0x08002791
 8002734:	20000cf0 	.word	0x20000cf0
 8002738:	20000b08 	.word	0x20000b08
 800273c:	20000848 	.word	0x20000848
 8002740:	2000084c 	.word	0x2000084c
 8002744:	08006a70 	.word	0x08006a70
 8002748:	08002751 	.word	0x08002751
 800274c:	00000000 	.word	0x00000000

08002750 <thread2>:

  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
}

static THD_FUNCTION(thread2, p) {
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	2520      	movs	r5, #32
 8002754:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8002758:	480b      	ldr	r0, [pc, #44]	; (8002788 <thread2+0x38>)
 800275a:	2100      	movs	r1, #0
 800275c:	f002 fb88 	bl	8004e70 <chEvtBroadcastFlagsI>
 8002760:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002762:	f002 fc55 	bl	8005010 <chSchRescheduleS>
 8002766:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 800276a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800276e:	f002 ffaf 	bl	80056d0 <chThdSleep>
 8002772:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <thread2+0x3c>)
 8002778:	4621      	mov	r1, r4
 800277a:	f002 fb79 	bl	8004e70 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800277e:	f002 fc47 	bl	8005010 <chSchRescheduleS>
 8002782:	f384 8811 	msr	BASEPRI, r4
 8002786:	bd38      	pop	{r3, r4, r5, pc}
 8002788:	20000848 	.word	0x20000848
 800278c:	2000084c 	.word	0x2000084c

08002790 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static THD_FUNCTION(thread1, p) {
 8002790:	b510      	push	{r4, lr}
 8002792:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8002794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002798:	f002 ff9a 	bl	80056d0 <chThdSleep>
 800279c:	2320      	movs	r3, #32
 800279e:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 80027a2:	2101      	movs	r1, #1
 80027a4:	4620      	mov	r0, r4
 80027a6:	f001 fd03 	bl	80041b0 <chEvtSignalI>
  chSchRescheduleS();
 80027aa:	f002 fc31 	bl	8005010 <chSchRescheduleS>
 80027ae:	2300      	movs	r3, #0
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	bf00      	nop
	...

080027c0 <mtx6_setup.lto_priv.97>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <mtx6_setup.lto_priv.97+0x14>)
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <mtx6_setup.lto_priv.97+0x18>)
 80027c4:	601b      	str	r3, [r3, #0]
 80027c6:	2100      	movs	r1, #0
 80027c8:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 80027ca:	6052      	str	r2, [r2, #4]
 80027cc:	605b      	str	r3, [r3, #4]
 80027ce:	6099      	str	r1, [r3, #8]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000085c 	.word	0x2000085c
 80027d8:	2000087c 	.word	0x2000087c
 80027dc:	00000000 	.word	0x00000000

080027e0 <mtx5_setup.lto_priv.95>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <mtx5_setup.lto_priv.95+0xc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80027e6:	605b      	str	r3, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	4770      	bx	lr
 80027ec:	2000085c 	.word	0x2000085c

080027f0 <mtx4_setup.lto_priv.93>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <mtx4_setup.lto_priv.93+0x14>)
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <mtx4_setup.lto_priv.93+0x18>)
 80027f4:	6012      	str	r2, [r2, #0]
 80027f6:	2100      	movs	r1, #0
  tqp->p_prev = (thread_t *)tqp;
 80027f8:	6052      	str	r2, [r2, #4]
 80027fa:	6091      	str	r1, [r2, #8]
 80027fc:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027fe:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002800:	605b      	str	r3, [r3, #4]
 8002802:	4770      	bx	lr
 8002804:	2000085c 	.word	0x2000085c
 8002808:	2000086c 	.word	0x2000086c
 800280c:	00000000 	.word	0x00000000

08002810 <mtx1_setup.lto_priv.91>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002810:	4b02      	ldr	r3, [pc, #8]	; (800281c <mtx1_setup.lto_priv.91+0xc>)
 8002812:	2200      	movs	r2, #0
 8002814:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002816:	605b      	str	r3, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	4770      	bx	lr
 800281c:	2000085c 	.word	0x2000085c

08002820 <sem3_setup.lto_priv.88>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002820:	4b02      	ldr	r3, [pc, #8]	; (800282c <sem3_setup.lto_priv.88+0xc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002826:	605b      	str	r3, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	4770      	bx	lr
 800282c:	200008ac 	.word	0x200008ac

08002830 <sem2_setup.lto_priv.86>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002830:	4b02      	ldr	r3, [pc, #8]	; (800283c <sem2_setup.lto_priv.86+0xc>)
 8002832:	2200      	movs	r2, #0
 8002834:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002836:	605b      	str	r3, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	4770      	bx	lr
 800283c:	200008ac 	.word	0x200008ac

08002840 <sem1_setup.lto_priv.84>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <sem1_setup.lto_priv.84+0xc>)
 8002842:	2200      	movs	r2, #0
 8002844:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002846:	605b      	str	r3, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	4770      	bx	lr
 800284c:	200008ac 	.word	0x200008ac

08002850 <mtx5_execute.lto_priv.96>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8002850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002854:	4d3b      	ldr	r5, [pc, #236]	; (8002944 <mtx5_execute.lto_priv.96+0xf4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002856:	69aa      	ldr	r2, [r5, #24]
 8002858:	2320      	movs	r3, #32
 800285a:	6896      	ldr	r6, [r2, #8]
 800285c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8002860:	4c39      	ldr	r4, [pc, #228]	; (8002948 <mtx5_execute.lto_priv.96+0xf8>)
 8002862:	68a3      	ldr	r3, [r4, #8]
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8002864:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8002866:	2b00      	cmp	r3, #0
 8002868:	d05e      	beq.n	8002928 <mtx5_execute.lto_priv.96+0xd8>
 800286a:	2300      	movs	r3, #0
 800286c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8002870:	2001      	movs	r0, #1
 8002872:	f001 f86d 	bl	8003950 <_test_assert>
 8002876:	4601      	mov	r1, r0
 8002878:	b108      	cbz	r0, 800287e <mtx5_execute.lto_priv.96+0x2e>
 800287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800287e:	2320      	movs	r3, #32
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	68a3      	ldr	r3, [r4, #8]
 8002886:	4a30      	ldr	r2, [pc, #192]	; (8002948 <mtx5_execute.lto_priv.96+0xf8>)
 8002888:	2b00      	cmp	r3, #0
 800288a:	d054      	beq.n	8002936 <mtx5_execute.lto_priv.96+0xe6>
 800288c:	2101      	movs	r1, #1
 800288e:	2300      	movs	r3, #0
 8002890:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8002894:	2002      	movs	r0, #2
 8002896:	f001 f85b 	bl	8003950 <_test_assert>
 800289a:	4607      	mov	r7, r0
 800289c:	2800      	cmp	r0, #0
 800289e:	d1ec      	bne.n	800287a <mtx5_execute.lto_priv.96+0x2a>
 80028a0:	2320      	movs	r3, #32
 80028a2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 80028a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002948 <mtx5_execute.lto_priv.96+0xf8>
 80028aa:	4640      	mov	r0, r8
 80028ac:	f002 fd10 	bl	80052d0 <chMtxUnlockS>
 80028b0:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 80028b4:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 80028b6:	2003      	movs	r0, #3
 80028b8:	1b09      	subs	r1, r1, r4
 80028ba:	fab1 f181 	clz	r1, r1
 80028be:	0949      	lsrs	r1, r1, #5
 80028c0:	f001 f846 	bl	8003950 <_test_assert>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d1d8      	bne.n	800287a <mtx5_execute.lto_priv.96+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 80028c8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80028cc:	fab1 f181 	clz	r1, r1
 80028d0:	2004      	movs	r0, #4
 80028d2:	0949      	lsrs	r1, r1, #5
 80028d4:	f001 f83c 	bl	8003950 <_test_assert>
 80028d8:	2800      	cmp	r0, #0
 80028da:	d1ce      	bne.n	800287a <mtx5_execute.lto_priv.96+0x2a>
 80028dc:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	2005      	movs	r0, #5
 80028e2:	1a71      	subs	r1, r6, r1
 80028e4:	fab1 f181 	clz	r1, r1
 80028e8:	0949      	lsrs	r1, r1, #5
 80028ea:	f001 f831 	bl	8003950 <_test_assert>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1c3      	bne.n	800287a <mtx5_execute.lto_priv.96+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 80028f2:	4640      	mov	r0, r8
 80028f4:	f002 fdb4 	bl	8005460 <chMtxLock>
  chMtxUnlockAll();
 80028f8:	f002 fcba 	bl	8005270 <chMtxUnlockAll>
 80028fc:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8002900:	2006      	movs	r0, #6
 8002902:	ebc8 0101 	rsb	r1, r8, r1
 8002906:	fab1 f181 	clz	r1, r1
 800290a:	0949      	lsrs	r1, r1, #5
 800290c:	f001 f820 	bl	8003950 <_test_assert>
 8002910:	2800      	cmp	r0, #0
 8002912:	d1b2      	bne.n	800287a <mtx5_execute.lto_priv.96+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8002914:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002918:	fab1 f181 	clz	r1, r1
 800291c:	2007      	movs	r0, #7
 800291e:	0949      	lsrs	r1, r1, #5
}
 8002920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8002924:	f001 b814 	b.w	8003950 <_test_assert>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002928:	69ab      	ldr	r3, [r5, #24]
 800292a:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 800292c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292e:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8002930:	639c      	str	r4, [r3, #56]	; 0x38
 8002932:	2101      	movs	r1, #1
 8002934:	e799      	b.n	800286a <mtx5_execute.lto_priv.96+0x1a>

  chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002936:	69ab      	ldr	r3, [r5, #24]
 8002938:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 800293a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800293c:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
 8002940:	e7a5      	b.n	800288e <mtx5_execute.lto_priv.96+0x3e>
 8002942:	bf00      	nop
 8002944:	20000b78 	.word	0x20000b78
 8002948:	2000085c 	.word	0x2000085c
 800294c:	00000000 	.word	0x00000000

08002950 <mtx4_execute.lto_priv.94>:
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8002950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002954:	4d88      	ldr	r5, [pc, #544]	; (8002b78 <mtx4_execute.lto_priv.94+0x228>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002956:	4a89      	ldr	r2, [pc, #548]	; (8002b7c <mtx4_execute.lto_priv.94+0x22c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002958:	69ab      	ldr	r3, [r5, #24]
 800295a:	4889      	ldr	r0, [pc, #548]	; (8002b80 <mtx4_execute.lto_priv.94+0x230>)
 800295c:	689c      	ldr	r4, [r3, #8]
 800295e:	4b89      	ldr	r3, [pc, #548]	; (8002b84 <mtx4_execute.lto_priv.94+0x234>)
 8002960:	4e89      	ldr	r6, [pc, #548]	; (8002b88 <mtx4_execute.lto_priv.94+0x238>)
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
}

static void mtx4_execute(void) {
 8002962:	b082      	sub	sp, #8
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8002964:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002966:	9200      	str	r2, [sp, #0]
 8002968:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800296c:	463a      	mov	r2, r7
 800296e:	f002 fbc7 	bl	8005100 <chThdCreateStatic>
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8002972:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8002976:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <mtx4_execute.lto_priv.94+0x23c>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002978:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 800297a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800297e:	4642      	mov	r2, r8
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4883      	ldr	r0, [pc, #524]	; (8002b90 <mtx4_execute.lto_priv.94+0x240>)
 8002984:	4b83      	ldr	r3, [pc, #524]	; (8002b94 <mtx4_execute.lto_priv.94+0x244>)
 8002986:	f002 fbbb 	bl	8005100 <chThdCreateStatic>
 800298a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 800298c:	4882      	ldr	r0, [pc, #520]	; (8002b98 <mtx4_execute.lto_priv.94+0x248>)
 800298e:	f002 fd67 	bl	8005460 <chMtxLock>
 8002992:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8002994:	6899      	ldr	r1, [r3, #8]
 8002996:	2001      	movs	r0, #1
 8002998:	1a61      	subs	r1, r4, r1
 800299a:	fab1 f181 	clz	r1, r1
 800299e:	0949      	lsrs	r1, r1, #5
 80029a0:	f000 ffd6 	bl	8003950 <_test_assert>
 80029a4:	b110      	cbz	r0, 80029ac <mtx4_execute.lto_priv.94+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 80029a6:	b002      	add	sp, #8
 80029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 80029ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029b0:	f002 fe8e 	bl	80056d0 <chThdSleep>
 80029b4:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	2002      	movs	r0, #2
 80029ba:	1a79      	subs	r1, r7, r1
 80029bc:	fab1 f181 	clz	r1, r1
 80029c0:	0949      	lsrs	r1, r1, #5
 80029c2:	f000 ffc5 	bl	8003950 <_test_assert>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d1ed      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chMtxLock(&m1);
 80029ca:	4874      	ldr	r0, [pc, #464]	; (8002b9c <mtx4_execute.lto_priv.94+0x24c>)
 80029cc:	f002 fd48 	bl	8005460 <chMtxLock>
 80029d0:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	2003      	movs	r0, #3
 80029d6:	1a79      	subs	r1, r7, r1
 80029d8:	fab1 f181 	clz	r1, r1
 80029dc:	0949      	lsrs	r1, r1, #5
 80029de:	f000 ffb7 	bl	8003950 <_test_assert>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d1df      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chThdSleepMilliseconds(100);
 80029e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ea:	f002 fe71 	bl	80056d0 <chThdSleep>
 80029ee:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 80029f0:	6899      	ldr	r1, [r3, #8]
 80029f2:	2004      	movs	r0, #4
 80029f4:	ebc1 0108 	rsb	r1, r1, r8
 80029f8:	fab1 f181 	clz	r1, r1
 80029fc:	0949      	lsrs	r1, r1, #5
 80029fe:	f000 ffa7 	bl	8003950 <_test_assert>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1cf      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chMtxUnlock(&m1);
 8002a06:	4865      	ldr	r0, [pc, #404]	; (8002b9c <mtx4_execute.lto_priv.94+0x24c>)
 8002a08:	f002 fc8a 	bl	8005320 <chMtxUnlock>
 8002a0c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	2005      	movs	r0, #5
 8002a12:	1a79      	subs	r1, r7, r1
 8002a14:	fab1 f181 	clz	r1, r1
 8002a18:	0949      	lsrs	r1, r1, #5
 8002a1a:	f000 ff99 	bl	8003950 <_test_assert>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1c1      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chThdSleepMilliseconds(100);
 8002a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a26:	f002 fe53 	bl	80056d0 <chThdSleep>
 8002a2a:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	2006      	movs	r0, #6
 8002a30:	1a79      	subs	r1, r7, r1
 8002a32:	fab1 f181 	clz	r1, r1
 8002a36:	0949      	lsrs	r1, r1, #5
 8002a38:	f000 ff8a 	bl	8003950 <_test_assert>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d1b2      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chMtxUnlockAll();
 8002a40:	f002 fc16 	bl	8005270 <chMtxUnlockAll>
 8002a44:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	2007      	movs	r0, #7
 8002a4a:	1a61      	subs	r1, r4, r1
 8002a4c:	fab1 f181 	clz	r1, r1
 8002a50:	0949      	lsrs	r1, r1, #5
 8002a52:	f000 ff7d 	bl	8003950 <_test_assert>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d1a5      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  test_wait_threads();
 8002a5a:	f000 fdf1 	bl	8003640 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8002a5e:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <mtx4_execute.lto_priv.94+0x250>)
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <mtx4_execute.lto_priv.94+0x234>)
 8002a68:	4845      	ldr	r0, [pc, #276]	; (8002b80 <mtx4_execute.lto_priv.94+0x230>)
 8002a6a:	463a      	mov	r2, r7
 8002a6c:	f002 fb48 	bl	8005100 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <mtx4_execute.lto_priv.94+0x254>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8002a72:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8002a74:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <mtx4_execute.lto_priv.94+0x244>)
 8002a7e:	4844      	ldr	r0, [pc, #272]	; (8002b90 <mtx4_execute.lto_priv.94+0x240>)
 8002a80:	f002 fb3e 	bl	8005100 <chThdCreateStatic>
 8002a84:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8002a86:	4844      	ldr	r0, [pc, #272]	; (8002b98 <mtx4_execute.lto_priv.94+0x248>)
 8002a88:	f002 fcea 	bl	8005460 <chMtxLock>
 8002a8c:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8002a8e:	6899      	ldr	r1, [r3, #8]
 8002a90:	2008      	movs	r0, #8
 8002a92:	1a61      	subs	r1, r4, r1
 8002a94:	fab1 f181 	clz	r1, r1
 8002a98:	0949      	lsrs	r1, r1, #5
 8002a9a:	f000 ff59 	bl	8003950 <_test_assert>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d181      	bne.n	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chThdSleepMilliseconds(100);
 8002aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aa6:	f002 fe13 	bl	80056d0 <chThdSleep>
 8002aaa:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	1a7b      	subs	r3, r7, r1
 8002ab0:	4259      	negs	r1, r3
 8002ab2:	4159      	adcs	r1, r3
 8002ab4:	2009      	movs	r0, #9
 8002ab6:	f000 ff4b 	bl	8003950 <_test_assert>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	f47f af73 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chMtxLock(&m1);
 8002ac0:	4836      	ldr	r0, [pc, #216]	; (8002b9c <mtx4_execute.lto_priv.94+0x24c>)
 8002ac2:	f002 fccd 	bl	8005460 <chMtxLock>
 8002ac6:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	ebc1 0c07 	rsb	ip, r1, r7
 8002ace:	f1dc 0100 	rsbs	r1, ip, #0
 8002ad2:	eb41 010c 	adc.w	r1, r1, ip
 8002ad6:	200a      	movs	r0, #10
 8002ad8:	f000 ff3a 	bl	8003950 <_test_assert>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	f47f af62 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chThdSleepMilliseconds(100);
 8002ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae6:	f002 fdf3 	bl	80056d0 <chThdSleep>
 8002aea:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	ebc1 0e08 	rsb	lr, r1, r8
 8002af2:	f1de 0100 	rsbs	r1, lr, #0
 8002af6:	f04f 000b 	mov.w	r0, #11
 8002afa:	eb41 010e 	adc.w	r1, r1, lr
 8002afe:	f000 ff27 	bl	8003950 <_test_assert>
 8002b02:	4606      	mov	r6, r0
 8002b04:	2800      	cmp	r0, #0
 8002b06:	f47f af4e 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8002b10:	4822      	ldr	r0, [pc, #136]	; (8002b9c <mtx4_execute.lto_priv.94+0x24c>)
 8002b12:	f002 fbdd 	bl	80052d0 <chMtxUnlockS>
  chSchRescheduleS();
 8002b16:	f002 fa7b 	bl	8005010 <chSchRescheduleS>
 8002b1a:	f386 8811 	msr	BASEPRI, r6
 8002b1e:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	1a7e      	subs	r6, r7, r1
 8002b24:	4271      	negs	r1, r6
 8002b26:	4171      	adcs	r1, r6
 8002b28:	200c      	movs	r0, #12
 8002b2a:	f000 ff11 	bl	8003950 <_test_assert>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	f47f af39 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chThdSleepMilliseconds(100);
 8002b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b38:	f002 fdca 	bl	80056d0 <chThdSleep>
 8002b3c:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	1a7a      	subs	r2, r7, r1
 8002b42:	4251      	negs	r1, r2
 8002b44:	4151      	adcs	r1, r2
 8002b46:	200d      	movs	r0, #13
 8002b48:	f000 ff02 	bl	8003950 <_test_assert>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	f47f af2a 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
  chMtxUnlockAll();
 8002b52:	f002 fb8d 	bl	8005270 <chMtxUnlockAll>
 8002b56:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	1a63      	subs	r3, r4, r1
 8002b5c:	4259      	negs	r1, r3
 8002b5e:	4159      	adcs	r1, r3
 8002b60:	200e      	movs	r0, #14
 8002b62:	f000 fef5 	bl	8003950 <_test_assert>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	f47f af1d 	bne.w	80029a6 <mtx4_execute.lto_priv.94+0x56>
  test_wait_threads();
}
 8002b6c:	b002      	add	sp, #8
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8002b72:	f000 bd65 	b.w	8003640 <test_wait_threads>
 8002b76:	bf00      	nop
 8002b78:	20000b78 	.word	0x20000b78
 8002b7c:	08006a80 	.word	0x08006a80
 8002b80:	20000cf0 	.word	0x20000cf0
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	20000b08 	.word	0x20000b08
 8002b8c:	08006a70 	.word	0x08006a70
 8002b90:	20000e38 	.word	0x20000e38
 8002b94:	08002bd1 	.word	0x08002bd1
 8002b98:	2000086c 	.word	0x2000086c
 8002b9c:	2000085c 	.word	0x2000085c
 8002ba0:	08006a88 	.word	0x08006a88
 8002ba4:	08006a84 	.word	0x08006a84
	...

08002bb0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread4a, p) {
 8002bb0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8002bb2:	4c06      	ldr	r4, [pc, #24]	; (8002bcc <thread4a+0x1c>)
}

static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8002bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bb8:	f002 fd8a 	bl	80056d0 <chThdSleep>
  chMtxLock(&m2);
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f002 fc4f 	bl	8005460 <chMtxLock>
  chMtxUnlock(&m2);
 8002bc2:	4620      	mov	r0, r4
}
 8002bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4a, p) {

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
  chMtxUnlock(&m2);
 8002bc8:	f002 bbaa 	b.w	8005320 <chMtxUnlock>
 8002bcc:	2000086c 	.word	0x2000086c

08002bd0 <thread4b>:
}

static THD_FUNCTION(thread4b, p) {
 8002bd0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8002bd2:	4c06      	ldr	r4, [pc, #24]	; (8002bec <thread4b+0x1c>)
}

static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8002bd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002bd8:	f002 fd7a 	bl	80056d0 <chThdSleep>
  chMtxLock(&m1);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f002 fc3f 	bl	8005460 <chMtxLock>
  chMtxUnlock(&m1);
 8002be2:	4620      	mov	r0, r4
}
 8002be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static THD_FUNCTION(thread4b, p) {

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
  chMtxUnlock(&m1);
 8002be8:	f002 bb9a 	b.w	8005320 <chMtxUnlock>
 8002bec:	2000085c 	.word	0x2000085c

08002bf0 <mtx1_execute.lto_priv.92>:
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8002bf0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002bf2:	4e29      	ldr	r6, [pc, #164]	; (8002c98 <mtx1_execute.lto_priv.92+0xa8>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8002bf4:	4829      	ldr	r0, [pc, #164]	; (8002c9c <mtx1_execute.lto_priv.92+0xac>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002bf6:	69b3      	ldr	r3, [r6, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002bf8:	4d29      	ldr	r5, [pc, #164]	; (8002ca0 <mtx1_execute.lto_priv.92+0xb0>)
 8002bfa:	689c      	ldr	r4, [r3, #8]
  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx1_execute(void) {
 8002bfc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8002bfe:	f002 fc2f 	bl	8005460 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <mtx1_execute.lto_priv.92+0xb4>)
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	1c62      	adds	r2, r4, #1
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <mtx1_execute.lto_priv.92+0xb8>)
 8002c0a:	4828      	ldr	r0, [pc, #160]	; (8002cac <mtx1_execute.lto_priv.92+0xbc>)
 8002c0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c10:	f002 fa76 	bl	8005100 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <mtx1_execute.lto_priv.92+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002c16:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002c18:	1ca2      	adds	r2, r4, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <mtx1_execute.lto_priv.92+0xb8>)
 8002c22:	4824      	ldr	r0, [pc, #144]	; (8002cb4 <mtx1_execute.lto_priv.92+0xc4>)
 8002c24:	f002 fa6c 	bl	8005100 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <mtx1_execute.lto_priv.92+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002c2a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002c2c:	1ce2      	adds	r2, r4, #3
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <mtx1_execute.lto_priv.92+0xb8>)
 8002c36:	4821      	ldr	r0, [pc, #132]	; (8002cbc <mtx1_execute.lto_priv.92+0xcc>)
 8002c38:	f002 fa62 	bl	8005100 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <mtx1_execute.lto_priv.92+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002c3e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002c40:	1d22      	adds	r2, r4, #4
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <mtx1_execute.lto_priv.92+0xb8>)
 8002c4a:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <mtx1_execute.lto_priv.92+0xd4>)
 8002c4c:	f002 fa58 	bl	8005100 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <mtx1_execute.lto_priv.92+0xd8>)
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002c52:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002c54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002c58:	1d62      	adds	r2, r4, #5
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	481b      	ldr	r0, [pc, #108]	; (8002ccc <mtx1_execute.lto_priv.92+0xdc>)
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <mtx1_execute.lto_priv.92+0xb8>)
 8002c60:	f002 fa4e 	bl	8005100 <chThdCreateStatic>
 8002c64:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8002c66:	480d      	ldr	r0, [pc, #52]	; (8002c9c <mtx1_execute.lto_priv.92+0xac>)
 8002c68:	f002 fb5a 	bl	8005320 <chMtxUnlock>
  test_wait_threads();
 8002c6c:	f000 fce8 	bl	8003640 <test_wait_threads>
 8002c70:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	2001      	movs	r0, #1
 8002c76:	1a61      	subs	r1, r4, r1
 8002c78:	fab1 f181 	clz	r1, r1
 8002c7c:	0949      	lsrs	r1, r1, #5
 8002c7e:	f000 fe67 	bl	8003950 <_test_assert>
 8002c82:	b108      	cbz	r0, 8002c88 <mtx1_execute.lto_priv.92+0x98>
  test_assert_sequence(2, "ABCDE");
}
 8002c84:	b002      	add	sp, #8
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002c88:	4911      	ldr	r1, [pc, #68]	; (8002cd0 <mtx1_execute.lto_priv.92+0xe0>)
 8002c8a:	2002      	movs	r0, #2
}
 8002c8c:	b002      	add	sp, #8
 8002c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002c92:	f000 bd25 	b.w	80036e0 <_test_assert_sequence>
 8002c96:	bf00      	nop
 8002c98:	20000b78 	.word	0x20000b78
 8002c9c:	2000085c 	.word	0x2000085c
 8002ca0:	20000b08 	.word	0x20000b08
 8002ca4:	08006a94 	.word	0x08006a94
 8002ca8:	08002ce1 	.word	0x08002ce1
 8002cac:	20000cf0 	.word	0x20000cf0
 8002cb0:	08006a88 	.word	0x08006a88
 8002cb4:	20000e38 	.word	0x20000e38
 8002cb8:	08006a84 	.word	0x08006a84
 8002cbc:	20000f80 	.word	0x20000f80
 8002cc0:	08006a80 	.word	0x08006a80
 8002cc4:	200010c8 	.word	0x200010c8
 8002cc8:	08006a70 	.word	0x08006a70
 8002ccc:	20001210 	.word	0x20001210
 8002cd0:	08006a90 	.word	0x08006a90
	...

08002ce0 <thread1.lto_priv.153>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8002ce0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8002ce2:	4c06      	ldr	r4, [pc, #24]	; (8002cfc <thread1.lto_priv.153+0x1c>)
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread1, p) {
 8002ce4:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f002 fbba 	bl	8005460 <chMtxLock>
  test_emit_token(*(char *)p);
 8002cec:	7828      	ldrb	r0, [r5, #0]
 8002cee:	f000 fe47 	bl	8003980 <test_emit_token>
  chMtxUnlock(&m1);
 8002cf2:	4620      	mov	r0, r4
}
 8002cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread1, p) {

  chMtxLock(&m1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8002cf8:	f002 bb12 	b.w	8005320 <chMtxUnlock>
 8002cfc:	2000085c 	.word	0x2000085c

08002d00 <thread1.lto_priv.152>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread1, p) {
 8002d00:	b510      	push	{r4, lr}
 8002d02:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8002d04:	4803      	ldr	r0, [pc, #12]	; (8002d14 <thread1.lto_priv.152+0x14>)
 8002d06:	f002 fa53 	bl	80051b0 <chSemWait>
  test_emit_token(*(char *)p);
 8002d0a:	7820      	ldrb	r0, [r4, #0]
}
 8002d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static THD_FUNCTION(thread1, p) {

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
 8002d10:	f000 be36 	b.w	8003980 <test_emit_token>
 8002d14:	200008ac 	.word	0x200008ac
	...

08002d20 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static THD_FUNCTION(thread4, p) {
 8002d20:	b508      	push	{r3, lr}
 8002d22:	2220      	movs	r2, #32
 8002d24:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8002d28:	6883      	ldr	r3, [r0, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dd05      	ble.n	8002d3a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002d2e:	f002 f96f 	bl	8005010 <chSchRescheduleS>
 8002d32:	2300      	movs	r3, #0
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8002d3a:	f002 fba1 	bl	8005480 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002d3e:	f002 f967 	bl	8005010 <chSchRescheduleS>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	bd08      	pop	{r3, pc}
 8002d4a:	bf00      	nop
 8002d4c:	0000      	movs	r0, r0
	...

08002d50 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread2, p) {
 8002d50:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8002d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d56:	f002 fcbb 	bl	80056d0 <chThdSleep>
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8002d60:	4804      	ldr	r0, [pc, #16]	; (8002d74 <thread2+0x24>)
 8002d62:	f002 fb8d 	bl	8005480 <chSemSignalI>
  chSchRescheduleS();
 8002d66:	f002 f953 	bl	8005010 <chSchRescheduleS>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop
 8002d74:	200008ac 	.word	0x200008ac
	...

08002d80 <sem4_execute.lto_priv.90>:
static THD_FUNCTION(thread4, p) {

  chBSemSignal((binary_semaphore_t *)p);
}

static void sem4_execute(void) {
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002d84:	ad03      	add	r5, sp, #12
 8002d86:	2400      	movs	r4, #0
 8002d88:	9503      	str	r5, [sp, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002d8a:	9504      	str	r5, [sp, #16]
 8002d8c:	9405      	str	r4, [sp, #20]
 8002d8e:	2620      	movs	r6, #32
 8002d90:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8002d94:	4628      	mov	r0, r5
 8002d96:	4621      	mov	r1, r4
 8002d98:	f002 fb82 	bl	80054a0 <chSemResetI>
  chSchRescheduleS();
 8002d9c:	f002 f938 	bl	8005010 <chSchRescheduleS>
 8002da0:	f384 8811 	msr	BASEPRI, r4
 8002da4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8002da8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8002daa:	42a1      	cmp	r1, r4
 8002dac:	f04f 0001 	mov.w	r0, #1
 8002db0:	bfcc      	ite	gt
 8002db2:	2100      	movgt	r1, #0
 8002db4:	2101      	movle	r1, #1
 8002db6:	f000 fdcb 	bl	8003950 <_test_assert>
 8002dba:	4607      	mov	r7, r0
 8002dbc:	b118      	cbz	r0, 8002dc6 <sem4_execute.lto_priv.90+0x46>
 8002dbe:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8002dc2:	b007      	add	sp, #28
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <sem4_execute.lto_priv.90+0x150>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8002dcc:	4841      	ldr	r0, [pc, #260]	; (8002ed4 <sem4_execute.lto_priv.90+0x154>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <sem4_execute.lto_priv.90+0x158>)
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	9500      	str	r5, [sp, #0]
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002ddc:	f002 f990 	bl	8005100 <chThdCreateStatic>
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <sem4_execute.lto_priv.90+0x15c>)
 8002de2:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8002de4:	4628      	mov	r0, r5
 8002de6:	f002 f9e3 	bl	80051b0 <chSemWait>
 8002dea:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->bs_sem.s_cnt > (cnt_t)0) ? false : true;
 8002dee:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8002df0:	2900      	cmp	r1, #0
 8002df2:	bfcc      	ite	gt
 8002df4:	2100      	movgt	r1, #0
 8002df6:	2101      	movle	r1, #1
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f000 fda9 	bl	8003950 <_test_assert>
 8002dfe:	b118      	cbz	r0, 8002e08 <sem4_execute.lto_priv.90+0x88>
 8002e00:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8002e04:	b007      	add	sp, #28
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	f380 8811 	msr	BASEPRI, r0
 8002e0c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dd24      	ble.n	8002e60 <sem4_execute.lto_priv.90+0xe0>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002e16:	f002 f8fb 	bl	8005010 <chSchRescheduleS>
 8002e1a:	2400      	movs	r4, #0
 8002e1c:	f384 8811 	msr	BASEPRI, r4
 8002e20:	2720      	movs	r7, #32
 8002e22:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8002e26:	9905      	ldr	r1, [sp, #20]
 8002e28:	42a1      	cmp	r1, r4
 8002e2a:	f04f 0003 	mov.w	r0, #3
 8002e2e:	bfd4      	ite	le
 8002e30:	2100      	movle	r1, #0
 8002e32:	2101      	movgt	r1, #1
 8002e34:	f000 fd8c 	bl	8003950 <_test_assert>
 8002e38:	4606      	mov	r6, r0
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d1bf      	bne.n	8002dbe <sem4_execute.lto_priv.90+0x3e>
 8002e3e:	f380 8811 	msr	BASEPRI, r0
 8002e42:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8002e46:	9905      	ldr	r1, [sp, #20]
 8002e48:	2004      	movs	r0, #4
 8002e4a:	f1a1 0101 	sub.w	r1, r1, #1
 8002e4e:	fab1 f181 	clz	r1, r1
 8002e52:	0949      	lsrs	r1, r1, #5
 8002e54:	f000 fd7c 	bl	8003950 <_test_assert>
 8002e58:	b130      	cbz	r0, 8002e68 <sem4_execute.lto_priv.90+0xe8>
 8002e5a:	f386 8811 	msr	BASEPRI, r6
 8002e5e:	e7b0      	b.n	8002dc2 <sem4_execute.lto_priv.90+0x42>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8002e60:	4628      	mov	r0, r5
 8002e62:	f002 fb0d 	bl	8005480 <chSemSignalI>
 8002e66:	e7d6      	b.n	8002e16 <sem4_execute.lto_priv.90+0x96>
 8002e68:	f380 8811 	msr	BASEPRI, r0
 8002e6c:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
 8002e70:	9b05      	ldr	r3, [sp, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	dd24      	ble.n	8002ec0 <sem4_execute.lto_priv.90+0x140>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002e76:	f002 f8cb 	bl	8005010 <chSchRescheduleS>
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	f384 8811 	msr	BASEPRI, r4
 8002e80:	2620      	movs	r6, #32
 8002e82:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8002e86:	9905      	ldr	r1, [sp, #20]
 8002e88:	42a1      	cmp	r1, r4
 8002e8a:	f04f 0003 	mov.w	r0, #3
 8002e8e:	bfd4      	ite	le
 8002e90:	2100      	movle	r1, #0
 8002e92:	2101      	movgt	r1, #1
 8002e94:	f000 fd5c 	bl	8003950 <_test_assert>
 8002e98:	4605      	mov	r5, r0
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d18f      	bne.n	8002dbe <sem4_execute.lto_priv.90+0x3e>
 8002e9e:	f380 8811 	msr	BASEPRI, r0
 8002ea2:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8002ea6:	9905      	ldr	r1, [sp, #20]
 8002ea8:	2005      	movs	r0, #5
 8002eaa:	f1a1 0101 	sub.w	r1, r1, #1
 8002eae:	fab1 f181 	clz	r1, r1
 8002eb2:	0949      	lsrs	r1, r1, #5
 8002eb4:	f000 fd4c 	bl	8003950 <_test_assert>
 8002eb8:	b130      	cbz	r0, 8002ec8 <sem4_execute.lto_priv.90+0x148>
 8002eba:	f385 8811 	msr	BASEPRI, r5
 8002ebe:	e780      	b.n	8002dc2 <sem4_execute.lto_priv.90+0x42>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < (cnt_t)1) {
    chSemSignalI(&bsp->bs_sem);
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f002 fadd 	bl	8005480 <chSemSignalI>
 8002ec6:	e7d6      	b.n	8002e76 <sem4_execute.lto_priv.90+0xf6>
 8002ec8:	f380 8811 	msr	BASEPRI, r0
 8002ecc:	e779      	b.n	8002dc2 <sem4_execute.lto_priv.90+0x42>
 8002ece:	bf00      	nop
 8002ed0:	20000b78 	.word	0x20000b78
 8002ed4:	20000cf0 	.word	0x20000cf0
 8002ed8:	08002d21 	.word	0x08002d21
 8002edc:	20000b08 	.word	0x20000b08

08002ee0 <sem3_execute.lto_priv.89>:
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8002ee0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <sem3_execute.lto_priv.89+0x7c>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8002ee4:	481e      	ldr	r0, [pc, #120]	; (8002f60 <sem3_execute.lto_priv.89+0x80>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <sem3_execute.lto_priv.89+0x84>)
 8002eea:	6892      	ldr	r2, [r2, #8]
 *
 * @notapi
 */
static inline bool queue_isempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (const thread_t *)tqp);
 8002eec:	4c1e      	ldr	r4, [pc, #120]	; (8002f68 <sem3_execute.lto_priv.89+0x88>)
  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
}

static void sem3_execute(void) {
 8002eee:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	3201      	adds	r2, #1
 8002ef4:	9100      	str	r1, [sp, #0]
 8002ef6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002efa:	f002 f901 	bl	8005100 <chThdCreateStatic>
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <sem3_execute.lto_priv.89+0x8c>)
 8002f00:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8002f02:	f002 fd65 	bl	80059d0 <chSemSignalWait.constprop.54>
 8002f06:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8002f08:	2001      	movs	r0, #1
 8002f0a:	1b09      	subs	r1, r1, r4
 8002f0c:	fab1 f181 	clz	r1, r1
 8002f10:	0949      	lsrs	r1, r1, #5
 8002f12:	f000 fd1d 	bl	8003950 <_test_assert>
 8002f16:	b108      	cbz	r0, 8002f1c <sem3_execute.lto_priv.89+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8002f1c:	68a1      	ldr	r1, [r4, #8]
 8002f1e:	fab1 f181 	clz	r1, r1
 8002f22:	2002      	movs	r0, #2
 8002f24:	0949      	lsrs	r1, r1, #5
 8002f26:	f000 fd13 	bl	8003950 <_test_assert>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d1f4      	bne.n	8002f18 <sem3_execute.lto_priv.89+0x38>

  chSemSignalWait(&sem1, &sem1);
 8002f2e:	f002 fd4f 	bl	80059d0 <chSemSignalWait.constprop.54>
 8002f32:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8002f34:	2003      	movs	r0, #3
 8002f36:	1b09      	subs	r1, r1, r4
 8002f38:	fab1 f181 	clz	r1, r1
 8002f3c:	0949      	lsrs	r1, r1, #5
 8002f3e:	f000 fd07 	bl	8003950 <_test_assert>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d1e8      	bne.n	8002f18 <sem3_execute.lto_priv.89+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8002f46:	68a1      	ldr	r1, [r4, #8]
 8002f48:	fab1 f181 	clz	r1, r1
 8002f4c:	2004      	movs	r0, #4
 8002f4e:	0949      	lsrs	r1, r1, #5
}
 8002f50:	b002      	add	sp, #8
 8002f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8002f56:	f000 bcfb 	b.w	8003950 <_test_assert>
 8002f5a:	bf00      	nop
 8002f5c:	20000b78 	.word	0x20000b78
 8002f60:	20000cf0 	.word	0x20000cf0
 8002f64:	08002f71 	.word	0x08002f71
 8002f68:	200008ac 	.word	0x200008ac
 8002f6c:	20000b08 	.word	0x20000b08

08002f70 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static THD_FUNCTION(thread3, p) {
 8002f70:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8002f72:	4c04      	ldr	r4, [pc, #16]	; (8002f84 <thread3+0x14>)
 8002f74:	4620      	mov	r0, r4
 8002f76:	f002 f91b 	bl	80051b0 <chSemWait>
  chSemSignal(&sem1);
 8002f7a:	4620      	mov	r0, r4
}
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread3, p) {

  (void)p;
  chSemWait(&sem1);
  chSemSignal(&sem1);
 8002f80:	f002 b89e 	b.w	80050c0 <chSemSignal>
 8002f84:	200008ac 	.word	0x200008ac
	...

08002f90 <sem2_execute.lto_priv.87>:
  chSemSignalI(&sem1); /* For coverage reasons */
  chSchRescheduleS();
  chSysUnlock();
}

static void sem2_execute(void) {
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	2520      	movs	r5, #32
 8002f94:	b083      	sub	sp, #12
 8002f96:	f385 8811 	msr	BASEPRI, r5
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8002f9a:	4c54      	ldr	r4, [pc, #336]	; (80030ec <sem2_execute.lto_priv.87+0x15c>)
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f002 fb5e 	bl	8005660 <chSemWaitTimeoutS>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	f383 8811 	msr	BASEPRI, r3

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002fac:	2001      	movs	r0, #1
 8002fae:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8002fb2:	fab1 f181 	clz	r1, r1
 8002fb6:	0949      	lsrs	r1, r1, #5
 8002fb8:	f000 fcca 	bl	8003950 <_test_assert>
 8002fbc:	b108      	cbz	r0, 8002fc2 <sem2_execute.lto_priv.87+0x32>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8002fbe:	b003      	add	sp, #12
 8002fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc2:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8002fc4:	2002      	movs	r0, #2
 8002fc6:	1b09      	subs	r1, r1, r4
 8002fc8:	fab1 f181 	clz	r1, r1
 8002fcc:	0949      	lsrs	r1, r1, #5
 8002fce:	f000 fcbf 	bl	8003950 <_test_assert>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1f3      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8002fd6:	68a1      	ldr	r1, [r4, #8]
 8002fd8:	fab1 f181 	clz	r1, r1
 8002fdc:	2003      	movs	r0, #3
 8002fde:	0949      	lsrs	r1, r1, #5
 8002fe0:	f000 fcb6 	bl	8003950 <_test_assert>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d1e9      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <sem2_execute.lto_priv.87+0x160>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002fec:	4841      	ldr	r0, [pc, #260]	; (80030f4 <sem2_execute.lto_priv.87+0x164>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <sem2_execute.lto_priv.87+0x168>)
 8002ff2:	6892      	ldr	r2, [r2, #8]
 8002ff4:	9600      	str	r6, [sp, #0]
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002ffc:	f002 f880 	bl	8005100 <chThdCreateStatic>
 8003000:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <sem2_execute.lto_priv.87+0x16c>)
 8003002:	6018      	str	r0, [r3, #0]
 8003004:	f385 8811 	msr	BASEPRI, r5
 8003008:	f241 3188 	movw	r1, #5000	; 0x1388
 800300c:	4620      	mov	r0, r4
 800300e:	f002 fb27 	bl	8005660 <chSemWaitTimeoutS>
 8003012:	4607      	mov	r7, r0
 8003014:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8003018:	f000 fb12 	bl	8003640 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 800301c:	fab7 f187 	clz	r1, r7
 8003020:	2004      	movs	r0, #4
 8003022:	0949      	lsrs	r1, r1, #5
 8003024:	f000 fc94 	bl	8003950 <_test_assert>
 8003028:	2800      	cmp	r0, #0
 800302a:	d1c8      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
 800302c:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 800302e:	2005      	movs	r0, #5
 8003030:	1b09      	subs	r1, r1, r4
 8003032:	fab1 f181 	clz	r1, r1
 8003036:	0949      	lsrs	r1, r1, #5
 8003038:	f000 fc8a 	bl	8003950 <_test_assert>
 800303c:	2800      	cmp	r0, #0
 800303e:	d1be      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8003040:	68a1      	ldr	r1, [r4, #8]
 8003042:	fab1 f181 	clz	r1, r1
 8003046:	2006      	movs	r0, #6
 8003048:	0949      	lsrs	r1, r1, #5
 800304a:	f000 fc81 	bl	8003950 <_test_assert>
 800304e:	4606      	mov	r6, r0
 8003050:	2800      	cmp	r0, #0
 8003052:	d1b4      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8003054:	f000 fae4 	bl	8003620 <test_wait_tick>
 8003058:	f385 8811 	msr	BASEPRI, r5
 800305c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003060:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8003062:	f386 8811 	msr	BASEPRI, r6
 8003066:	2641      	movs	r6, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8003068:	4630      	mov	r0, r6
 800306a:	f000 fc89 	bl	8003980 <test_emit_token>
 800306e:	f385 8811 	msr	BASEPRI, r5
 8003072:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003076:	481d      	ldr	r0, [pc, #116]	; (80030ec <sem2_execute.lto_priv.87+0x15c>)
 8003078:	f002 faf2 	bl	8005660 <chSemWaitTimeoutS>
 800307c:	2300      	movs	r3, #0
 800307e:	4601      	mov	r1, r0
 8003080:	f383 8811 	msr	BASEPRI, r3
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8003084:	2007      	movs	r0, #7
 8003086:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 800308a:	fab1 f181 	clz	r1, r1
 800308e:	0949      	lsrs	r1, r1, #5
 8003090:	f000 fc5e 	bl	8003950 <_test_assert>
 8003094:	2800      	cmp	r0, #0
 8003096:	d192      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
 8003098:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 800309a:	2008      	movs	r0, #8
 800309c:	1b09      	subs	r1, r1, r4
 800309e:	fab1 f181 	clz	r1, r1
 80030a2:	0949      	lsrs	r1, r1, #5
 80030a4:	f000 fc54 	bl	8003950 <_test_assert>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d188      	bne.n	8002fbe <sem2_execute.lto_priv.87+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80030ac:	68a1      	ldr	r1, [r4, #8]
 80030ae:	fab1 f181 	clz	r1, r1
 80030b2:	2009      	movs	r0, #9
 80030b4:	0949      	lsrs	r1, r1, #5
 80030b6:	f000 fc4b 	bl	8003950 <_test_assert>
 80030ba:	3601      	adds	r6, #1
 80030bc:	b2f6      	uxtb	r6, r6
 80030be:	2800      	cmp	r0, #0
 80030c0:	f47f af7d 	bne.w	8002fbe <sem2_execute.lto_priv.87+0x2e>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80030c4:	2e46      	cmp	r6, #70	; 0x46
 80030c6:	d1cf      	bne.n	8003068 <sem2_execute.lto_priv.87+0xd8>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80030c8:	200a      	movs	r0, #10
 80030ca:	490d      	ldr	r1, [pc, #52]	; (8003100 <sem2_execute.lto_priv.87+0x170>)
 80030cc:	f000 fb08 	bl	80036e0 <_test_assert_sequence>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	f47f af74 	bne.w	8002fbe <sem2_execute.lto_priv.87+0x2e>
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80030d6:	200b      	movs	r0, #11
 80030d8:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 80030dc:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
}
 80030e0:	b003      	add	sp, #12
 80030e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80030e6:	f000 badb 	b.w	80036a0 <_test_assert_time_window>
 80030ea:	bf00      	nop
 80030ec:	200008ac 	.word	0x200008ac
 80030f0:	20000b78 	.word	0x20000b78
 80030f4:	20000cf0 	.word	0x20000cf0
 80030f8:	08002d51 	.word	0x08002d51
 80030fc:	20000b08 	.word	0x20000b08
 8003100:	08006a90 	.word	0x08006a90
	...

08003110 <sem1_execute.lto_priv.85>:

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003112:	4d4b      	ldr	r5, [pc, #300]	; (8003240 <sem1_execute.lto_priv.85+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003114:	4f4b      	ldr	r7, [pc, #300]	; (8003244 <sem1_execute.lto_priv.85+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003116:	69ab      	ldr	r3, [r5, #24]
 8003118:	484b      	ldr	r0, [pc, #300]	; (8003248 <sem1_execute.lto_priv.85+0x138>)
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 800311e:	4c4c      	ldr	r4, [pc, #304]	; (8003250 <sem1_execute.lto_priv.85+0x140>)

  chSemWait(&sem1);
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {
 8003120:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003122:	3205      	adds	r2, #5
 8003124:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003128:	9700      	str	r7, [sp, #0]
 800312a:	f001 ffe9 	bl	8005100 <chThdCreateStatic>
 800312e:	69ab      	ldr	r3, [r5, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b48      	ldr	r3, [pc, #288]	; (8003254 <sem1_execute.lto_priv.85+0x144>)
  test_emit_token(*(char *)p);
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003134:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003136:	3201      	adds	r2, #1
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800313e:	4b43      	ldr	r3, [pc, #268]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 8003140:	4845      	ldr	r0, [pc, #276]	; (8003258 <sem1_execute.lto_priv.85+0x148>)
 8003142:	f001 ffdd 	bl	8005100 <chThdCreateStatic>
 8003146:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <sem1_execute.lto_priv.85+0x14c>)
 800314a:	6892      	ldr	r2, [r2, #8]
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800314c:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800314e:	3203      	adds	r2, #3
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 8003158:	4841      	ldr	r0, [pc, #260]	; (8003260 <sem1_execute.lto_priv.85+0x150>)
 800315a:	f001 ffd1 	bl	8005100 <chThdCreateStatic>
 800315e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <sem1_execute.lto_priv.85+0x154>)
 8003162:	6892      	ldr	r2, [r2, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003164:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003166:	3204      	adds	r2, #4
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 8003170:	483d      	ldr	r0, [pc, #244]	; (8003268 <sem1_execute.lto_priv.85+0x158>)
 8003172:	f001 ffc5 	bl	8005100 <chThdCreateStatic>
 8003176:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003178:	4b3c      	ldr	r3, [pc, #240]	; (800326c <sem1_execute.lto_priv.85+0x15c>)
 800317a:	6892      	ldr	r2, [r2, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800317c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800317e:	3202      	adds	r2, #2
 8003180:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	483a      	ldr	r0, [pc, #232]	; (8003270 <sem1_execute.lto_priv.85+0x160>)
 8003188:	4b30      	ldr	r3, [pc, #192]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 800318a:	f001 ffb9 	bl	8005100 <chThdCreateStatic>
 800318e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8003190:	4838      	ldr	r0, [pc, #224]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 8003192:	f001 ff95 	bl	80050c0 <chSemSignal>
  chSemSignal(&sem1);
 8003196:	4837      	ldr	r0, [pc, #220]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 8003198:	f001 ff92 	bl	80050c0 <chSemSignal>
  chSemSignal(&sem1);
 800319c:	4835      	ldr	r0, [pc, #212]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 800319e:	f001 ff8f 	bl	80050c0 <chSemSignal>
  chSemSignal(&sem1);
 80031a2:	4834      	ldr	r0, [pc, #208]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 80031a4:	f001 ff8c 	bl	80050c0 <chSemSignal>
  chSemSignal(&sem1);
 80031a8:	4832      	ldr	r0, [pc, #200]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 80031aa:	f001 ff89 	bl	80050c0 <chSemSignal>
  test_wait_threads();
 80031ae:	f000 fa47 	bl	8003640 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 80031b2:	2001      	movs	r0, #1
 80031b4:	4930      	ldr	r1, [pc, #192]	; (8003278 <sem1_execute.lto_priv.85+0x168>)
 80031b6:	f000 fa93 	bl	80036e0 <_test_assert_sequence>
 80031ba:	4606      	mov	r6, r0
 80031bc:	b108      	cbz	r0, 80031c2 <sem1_execute.lto_priv.85+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 80031be:	b003      	add	sp, #12
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80031c4:	4820      	ldr	r0, [pc, #128]	; (8003248 <sem1_execute.lto_priv.85+0x138>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <sem1_execute.lto_priv.85+0x13c>)
 80031ca:	9700      	str	r7, [sp, #0]
 80031cc:	3205      	adds	r2, #5
 80031ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80031d2:	f001 ff95 	bl	8005100 <chThdCreateStatic>
 80031d6:	2320      	movs	r3, #32
 80031d8:	6020      	str	r0, [r4, #0]
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	4c25      	ldr	r4, [pc, #148]	; (8003274 <sem1_execute.lto_priv.85+0x164>)
 80031e0:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->s_cnt <= (cnt_t)0) {
 80031e2:	4627      	mov	r7, r4
 80031e4:	e002      	b.n	80031ec <sem1_execute.lto_priv.85+0xdc>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 80031e6:	2d01      	cmp	r5, #1
 80031e8:	d00e      	beq.n	8003208 <sem1_execute.lto_priv.85+0xf8>
 80031ea:	2501      	movs	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
 80031ec:	68a3      	ldr	r3, [r4, #8]
 80031ee:	3301      	adds	r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	dcf7      	bgt.n	80031e6 <sem1_execute.lto_priv.85+0xd6>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80031f6:	6838      	ldr	r0, [r7, #0]

  tqp->p_next = tp->p_next;
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	603b      	str	r3, [r7, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80031fc:	605f      	str	r7, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 80031fe:	f002 f81f 	bl	8005240 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8003202:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8003204:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8003206:	d1f0      	bne.n	80031ea <sem1_execute.lto_priv.85+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8003208:	f001 ff02 	bl	8005010 <chSchRescheduleS>
 800320c:	2500      	movs	r5, #0
 800320e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8003212:	f000 fa15 	bl	8003640 <test_wait_threads>
 8003216:	2320      	movs	r3, #32
 8003218:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 800321c:	68a1      	ldr	r1, [r4, #8]
 800321e:	2002      	movs	r0, #2
 8003220:	f1a1 0101 	sub.w	r1, r1, #1
 8003224:	fab1 f181 	clz	r1, r1
 8003228:	0949      	lsrs	r1, r1, #5
 800322a:	f000 fb91 	bl	8003950 <_test_assert>
 800322e:	b918      	cbnz	r0, 8003238 <sem1_execute.lto_priv.85+0x128>
 8003230:	f380 8811 	msr	BASEPRI, r0
}
 8003234:	b003      	add	sp, #12
 8003236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003238:	f385 8811 	msr	BASEPRI, r5
 800323c:	b003      	add	sp, #12
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003240:	20000b78 	.word	0x20000b78
 8003244:	08006a70 	.word	0x08006a70
 8003248:	20000cf0 	.word	0x20000cf0
 800324c:	08002d01 	.word	0x08002d01
 8003250:	20000b08 	.word	0x20000b08
 8003254:	08006a80 	.word	0x08006a80
 8003258:	20000e38 	.word	0x20000e38
 800325c:	08006a84 	.word	0x08006a84
 8003260:	20000f80 	.word	0x20000f80
 8003264:	08006a88 	.word	0x08006a88
 8003268:	200010c8 	.word	0x200010c8
 800326c:	08006a94 	.word	0x08006a94
 8003270:	20001210 	.word	0x20001210
 8003274:	200008ac 	.word	0x200008ac
 8003278:	08006a90 	.word	0x08006a90
 800327c:	00000000 	.word	0x00000000

08003280 <thd4_execute.lto_priv.83>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8003282:	f000 f9cd 	bl	8003620 <test_wait_tick>
 8003286:	2620      	movs	r6, #32
 8003288:	f386 8811 	msr	BASEPRI, r6
 800328c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003290:	2300      	movs	r3, #0
 8003292:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003294:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8003298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800329c:	f002 fa18 	bl	80056d0 <chThdSleep>
  test_assert_time_window(1,
 80032a0:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 80032a4:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 80032a8:	2001      	movs	r0, #1
 80032aa:	f000 f9f9 	bl	80036a0 <_test_assert_time_window>
 80032ae:	b100      	cbz	r0, 80032b2 <thd4_execute.lto_priv.83+0x32>
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b2:	f386 8811 	msr	BASEPRI, r6
 80032b6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80032b8:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 80032bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c0:	f002 fa06 	bl	80056d0 <chThdSleep>
  test_assert_time_window(2,
 80032c4:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
 80032c8:	f204 32eb 	addw	r2, r4, #1003	; 0x3eb
 80032cc:	2002      	movs	r0, #2
 80032ce:	f000 f9e7 	bl	80036a0 <_test_assert_time_window>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d1ec      	bne.n	80032b0 <thd4_execute.lto_priv.83+0x30>
 80032d6:	f386 8811 	msr	BASEPRI, r6
 80032da:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80032dc:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA + 1);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 80032e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80032e4:	f002 f9f4 	bl	80056d0 <chThdSleep>
  test_assert_time_window(3,
 80032e8:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 80032ec:	460a      	mov	r2, r1
 80032ee:	3213      	adds	r2, #19
 80032f0:	3110      	adds	r1, #16
 80032f2:	2003      	movs	r0, #3
 80032f4:	f000 f9d4 	bl	80036a0 <_test_assert_time_window>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d1d9      	bne.n	80032b0 <thd4_execute.lto_priv.83+0x30>
 80032fc:	f386 8811 	msr	BASEPRI, r6
 8003300:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8003302:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8003306:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 800330a:	f386 8811 	msr	BASEPRI, r6
 800330e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  time -= chVTGetSystemTimeX();
  if (time > (systime_t)0) {
 8003310:	1a61      	subs	r1, r4, r1
 8003312:	d10a      	bne.n	800332a <thd4_execute.lto_priv.83+0xaa>
 8003314:	2300      	movs	r3, #0
 8003316:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800331a:	2004      	movs	r0, #4
 800331c:	4621      	mov	r1, r4
 800331e:	f207 32eb 	addw	r2, r7, #1003	; 0x3eb
                          time,
                          time + CH_CFG_ST_TIMEDELTA + 1);
}
 8003322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA + 1);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8003326:	f000 b9bb 	b.w	80036a0 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800332a:	2008      	movs	r0, #8
 800332c:	f002 f970 	bl	8005610 <chSchGoSleepTimeoutS>
 8003330:	e7f0      	b.n	8003314 <thd4_execute.lto_priv.83+0x94>
 8003332:	bf00      	nop
	...

08003340 <thd3_execute.lto_priv.82>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003342:	4e49      	ldr	r6, [pc, #292]	; (8003468 <thd3_execute.lto_priv.82+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003344:	69b3      	ldr	r3, [r6, #24]
 8003346:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8003348:	1c65      	adds	r5, r4, #1
 800334a:	4628      	mov	r0, r5
 800334c:	f001 fe70 	bl	8005030 <chThdSetPriority>
  test_assert(1, p1 == prio,
 8003350:	1b01      	subs	r1, r0, r4

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8003352:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8003354:	fab1 f181 	clz	r1, r1
 8003358:	2001      	movs	r0, #1
 800335a:	0949      	lsrs	r1, r1, #5
 800335c:	f000 faf8 	bl	8003950 <_test_assert>
 8003360:	b100      	cbz	r0, 8003364 <thd3_execute.lto_priv.82+0x24>
 8003362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003364:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	2002      	movs	r0, #2
 800336a:	1a69      	subs	r1, r5, r1
 800336c:	fab1 f181 	clz	r1, r1
 8003370:	0949      	lsrs	r1, r1, #5
 8003372:	f000 faed 	bl	8003950 <_test_assert>
 8003376:	2800      	cmp	r0, #0
 8003378:	d1f3      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 800337a:	4638      	mov	r0, r7
 800337c:	f001 fe58 	bl	8005030 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8003380:	1a29      	subs	r1, r5, r0
 8003382:	2003      	movs	r0, #3
 8003384:	fab1 f181 	clz	r1, r1
 8003388:	0949      	lsrs	r1, r1, #5
 800338a:	f000 fae1 	bl	8003950 <_test_assert>
 800338e:	2800      	cmp	r0, #0
 8003390:	d1e7      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
 8003392:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	2004      	movs	r0, #4
 8003398:	1a61      	subs	r1, r4, r1
 800339a:	fab1 f181 	clz	r1, r1
 800339e:	0949      	lsrs	r1, r1, #5
 80033a0:	f000 fad6 	bl	8003950 <_test_assert>
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d1dc      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
 80033a8:	2320      	movs	r3, #32
 80033aa:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80033ae:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 80033b0:	6893      	ldr	r3, [r2, #8]
 80033b2:	3302      	adds	r3, #2
 80033b4:	6093      	str	r3, [r2, #8]
 80033b6:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80033ba:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	1ca7      	adds	r7, r4, #2
 80033c0:	1a79      	subs	r1, r7, r1
 80033c2:	2005      	movs	r0, #5
 80033c4:	fab1 f181 	clz	r1, r1
 80033c8:	0949      	lsrs	r1, r1, #5
 80033ca:	f000 fac1 	bl	8003950 <_test_assert>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d1c7      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 80033d2:	4628      	mov	r0, r5
 80033d4:	f001 fe2c 	bl	8005030 <chThdSetPriority>
  test_assert(6, p1 == prio,
 80033d8:	1b01      	subs	r1, r0, r4
 80033da:	2006      	movs	r0, #6
 80033dc:	fab1 f181 	clz	r1, r1
 80033e0:	0949      	lsrs	r1, r1, #5
 80033e2:	f000 fab5 	bl	8003950 <_test_assert>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d1bb      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 80033ea:	69b3      	ldr	r3, [r6, #24]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	2007      	movs	r0, #7
 80033f0:	1a79      	subs	r1, r7, r1
 80033f2:	fab1 f181 	clz	r1, r1
 80033f6:	0949      	lsrs	r1, r1, #5
 80033f8:	f000 faaa 	bl	8003950 <_test_assert>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d1b0      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8003400:	69b3      	ldr	r3, [r6, #24]
 8003402:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003404:	2008      	movs	r0, #8
 8003406:	1a69      	subs	r1, r5, r1
 8003408:	fab1 f181 	clz	r1, r1
 800340c:	0949      	lsrs	r1, r1, #5
 800340e:	f000 fa9f 	bl	8003950 <_test_assert>
 8003412:	2800      	cmp	r0, #0
 8003414:	d1a5      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8003416:	1ce7      	adds	r7, r4, #3
 8003418:	4638      	mov	r0, r7
 800341a:	f001 fe09 	bl	8005030 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 800341e:	1a28      	subs	r0, r5, r0
 8003420:	4241      	negs	r1, r0
 8003422:	4141      	adcs	r1, r0
 8003424:	2009      	movs	r0, #9
 8003426:	f000 fa93 	bl	8003950 <_test_assert>
 800342a:	2800      	cmp	r0, #0
 800342c:	d199      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 800342e:	69b3      	ldr	r3, [r6, #24]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	1a7a      	subs	r2, r7, r1
 8003434:	4251      	negs	r1, r2
 8003436:	4151      	adcs	r1, r2
 8003438:	200a      	movs	r0, #10
 800343a:	f000 fa89 	bl	8003950 <_test_assert>
 800343e:	2800      	cmp	r0, #0
 8003440:	d18f      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8003442:	69b3      	ldr	r3, [r6, #24]
 8003444:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003446:	1a7b      	subs	r3, r7, r1
 8003448:	4259      	negs	r1, r3
 800344a:	4159      	adcs	r1, r3
 800344c:	200b      	movs	r0, #11
 800344e:	f000 fa7f 	bl	8003950 <_test_assert>
 8003452:	2800      	cmp	r0, #0
 8003454:	d185      	bne.n	8003362 <thd3_execute.lto_priv.82+0x22>
 8003456:	2320      	movs	r3, #32
 8003458:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800345c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 800345e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8003460:	63dc      	str	r4, [r3, #60]	; 0x3c
 8003462:	f380 8811 	msr	BASEPRI, r0
 8003466:	e77c      	b.n	8003362 <thd3_execute.lto_priv.82+0x22>
 8003468:	20000b78 	.word	0x20000b78
 800346c:	00000000 	.word	0x00000000

08003470 <tmr.lto_priv.65>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <tmr.lto_priv.65+0x8>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	4770      	bx	lr
 8003478:	20000cc8 	.word	0x20000cc8
 800347c:	00000000 	.word	0x00000000

08003480 <notify2.lto_priv.67>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8003480:	4a02      	ldr	r2, [pc, #8]	; (800348c <notify2.lto_priv.67+0xc>)
 8003482:	68d3      	ldr	r3, [r2, #12]
 8003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003488:	60d3      	str	r3, [r2, #12]
 800348a:	4770      	bx	lr
 800348c:	40004400 	.word	0x40004400

08003490 <_port_irq_epilogue>:
 8003490:	2320      	movs	r3, #32
 8003492:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <_port_irq_epilogue+0x44>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800349e:	d102      	bne.n	80034a6 <_port_irq_epilogue+0x16>
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80034a6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80034aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ae:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80034b2:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80034b6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <_port_irq_epilogue+0x48>)
 80034bc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80034be:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80034c0:	6889      	ldr	r1, [r1, #8]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80034c6:	bf8c      	ite	hi
 80034c8:	4a04      	ldrhi	r2, [pc, #16]	; (80034dc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80034ca:	4a05      	ldrls	r2, [pc, #20]	; (80034e0 <_port_irq_epilogue+0x50>)
 80034cc:	f843 2c08 	str.w	r2, [r3, #-8]
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	20000b78 	.word	0x20000b78
 80034dc:	080002b1 	.word	0x080002b1
 80034e0:	080002b4 	.word	0x080002b4
	...

080034f0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80034f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80034f4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80034f8:	692b      	ldr	r3, [r5, #16]
 80034fa:	079b      	lsls	r3, r3, #30
 80034fc:	d403      	bmi.n	8003506 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80034fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003502:	f7ff bfc5 	b.w	8003490 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8003506:	2700      	movs	r7, #0
 8003508:	612f      	str	r7, [r5, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800350a:	2620      	movs	r6, #32
 800350c:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8003510:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800358c <VectorB0+0x9c>
 8003514:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003516:	f8d9 301c 	ldr.w	r3, [r9, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800351a:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	ebce 0001 	rsb	r0, lr, r1
 8003524:	4290      	cmp	r0, r2
 8003526:	f109 081c 	add.w	r8, r9, #28
 800352a:	d31c      	bcc.n	8003566 <VectorB0+0x76>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800352c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 800352e:	68dc      	ldr	r4, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003530:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003532:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003534:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003538:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800353c:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8003540:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003542:	bf08      	it	eq
 8003544:	60ef      	streq	r7, [r5, #12]
 8003546:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800354a:	6918      	ldr	r0, [r3, #16]
 800354c:	47a0      	blx	r4
 800354e:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8003552:	f8d9 301c 	ldr.w	r3, [r9, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003556:	6a69      	ldr	r1, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8003558:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	ebce 0001 	rsb	r0, lr, r1
 8003562:	4282      	cmp	r2, r0
 8003564:	d9e2      	bls.n	800352c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8003566:	4543      	cmp	r3, r8
 8003568:	d008      	beq.n	800357c <VectorB0+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800356a:	4472      	add	r2, lr
 800356c:	1a52      	subs	r2, r2, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800356e:	2a01      	cmp	r2, #1
 8003570:	bf98      	it	ls
 8003572:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 8003578:	440a      	add	r2, r1
 800357a:	635a      	str	r2, [r3, #52]	; 0x34
 800357c:	2300      	movs	r3, #0
 800357e:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8003582:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003586:	f7ff bf83 	b.w	8003490 <_port_irq_epilogue>
 800358a:	bf00      	nop
 800358c:	20000b78 	.word	0x20000b78

08003590 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003590:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8003594:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003596:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800359a:	2300      	movs	r3, #0
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
	...

080035b0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80035b0:	b410      	push	{r4}
 80035b2:	2320      	movs	r3, #32
 80035b4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80035b8:	4c09      	ldr	r4, [pc, #36]	; (80035e0 <chCoreAlloc+0x30>)
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <chCoreAlloc+0x34>)
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80035c0:	1dc3      	adds	r3, r0, #7
 80035c2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80035c6:	1a89      	subs	r1, r1, r2
 80035c8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80035ca:	bf9d      	ittte	ls
 80035cc:	189b      	addls	r3, r3, r2
 80035ce:	6023      	strls	r3, [r4, #0]

  return p;
 80035d0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80035d2:	2000      	movhi	r0, #0
 80035d4:	2300      	movs	r3, #0
 80035d6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80035da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	20000a2c 	.word	0x20000a2c
 80035e4:	20000b1c 	.word	0x20000b1c
	...

080035f0 <print_line.lto_priv.133>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4e09      	ldr	r6, [pc, #36]	; (8003618 <print_line.lto_priv.133+0x28>)
 80035f4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 80035f6:	6830      	ldr	r0, [r6, #0]
 80035f8:	4d07      	ldr	r5, [pc, #28]	; (8003618 <print_line.lto_priv.133+0x28>)
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	212d      	movs	r1, #45	; 0x2d
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8003602:	3c01      	subs	r4, #1
 8003604:	d1f7      	bne.n	80035f6 <print_line.lto_priv.133+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8003606:	6828      	ldr	r0, [r5, #0]
 8003608:	4904      	ldr	r1, [pc, #16]	; (800361c <print_line.lto_priv.133+0x2c>)
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	2202      	movs	r2, #2
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8003614:	4718      	bx	r3
 8003616:	bf00      	nop
 8003618:	20000ae0 	.word	0x20000ae0
 800361c:	08006aa0 	.word	0x08006aa0

08003620 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8003620:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003622:	2001      	movs	r0, #1
 8003624:	f002 f854 	bl	80056d0 <chThdSleep>
 8003628:	2320      	movs	r3, #32
 800362a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800362e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003632:	2300      	movs	r3, #0
 8003634:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003636:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800363a:	bd08      	pop	{r3, pc}
 800363c:	0000      	movs	r0, r0
	...

08003640 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4c07      	ldr	r4, [pc, #28]	; (8003660 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8003644:	2600      	movs	r6, #0
 8003646:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800364a:	f854 0b04 	ldr.w	r0, [r4], #4
 800364e:	b118      	cbz	r0, 8003658 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8003650:	f001 fdd6 	bl	8005200 <chThdWait>
      threads[i] = NULL;
 8003654:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003658:	42ac      	cmp	r4, r5
 800365a:	d1f6      	bne.n	800364a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	bf00      	nop
 8003660:	20000b08 	.word	0x20000b08
	...

08003670 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <test_terminate_threads+0x2c>)
 8003672:	b430      	push	{r4, r5}
 8003674:	f103 0014 	add.w	r0, r3, #20
 8003678:	2520      	movs	r5, #32
 800367a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 800367c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003680:	b13a      	cbz	r2, 8003692 <test_terminate_threads+0x22>
 8003682:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8003686:	7f51      	ldrb	r1, [r2, #29]
 8003688:	f041 0104 	orr.w	r1, r1, #4
 800368c:	7751      	strb	r1, [r2, #29]
 800368e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8003692:	4283      	cmp	r3, r0
 8003694:	d1f2      	bne.n	800367c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8003696:	bc30      	pop	{r4, r5}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000b08 	.word	0x20000b08

080036a0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80036a0:	b410      	push	{r4}
 80036a2:	2320      	movs	r3, #32
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80036ac:	2300      	movs	r3, #0
 80036ae:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80036b0:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80036b4:	1a64      	subs	r4, r4, r1
 80036b6:	1a52      	subs	r2, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80036b8:	4294      	cmp	r4, r2
 80036ba:	d306      	bcc.n	80036ca <_test_assert_time_window+0x2a>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80036bc:	4c05      	ldr	r4, [pc, #20]	; (80036d4 <_test_assert_time_window+0x34>)
  local_fail = TRUE;
 80036be:	4906      	ldr	r1, [pc, #24]	; (80036d8 <_test_assert_time_window+0x38>)
  failpoint = point;
 80036c0:	4a06      	ldr	r2, [pc, #24]	; (80036dc <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
 80036c6:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80036c8:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000a3c 	.word	0x20000a3c
 80036d8:	200008cc 	.word	0x200008cc
 80036dc:	20000a40 	.word	0x20000a40

080036e0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 80036e0:	b4f0      	push	{r4, r5, r6, r7}
 80036e2:	4e0e      	ldr	r6, [pc, #56]	; (800371c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 80036e4:	4f0e      	ldr	r7, [pc, #56]	; (8003720 <_test_assert_sequence+0x40>)
 80036e6:	6835      	ldr	r5, [r6, #0]
 80036e8:	463b      	mov	r3, r7
 80036ea:	e005      	b.n	80036f8 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 80036ec:	f813 4b01 	ldrb.w	r4, [r3], #1
 80036f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f4:	4294      	cmp	r4, r2
 80036f6:	d107      	bne.n	8003708 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 80036f8:	42ab      	cmp	r3, r5
 80036fa:	d3f7      	bcc.n	80036ec <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80036fc:	780b      	ldrb	r3, [r1, #0]
 80036fe:	b91b      	cbnz	r3, 8003708 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8003700:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8003702:	4618      	mov	r0, r3
 8003704:	bcf0      	pop	{r4, r5, r6, r7}
 8003706:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003708:	4c06      	ldr	r4, [pc, #24]	; (8003724 <_test_assert_sequence+0x44>)
  local_fail = TRUE;
 800370a:	4907      	ldr	r1, [pc, #28]	; (8003728 <_test_assert_sequence+0x48>)
  failpoint = point;
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800370e:	2301      	movs	r3, #1
 8003710:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 8003712:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003714:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8003716:	4618      	mov	r0, r3
 8003718:	bcf0      	pop	{r4, r5, r6, r7}
 800371a:	4770      	bx	lr
 800371c:	20000a18 	.word	0x20000a18
 8003720:	20000a1c 	.word	0x20000a1c
 8003724:	20000a3c 	.word	0x20000a3c
 8003728:	200008cc 	.word	0x200008cc
 800372c:	20000a40 	.word	0x20000a40

08003730 <thd2_execute.lto_priv.81>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	4e47      	ldr	r6, [pc, #284]	; (8003854 <thd2_execute.lto_priv.81+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003736:	4d48      	ldr	r5, [pc, #288]	; (8003858 <thd2_execute.lto_priv.81+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003738:	69b3      	ldr	r3, [r6, #24]
 800373a:	4f48      	ldr	r7, [pc, #288]	; (800385c <thd2_execute.lto_priv.81+0x12c>)
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	4b48      	ldr	r3, [pc, #288]	; (8003860 <thd2_execute.lto_priv.81+0x130>)
 8003740:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8003874 <thd2_execute.lto_priv.81+0x144>
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8003744:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003746:	3a04      	subs	r2, #4
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4628      	mov	r0, r5
 800374c:	463b      	mov	r3, r7
 800374e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003752:	f001 fcd5 	bl	8005100 <chThdCreateStatic>
 8003756:	69b3      	ldr	r3, [r6, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003758:	4942      	ldr	r1, [pc, #264]	; (8003864 <thd2_execute.lto_priv.81+0x134>)
 800375a:	689a      	ldr	r2, [r3, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800375c:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003760:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 8003764:	463b      	mov	r3, r7
 8003766:	9100      	str	r1, [sp, #0]
 8003768:	3a05      	subs	r2, #5
 800376a:	4620      	mov	r0, r4
 800376c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003770:	f001 fcc6 	bl	8005100 <chThdCreateStatic>
 8003774:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003776:	493c      	ldr	r1, [pc, #240]	; (8003868 <thd2_execute.lto_priv.81+0x138>)
 8003778:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800377a:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800377e:	463b      	mov	r3, r7
 8003780:	9100      	str	r1, [sp, #0]
 8003782:	3a01      	subs	r2, #1
 8003784:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8003788:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800378c:	f001 fcb8 	bl	8005100 <chThdCreateStatic>
 8003790:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003792:	4936      	ldr	r1, [pc, #216]	; (800386c <thd2_execute.lto_priv.81+0x13c>)
 8003794:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003796:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800379a:	9100      	str	r1, [sp, #0]
 800379c:	3a02      	subs	r2, #2
 800379e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80037a2:	463b      	mov	r3, r7
 80037a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037a8:	f001 fcaa 	bl	8005100 <chThdCreateStatic>
 80037ac:	2220      	movs	r2, #32
 80037ae:	f8c8 000c 	str.w	r0, [r8, #12]
 80037b2:	f382 8811 	msr	BASEPRI, r2
 80037b6:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80037b8:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80037ba:	6898      	ldr	r0, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80037bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003878 <thd2_execute.lto_priv.81+0x148>
 80037c0:	f8c4 73b4 	str.w	r7, [r4, #948]	; 0x3b4
 80037c4:	3803      	subs	r0, #3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80037c6:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80037ca:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80037cc:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80037d0:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80037d4:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80037d8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800387c <thd2_execute.lto_priv.81+0x14c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80037dc:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80037e0:	f505 70b6 	add.w	r0, r5, #364	; 0x16c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80037e4:	f04f 0e02 	mov.w	lr, #2
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80037e8:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80037ec:	f04f 0901 	mov.w	r9, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80037f0:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 80037f4:	f8c4 a3b8 	str.w	sl, [r4, #952]	; 0x3b8
 80037f8:	f8c4 c3d4 	str.w	ip, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80037fc:	f884 e2ac 	strb.w	lr, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003800:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003804:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8003808:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800380c:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8003810:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003814:	f884 92ae 	strb.w	r9, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003818:	610b      	str	r3, [r1, #16]
 800381a:	6173      	str	r3, [r6, #20]
 800381c:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003820:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003824:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  tqp->p_prev = (thread_t *)tqp;
 8003828:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 800382c:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8003830:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003834:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8003838:	f001 fd02 	bl	8005240 <chSchReadyI>
 800383c:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8003840:	f7ff fefe 	bl	8003640 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8003844:	490a      	ldr	r1, [pc, #40]	; (8003870 <thd2_execute.lto_priv.81+0x140>)
 8003846:	4648      	mov	r0, r9
}
 8003848:	b003      	add	sp, #12
 800384a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800384e:	f7ff bf47 	b.w	80036e0 <_test_assert_sequence>
 8003852:	bf00      	nop
 8003854:	20000b78 	.word	0x20000b78
 8003858:	20000e38 	.word	0x20000e38
 800385c:	080039a1 	.word	0x080039a1
 8003860:	08006a88 	.word	0x08006a88
 8003864:	08006a94 	.word	0x08006a94
 8003868:	08006a70 	.word	0x08006a70
 800386c:	08006a80 	.word	0x08006a80
 8003870:	08006a90 	.word	0x08006a90
 8003874:	20000b08 	.word	0x20000b08
 8003878:	08006a84 	.word	0x08006a84
 800387c:	080002a1 	.word	0x080002a1

08003880 <thd1_execute.lto_priv.80>:
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003882:	4f27      	ldr	r7, [pc, #156]	; (8003920 <thd1_execute.lto_priv.80+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003884:	4e27      	ldr	r6, [pc, #156]	; (8003924 <thd1_execute.lto_priv.80+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	4d27      	ldr	r5, [pc, #156]	; (8003928 <thd1_execute.lto_priv.80+0xa8>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <thd1_execute.lto_priv.80+0xac>)
 800388e:	4c28      	ldr	r4, [pc, #160]	; (8003930 <thd1_execute.lto_priv.80+0xb0>)
static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {
 8003890:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003892:	3a05      	subs	r2, #5
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4630      	mov	r0, r6
 8003898:	462b      	mov	r3, r5
 800389a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800389e:	f001 fc2f 	bl	8005100 <chThdCreateStatic>
 80038a2:	69bb      	ldr	r3, [r7, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80038a4:	4923      	ldr	r1, [pc, #140]	; (8003934 <thd1_execute.lto_priv.80+0xb4>)
 80038a6:	689a      	ldr	r2, [r3, #8]
  test_emit_token(*(char *)p);
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80038a8:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80038aa:	462b      	mov	r3, r5
 80038ac:	9100      	str	r1, [sp, #0]
 80038ae:	3a04      	subs	r2, #4
 80038b0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80038b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038b8:	f001 fc22 	bl	8005100 <chThdCreateStatic>
 80038bc:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80038be:	491e      	ldr	r1, [pc, #120]	; (8003938 <thd1_execute.lto_priv.80+0xb8>)
 80038c0:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80038c2:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80038c4:	462b      	mov	r3, r5
 80038c6:	9100      	str	r1, [sp, #0]
 80038c8:	3a03      	subs	r2, #3
 80038ca:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80038ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038d2:	f001 fc15 	bl	8005100 <chThdCreateStatic>
 80038d6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80038d8:	4918      	ldr	r1, [pc, #96]	; (800393c <thd1_execute.lto_priv.80+0xbc>)
 80038da:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80038dc:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80038de:	462b      	mov	r3, r5
 80038e0:	9100      	str	r1, [sp, #0]
 80038e2:	3a02      	subs	r2, #2
 80038e4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80038e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038ec:	f001 fc08 	bl	8005100 <chThdCreateStatic>
 80038f0:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80038f2:	4913      	ldr	r1, [pc, #76]	; (8003940 <thd1_execute.lto_priv.80+0xc0>)
 80038f4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80038f6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80038f8:	3a01      	subs	r2, #1
 80038fa:	462b      	mov	r3, r5
 80038fc:	9100      	str	r1, [sp, #0]
 80038fe:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003902:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003906:	f001 fbfb 	bl	8005100 <chThdCreateStatic>
 800390a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 800390c:	f7ff fe98 	bl	8003640 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <thd1_execute.lto_priv.80+0xc4>)
 8003912:	2001      	movs	r0, #1
}
 8003914:	b003      	add	sp, #12
 8003916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800391a:	f7ff bee1 	b.w	80036e0 <_test_assert_sequence>
 800391e:	bf00      	nop
 8003920:	20000b78 	.word	0x20000b78
 8003924:	20000cf0 	.word	0x20000cf0
 8003928:	080039a1 	.word	0x080039a1
 800392c:	08006a94 	.word	0x08006a94
 8003930:	20000b08 	.word	0x20000b08
 8003934:	08006a88 	.word	0x08006a88
 8003938:	08006a84 	.word	0x08006a84
 800393c:	08006a80 	.word	0x08006a80
 8003940:	08006a70 	.word	0x08006a70
 8003944:	08006a90 	.word	0x08006a90
	...

08003950 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8003950:	b959      	cbnz	r1, 800396a <_test_assert+0x1a>
  local_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8003952:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003954:	4906      	ldr	r1, [pc, #24]	; (8003970 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 8003956:	4c07      	ldr	r4, [pc, #28]	; (8003974 <_test_assert+0x24>)
  local_fail = TRUE;
  failpoint = point;
 8003958:	4a07      	ldr	r2, [pc, #28]	; (8003978 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	7023      	strb	r3, [r4, #0]
  local_fail = TRUE;
  failpoint = point;
 800395e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  test_global_fail = TRUE;
  local_fail = TRUE;
 8003960:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8003962:	4618      	mov	r0, r3
 8003964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003968:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	4770      	bx	lr
 8003970:	200008cc 	.word	0x200008cc
 8003974:	20000a3c 	.word	0x20000a3c
 8003978:	20000a40 	.word	0x20000a40
 800397c:	00000000 	.word	0x00000000

08003980 <test_emit_token>:
 8003980:	2320      	movs	r3, #32
 8003982:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <test_emit_token+0x18>)
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	7018      	strb	r0, [r3, #0]
 8003992:	f382 8811 	msr	BASEPRI, r2
 8003996:	4770      	bx	lr
 8003998:	20000a18 	.word	0x20000a18
 800399c:	00000000 	.word	0x00000000

080039a0 <thread>:
 * priority order regardless of the initial order.
 */

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80039a0:	7800      	ldrb	r0, [r0, #0]
 80039a2:	f7ff bfed 	b.w	8003980 <test_emit_token>
 80039a6:	bf00      	nop
	...

080039b0 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80039b0:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80039b2:	7801      	ldrb	r1, [r0, #0]
 80039b4:	4d09      	ldr	r5, [pc, #36]	; (80039dc <test_println+0x2c>)
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80039b6:	4604      	mov	r4, r0
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80039b8:	b139      	cbz	r1, 80039ca <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 80039ba:	6828      	ldr	r0, [r5, #0]
 80039bc:	6803      	ldr	r3, [r0, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80039c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d1f7      	bne.n	80039ba <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80039ca:	6828      	ldr	r0, [r5, #0]
 80039cc:	4904      	ldr	r1, [pc, #16]	; (80039e0 <test_println+0x30>)
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	2202      	movs	r2, #2
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80039d8:	4718      	bx	r3
 80039da:	bf00      	nop
 80039dc:	20000ae0 	.word	0x20000ae0
 80039e0:	08006aa0 	.word	0x08006aa0
	...

080039f0 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80039f0:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 80039f2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 80039f4:	4604      	mov	r4, r0

  while (*msgp)
 80039f6:	b141      	cbz	r1, 8003a0a <test_print+0x1a>
 80039f8:	4d04      	ldr	r5, [pc, #16]	; (8003a0c <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 80039fa:	6828      	ldr	r0, [r5, #0]
 80039fc:	6803      	ldr	r3, [r0, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8003a02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d1f7      	bne.n	80039fa <test_print+0xa>
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	20000ae0 	.word	0x20000ae0

08003a10 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8003a10:	b310      	cbz	r0, 8003a58 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8003a12:	b570      	push	{r4, r5, r6, lr}
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <test_printn+0x54>)
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8003a16:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8003a18:	466d      	mov	r5, sp
 8003a1a:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8003a1c:	fba2 1300 	umull	r1, r3, r2, r0
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003a26:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8003a2a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8003a2e:	b2c9      	uxtb	r1, r1
 8003a30:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8003a34:	4618      	mov	r0, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8003a3a:	42ac      	cmp	r4, r5
 8003a3c:	d90a      	bls.n	8003a54 <test_printn+0x44>
 8003a3e:	4e0a      	ldr	r6, [pc, #40]	; (8003a68 <test_printn+0x58>)
 8003a40:	3c01      	subs	r4, #1
 8003a42:	e001      	b.n	8003a48 <test_printn+0x38>
 8003a44:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8003a48:	6830      	ldr	r0, [r6, #0]
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8003a50:	42ac      	cmp	r4, r5
 8003a52:	d1f7      	bne.n	8003a44 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8003a54:	b004      	add	sp, #16
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <test_printn+0x58>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	6803      	ldr	r3, [r0, #0]
 8003a5e:	2130      	movs	r1, #48	; 0x30
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4718      	bx	r3
 8003a64:	cccccccd 	.word	0xcccccccd
 8003a68:	20000ae0 	.word	0x20000ae0
 8003a6c:	00000000 	.word	0x00000000

08003a70 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003a70:	492c      	ldr	r1, [pc, #176]	; (8003b24 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003a72:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003a74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003a78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003a7c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003a7e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003a80:	680b      	ldr	r3, [r1, #0]
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003a88:	680a      	ldr	r2, [r1, #0]
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <__early_init+0xb4>)
 8003a8c:	0790      	lsls	r0, r2, #30
 8003a8e:	d5fb      	bpl.n	8003a88 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	f022 0203 	bic.w	r2, r2, #3
 8003a96:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	688b      	ldr	r3, [r1, #8]
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <__early_init+0xb4>)
 8003aa2:	f013 030c 	ands.w	r3, r3, #12
 8003aa6:	d1fa      	bne.n	8003a9e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003aa8:	6811      	ldr	r1, [r2, #0]
 8003aaa:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003aae:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003ab0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003aba:	6811      	ldr	r1, [r2, #0]
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <__early_init+0xb4>)
 8003abe:	0389      	lsls	r1, r1, #14
 8003ac0:	d5fb      	bpl.n	8003aba <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8003ac2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003aca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003acc:	4915      	ldr	r1, [pc, #84]	; (8003b24 <__early_init+0xb4>)
 8003ace:	0790      	lsls	r0, r2, #30
 8003ad0:	d5fb      	bpl.n	8003aca <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <__early_init+0xbc>)
 8003ad4:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003ad6:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ade:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003ae0:	6853      	ldr	r3, [r2, #4]
 8003ae2:	0459      	lsls	r1, r3, #17
 8003ae4:	d5fc      	bpl.n	8003ae0 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003ae6:	490f      	ldr	r1, [pc, #60]	; (8003b24 <__early_init+0xb4>)
 8003ae8:	680a      	ldr	r2, [r1, #0]
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <__early_init+0xb4>)
 8003aec:	0192      	lsls	r2, r2, #6
 8003aee:	d5fb      	bpl.n	8003ae8 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003af2:	4910      	ldr	r1, [pc, #64]	; (8003b34 <__early_init+0xc4>)
 8003af4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003af6:	f240 7105 	movw	r1, #1797	; 0x705
 8003afa:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	f042 0202 	orr.w	r2, r2, #2
 8003b02:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003b04:	461a      	mov	r2, r3
 8003b06:	6893      	ldr	r3, [r2, #8]
 8003b08:	4906      	ldr	r1, [pc, #24]	; (8003b24 <__early_init+0xb4>)
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d1f9      	bne.n	8003b06 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8003b12:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	644b      	str	r3, [r1, #68]	; 0x44
 8003b1a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	664b      	str	r3, [r1, #100]	; 0x64
 8003b22:	4770      	bx	lr
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	07405408 	.word	0x07405408
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	38889400 	.word	0x38889400
	...

08003b40 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8003b40:	b508      	push	{r3, lr}
 8003b42:	2220      	movs	r2, #32
 8003b44:	4603      	mov	r3, r0
 8003b46:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->mp_next;
 8003b4a:	6800      	ldr	r0, [r0, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8003b4c:	b128      	cbz	r0, 8003b5a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8003b4e:	6802      	ldr	r2, [r0, #0]
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8003b58:	bd08      	pop	{r3, pc}
  objp = mp->mp_next;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->mp_next = mp->mp_next->ph_next;
  }
  else if (mp->mp_provider != NULL) {
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d0f8      	beq.n	8003b52 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8003b60:	6858      	ldr	r0, [r3, #4]
 8003b62:	4790      	blx	r2
 8003b64:	2300      	movs	r3, #0
 8003b66:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 8003b6a:	bd08      	pop	{r3, pc}
 8003b6c:	0000      	movs	r0, r0
	...

08003b70 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8003b70:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL) {
    heapp = &default_heap;
 8003b72:	4c0f      	ldr	r4, [pc, #60]	; (8003bb0 <chHeapStatus+0x40>)
 8003b74:	2800      	cmp	r0, #0
 8003b76:	bf18      	it	ne
 8003b78:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8003b7a:	f104 0510 	add.w	r5, r4, #16
 8003b7e:	4628      	mov	r0, r5
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8003b80:	460e      	mov	r6, r1

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8003b82:	f001 fc6d 	bl	8005460 <chMtxLock>
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	b173      	cbz	r3, 8003ba8 <chHeapStatus+0x38>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 8003b8e:	6858      	ldr	r0, [r3, #4]

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003b90:	681b      	ldr	r3, [r3, #0]
    sz += qp->h.u.next->h.size;
    n++;
 8003b92:	3401      	adds	r4, #1
  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
    sz += qp->h.u.next->h.size;
 8003b94:	4402      	add	r2, r0

  H_LOCK(heapp);
  sz = 0;
  n = 0;
  qp = &heapp->h_free;
  while (qp->h.u.next != NULL) {
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f9      	bne.n	8003b8e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
    n++;
    qp = qp->h.u.next;
  }
  if (sizep != NULL) {
 8003b9a:	b106      	cbz	r6, 8003b9e <chHeapStatus+0x2e>
    *sizep = sz;
 8003b9c:	6032      	str	r2, [r6, #0]
  }
  H_UNLOCK(heapp);
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f001 fbbe 	bl	8005320 <chMtxUnlock>

  return n;
}
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  H_LOCK(heapp);
  sz = 0;
 8003ba8:	461a      	mov	r2, r3
  n = 0;
 8003baa:	461c      	mov	r4, r3
 8003bac:	e7f5      	b.n	8003b9a <chHeapStatus+0x2a>
 8003bae:	bf00      	nop
 8003bb0:	20000ae8 	.word	0x20000ae8
	...

08003bc0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8003bc2:	f850 5c08 	ldr.w	r5, [r0, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003bc6:	f105 0710 	add.w	r7, r5, #16
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8003bca:	4606      	mov	r6, r0
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8003bcc:	f1a0 0408 	sub.w	r4, r0, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003bd0:	3508      	adds	r5, #8

  H_LOCK(heapp);
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f001 fc44 	bl	8005460 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8003bd8:	462b      	mov	r3, r5

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8003bda:	42ab      	cmp	r3, r5
 8003bdc:	d004      	beq.n	8003be8 <chHeapFree+0x28>
 8003bde:	42a3      	cmp	r3, r4
 8003be0:	d302      	bcc.n	8003be8 <chHeapFree+0x28>
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	d1fa      	bne.n	8003bde <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003be8:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8003bea:	b11a      	cbz	r2, 8003bf4 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8003bec:	4294      	cmp	r4, r2
 8003bee:	d301      	bcc.n	8003bf4 <chHeapFree+0x34>
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	e7f2      	b.n	8003bda <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003bf4:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8003bf8:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8003bfc:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8003bfe:	f101 0208 	add.w	r2, r1, #8
 8003c02:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8003c06:	18a0      	adds	r0, r4, r2
 8003c08:	42a8      	cmp	r0, r5
 8003c0a:	d00a      	beq.n	8003c22 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	f101 0208 	add.w	r2, r1, #8
 8003c12:	441a      	add	r2, r3
 8003c14:	4294      	cmp	r4, r2
 8003c16:	d012      	beq.n	8003c3e <chHeapFree+0x7e>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003c18:	4638      	mov	r0, r7

  return;
}
 8003c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003c1e:	f001 bb7f 	b.w	8005320 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003c22:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8003c24:	58a2      	ldr	r2, [r4, r2]
 8003c26:	f846 2c08 	str.w	r2, [r6, #-8]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8003c2a:	180a      	adds	r2, r1, r0
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	f846 2c04 	str.w	r2, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	f101 0208 	add.w	r2, r1, #8
 8003c38:	441a      	add	r2, r3
 8003c3a:	4294      	cmp	r4, r2
 8003c3c:	d1ec      	bne.n	8003c18 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8003c3e:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8003c42:	440a      	add	r2, r1
 8003c44:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8003c46:	6018      	str	r0, [r3, #0]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8003c48:	605a      	str	r2, [r3, #4]
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003c4a:	4638      	mov	r0, r7

  return;
}
 8003c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8003c50:	f001 bb66 	b.w	8005320 <chMtxUnlock>
	...

08003c60 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL) {
    heapp = &default_heap;
 8003c62:	4e21      	ldr	r6, [pc, #132]	; (8003ce8 <chHeapAlloc+0x88>)
 8003c64:	2800      	cmp	r0, #0
 8003c66:	bf18      	it	ne
 8003c68:	4606      	movne	r6, r0
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003c6a:	f106 0710 	add.w	r7, r6, #16

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8003c6e:	3107      	adds	r1, #7
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8003c70:	4638      	mov	r0, r7

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8003c72:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8003c76:	f106 0408 	add.w	r4, r6, #8

  H_LOCK(heapp);
 8003c7a:	f001 fbf1 	bl	8005460 <chMtxLock>
 8003c7e:	e003      	b.n	8003c88 <chHeapAlloc+0x28>
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8003c80:	6843      	ldr	r3, [r0, #4]
 8003c82:	429d      	cmp	r5, r3
 8003c84:	d912      	bls.n	8003cac <chHeapAlloc+0x4c>
 8003c86:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d1f8      	bne.n	8003c80 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8003c8e:	4638      	mov	r0, r7
 8003c90:	f001 fb46 	bl	8005320 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8003c94:	6833      	ldr	r3, [r6, #0]
 8003c96:	b32b      	cbz	r3, 8003ce4 <chHeapAlloc+0x84>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8003c98:	f105 0008 	add.w	r0, r5, #8
 8003c9c:	4798      	blx	r3
    if (hp != NULL) {
 8003c9e:	b308      	cbz	r0, 8003ce4 <chHeapAlloc+0x84>
      hp->h.u.heap = heapp;
 8003ca0:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8003ca2:	6045      	str	r5, [r0, #4]
      hp++;
 8003ca4:	f100 0408 	add.w	r4, r0, #8
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003ca8:	4620      	mov	r0, r4
 8003caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8003cac:	f105 0208 	add.w	r2, r5, #8
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d909      	bls.n	8003cc8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003cb8:	4604      	mov	r4, r0
      H_UNLOCK(heapp);
 8003cba:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003cbc:	f844 6b08 	str.w	r6, [r4], #8
      H_UNLOCK(heapp);
 8003cc0:	f001 fb2e 	bl	8005320 <chMtxUnlock>
      /*lint -restore*/
    }
  }

  return NULL;
}
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc8:	f06f 0107 	mvn.w	r1, #7
 8003ccc:	1b49      	subs	r1, r1, r5
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8003cce:	eb00 0e02 	add.w	lr, r0, r2
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003cd2:	440b      	add	r3, r1
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003cd4:	6801      	ldr	r1, [r0, #0]
 8003cd6:	5081      	str	r1, [r0, r2]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003cd8:	f8ce 3004 	str.w	r3, [lr, #4]
        qp->h.u.next = fp;
 8003cdc:	f8c4 e000 	str.w	lr, [r4]
        hp->h.size = size;
 8003ce0:	6045      	str	r5, [r0, #4]
 8003ce2:	e7e9      	b.n	8003cb8 <chHeapAlloc+0x58>
      return (void *)hp;
      /*lint -restore*/
    }
  }

  return NULL;
 8003ce4:	2400      	movs	r4, #0
 8003ce6:	e7df      	b.n	8003ca8 <chHeapAlloc+0x48>
 8003ce8:	20000ae8 	.word	0x20000ae8
 8003cec:	00000000 	.word	0x00000000

08003cf0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	468b      	mov	fp, r1
 8003cfa:	4615      	mov	r5, r2
 8003cfc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8003cfe:	69c7      	ldr	r7, [r0, #28]
 8003d00:	f04f 0820 	mov.w	r8, #32
 8003d04:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8003d08:	2600      	movs	r6, #0
 8003d0a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8003d0c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003d0e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8003d12:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003d14:	b1fb      	cbz	r3, 8003d56 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003d16:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003d18:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003d1a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003d1c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8003d1e:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8003d20:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003d22:	f89b 3000 	ldrb.w	r3, [fp]
 8003d26:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	6962      	ldr	r2, [r4, #20]
 8003d2c:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8003d2e:	bf24      	itt	cs
 8003d30:	68e3      	ldrcs	r3, [r4, #12]
 8003d32:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8003d34:	b107      	cbz	r7, 8003d38 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8003d36:	47b8      	blx	r7
 8003d38:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8003d3c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8003d3e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8003d42:	d012      	beq.n	8003d6a <chOQWriteTimeout+0x7a>
 8003d44:	f388 8811 	msr	BASEPRI, r8
 8003d48:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003d4a:	46d3      	mov	fp, sl
 8003d4c:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8003d50:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1df      	bne.n	8003d16 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8003d56:	4620      	mov	r0, r4
 8003d58:	9901      	ldr	r1, [sp, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f001 fca0 	bl	80056a0 <chThdEnqueueTimeoutS>
 8003d60:	9b00      	ldr	r3, [sp, #0]
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d0d2      	beq.n	8003d0c <chOQWriteTimeout+0x1c>
 8003d66:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	b003      	add	sp, #12
 8003d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
	...

08003d80 <writet.lto_priv.75>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003d80:	3030      	adds	r0, #48	; 0x30
 8003d82:	f7ff bfb5 	b.w	8003cf0 <chOQWriteTimeout>
 8003d86:	bf00      	nop
	...

08003d90 <write.lto_priv.69>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003d90:	3030      	adds	r0, #48	; 0x30
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	f7ff bfab 	b.w	8003cf0 <chOQWriteTimeout>
 8003d9a:	bf00      	nop
 8003d9c:	0000      	movs	r0, r0
	...

08003da0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8003da0:	b538      	push	{r3, r4, r5, lr}
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003da2:	6942      	ldr	r2, [r0, #20]
 8003da4:	6983      	ldr	r3, [r0, #24]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d018      	beq.n	8003ddc <chOQGetI+0x3c>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003daa:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8003dac:	6905      	ldr	r5, [r0, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003dae:	1c59      	adds	r1, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8003db0:	3201      	adds	r2, #1
 8003db2:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 8003db4:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003db6:	42a9      	cmp	r1, r5
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003db8:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003dba:	d20c      	bcs.n	8003dd6 <chOQGetI+0x36>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003dbc:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003dbe:	4298      	cmp	r0, r3
 8003dc0:	d007      	beq.n	8003dd2 <chOQGetI+0x32>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003dc6:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003dc8:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 8003dca:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003dcc:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 8003dce:	f001 fa37 	bl	8005240 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return (msg_t)b;
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
 8003dd6:	68c3      	ldr	r3, [r0, #12]
 8003dd8:	6183      	str	r3, [r0, #24]
 8003dda:	e7ef      	b.n	8003dbc <chOQGetI+0x1c>
 8003ddc:	6882      	ldr	r2, [r0, #8]
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	d0e3      	beq.n	8003daa <chOQGetI+0xa>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
 8003de2:	f06f 0002 	mvn.w	r0, #2
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
	...

08003df0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4604      	mov	r4, r0
 8003df4:	460f      	mov	r7, r1
 8003df6:	4616      	mov	r6, r2
 8003df8:	2320      	movs	r3, #32
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	e003      	b.n	8003e08 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003e00:	f001 fc4e 	bl	80056a0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8003e04:	2800      	cmp	r0, #0
 8003e06:	db19      	blt.n	8003e3c <chOQPutTimeout+0x4c>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8003e08:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	d0f6      	beq.n	8003e00 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8003e12:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003e14:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003e16:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003e18:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8003e1a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8003e1c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003e1e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	6962      	ldr	r2, [r4, #20]
 8003e24:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003e26:	bf24      	itt	cs
 8003e28:	68e3      	ldrcs	r3, [r4, #12]
 8003e2a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8003e2c:	69e3      	ldr	r3, [r4, #28]
 8003e2e:	b10b      	cbz	r3, 8003e34 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8003e30:	4620      	mov	r0, r4
 8003e32:	4798      	blx	r3
 8003e34:	2000      	movs	r0, #0
 8003e36:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 8003e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3c:	f385 8811 	msr	BASEPRI, r5
 8003e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e42:	bf00      	nop
	...

08003e50 <putt.lto_priv.73>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003e50:	3030      	adds	r0, #48	; 0x30
 8003e52:	f7ff bfcd 	b.w	8003df0 <chOQPutTimeout>
 8003e56:	bf00      	nop
	...

08003e60 <put.lto_priv.71>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003e60:	3030      	adds	r0, #48	; 0x30
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	f7ff bfc3 	b.w	8003df0 <chOQPutTimeout>
 8003e6a:	bf00      	nop
 8003e6c:	0000      	movs	r0, r0
	...

08003e70 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	4604      	mov	r4, r0
 8003e76:	b083      	sub	sp, #12
 8003e78:	4689      	mov	r9, r1
 8003e7a:	4693      	mov	fp, r2
 8003e7c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8003e7e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8003e82:	2720      	movs	r7, #32
 8003e84:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8003e88:	2600      	movs	r6, #0
 8003e8a:	9701      	str	r7, [sp, #4]
 8003e8c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8003e8e:	f1b8 0f00 	cmp.w	r8, #0
 8003e92:	d005      	beq.n	8003ea0 <chIQReadTimeout+0x30>
      nfy(iqp);
 8003e94:	4620      	mov	r0, r4
 8003e96:	47c0      	blx	r8
 8003e98:	e002      	b.n	8003ea0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8003e9a:	f001 fc01 	bl	80056a0 <chThdEnqueueTimeoutS>
 8003e9e:	b9e0      	cbnz	r0, 8003eda <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8003ea0:	68a7      	ldr	r7, [r4, #8]
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8003ea6:	2f00      	cmp	r7, #0
 8003ea8:	d0f7      	beq.n	8003e9a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8003eaa:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8003eac:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8003eae:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8003eb0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8003eb2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8003eb4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8003eb6:	7813      	ldrb	r3, [r2, #0]
 8003eb8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	69a2      	ldr	r2, [r4, #24]
 8003ec0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8003ec2:	bf24      	itt	cs
 8003ec4:	68e3      	ldrcs	r3, [r4, #12]
 8003ec6:	61a3      	strcs	r3, [r4, #24]
 8003ec8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 8003ecc:	3601      	adds	r6, #1
    if (--n == 0U) {
 8003ece:	45b3      	cmp	fp, r6
 8003ed0:	d005      	beq.n	8003ede <chIQReadTimeout+0x6e>
 8003ed2:	9b01      	ldr	r3, [sp, #4]
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	e7d9      	b.n	8003e8e <chIQReadTimeout+0x1e>
 8003eda:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 8003ede:	4630      	mov	r0, r6
 8003ee0:	b003      	add	sp, #12
 8003ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
	...

08003ef0 <readt.lto_priv.76>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003ef0:	300c      	adds	r0, #12
 8003ef2:	f7ff bfbd 	b.w	8003e70 <chIQReadTimeout>
 8003ef6:	bf00      	nop
	...

08003f00 <read.lto_priv.70>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003f00:	300c      	adds	r0, #12
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	f7ff bfb3 	b.w	8003e70 <chIQReadTimeout>
 8003f0a:	bf00      	nop
 8003f0c:	0000      	movs	r0, r0
	...

08003f10 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	2320      	movs	r3, #32
 8003f14:	460e      	mov	r6, r1
 8003f16:	4604      	mov	r4, r0
 8003f18:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8003f1c:	69c3      	ldr	r3, [r0, #28]
 8003f1e:	b12b      	cbz	r3, 8003f2c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8003f20:	4798      	blx	r3
 8003f22:	e003      	b.n	8003f2c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8003f24:	f001 fbbc 	bl	80056a0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	db15      	blt.n	8003f58 <chIQGetTimeout+0x48>
 8003f2c:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8003f2e:	4620      	mov	r0, r4
 8003f30:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	d0f6      	beq.n	8003f24 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003f36:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003f38:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8003f3a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003f3c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003f3e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8003f40:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8003f42:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003f44:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8003f46:	bf28      	it	cs
 8003f48:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003f4a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8003f4c:	bf28      	it	cs
 8003f4e:	61a3      	strcs	r3, [r4, #24]
 8003f50:	2300      	movs	r3, #0
 8003f52:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f385 8811 	msr	BASEPRI, r5
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	bf00      	nop

08003f60 <gett.lto_priv.74>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003f60:	300c      	adds	r0, #12
 8003f62:	f7ff bfd5 	b.w	8003f10 <chIQGetTimeout>
 8003f66:	bf00      	nop
	...

08003f70 <get.lto_priv.72>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003f70:	300c      	adds	r0, #12
 8003f72:	f04f 31ff 	mov.w	r1, #4294967295
 8003f76:	f7ff bfcb 	b.w	8003f10 <chIQGetTimeout>
 8003f7a:	bf00      	nop
 8003f7c:	0000      	movs	r0, r0
	...

08003f80 <chIQPutI>:
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8003f80:	6943      	ldr	r3, [r0, #20]
 8003f82:	6982      	ldr	r2, [r0, #24]
 8003f84:	4293      	cmp	r3, r2
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003f86:	b510      	push	{r4, lr}
 8003f88:	d01d      	beq.n	8003fc6 <chIQPutI+0x46>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8003f8a:	6882      	ldr	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 8003f8c:	1c5c      	adds	r4, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8003f8e:	3201      	adds	r2, #1
 8003f90:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 8003f92:	6144      	str	r4, [r0, #20]
 8003f94:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8003f96:	6942      	ldr	r2, [r0, #20]
 8003f98:	6903      	ldr	r3, [r0, #16]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d20c      	bcs.n	8003fb8 <chIQPutI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	d00e      	beq.n	8003fc2 <chIQPutI+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003fa8:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8003faa:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 8003fac:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003fae:	621c      	str	r4, [r3, #32]
  (void) chSchReadyI(tp);
 8003fb0:	f001 f946 	bl	8005240 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	bd10      	pop	{r4, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 8003fb8:	68c3      	ldr	r3, [r0, #12]
 8003fba:	6143      	str	r3, [r0, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003fbc:	6803      	ldr	r3, [r0, #0]
 8003fbe:	4298      	cmp	r0, r3
 8003fc0:	d1f0      	bne.n	8003fa4 <chIQPutI+0x24>
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	6882      	ldr	r2, [r0, #8]
 8003fc8:	2a00      	cmp	r2, #0
 8003fca:	d0de      	beq.n	8003f8a <chIQPutI+0xa>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
 8003fcc:	f06f 0003 	mvn.w	r0, #3
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	bf00      	nop
	...

08003fe0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003fe4:	4f4b      	ldr	r7, [pc, #300]	; (8004114 <VectorD8+0x134>)
 8003fe6:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8003fe8:	f8d5 800c 	ldr.w	r8, [r5, #12]
  uint16_t sr = u->SR;
 8003fec:	682b      	ldr	r3, [r5, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003fee:	05de      	lsls	r6, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8003ff0:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8003ff2:	d45e      	bmi.n	80040b2 <VectorD8+0xd2>
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003ffa:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8003ffe:	d108      	bne.n	8004012 <VectorD8+0x32>
 8004000:	e031      	b.n	8004066 <VectorD8+0x86>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 8004002:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8004004:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8004006:	d41d      	bmi.n	8004044 <VectorD8+0x64>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8004008:	682c      	ldr	r4, [r5, #0]
 800400a:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800400c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004010:	d029      	beq.n	8004066 <VectorD8+0x86>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004012:	0720      	lsls	r0, r4, #28
 8004014:	d0f5      	beq.n	8004002 <VectorD8+0x22>
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8004016:	f014 0f08 	tst.w	r4, #8
 800401a:	bf0c      	ite	eq
 800401c:	2100      	moveq	r1, #0
 800401e:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8004020:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8004022:	bf48      	it	mi
 8004024:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8004028:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 800402a:	bf48      	it	mi
 800402c:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8004030:	0766      	lsls	r6, r4, #29
    sts |= SD_NOISE_ERROR;
 8004032:	bf48      	it	mi
 8004034:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8004038:	4837      	ldr	r0, [pc, #220]	; (8004118 <VectorD8+0x138>)
 800403a:	f000 ff19 	bl	8004e70 <chEvtBroadcastFlagsI>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
    if (sr & USART_SR_RXNE)
 800403e:	06a0      	lsls	r0, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = u->DR;
 8004040:	686e      	ldr	r6, [r5, #4]
    if (sr & USART_SR_RXNE)
 8004042:	d5e1      	bpl.n	8004008 <VectorD8+0x28>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8004044:	697b      	ldr	r3, [r7, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8004046:	b37b      	cbz	r3, 80040a8 <VectorD8+0xc8>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 8004048:	b2f1      	uxtb	r1, r6
 800404a:	4834      	ldr	r0, [pc, #208]	; (800411c <VectorD8+0x13c>)
 800404c:	f7ff ff98 	bl	8003f80 <chIQPutI>
 8004050:	2800      	cmp	r0, #0
 8004052:	dad9      	bge.n	8004008 <VectorD8+0x28>
 8004054:	4830      	ldr	r0, [pc, #192]	; (8004118 <VectorD8+0x138>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	f000 ff0a 	bl	8004e70 <chEvtBroadcastFlagsI>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800405c:	682c      	ldr	r4, [r5, #0]
 800405e:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004060:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8004064:	d1d5      	bne.n	8004012 <VectorD8+0x32>
 8004066:	2300      	movs	r3, #0
 8004068:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800406c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004070:	d001      	beq.n	8004076 <VectorD8+0x96>
 8004072:	0622      	lsls	r2, r4, #24
 8004074:	d42c      	bmi.n	80040d0 <VectorD8+0xf0>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8004076:	0663      	lsls	r3, r4, #25
 8004078:	d512      	bpl.n	80040a0 <VectorD8+0xc0>
 800407a:	2320      	movs	r3, #32
 800407c:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004084:	4823      	ldr	r0, [pc, #140]	; (8004114 <VectorD8+0x134>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d02f      	beq.n	80040ea <VectorD8+0x10a>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800408a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800408e:	ea08 0303 	and.w	r3, r8, r3
    u->SR = ~USART_SR_TC;
 8004092:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004096:	60eb      	str	r3, [r5, #12]
 8004098:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800409a:	602a      	str	r2, [r5, #0]
 800409c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 80040a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80040a4:	f7ff b9f4 	b.w	8003490 <_port_irq_epilogue>
 80040a8:	481b      	ldr	r0, [pc, #108]	; (8004118 <VectorD8+0x138>)
 80040aa:	2104      	movs	r1, #4
 80040ac:	f000 fee0 	bl	8004e70 <chEvtBroadcastFlagsI>
 80040b0:	e7ca      	b.n	8004048 <VectorD8+0x68>
 80040b2:	2320      	movs	r3, #32
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040bc:	1d38      	adds	r0, r7, #4
 80040be:	f000 fed7 	bl	8004e70 <chEvtBroadcastFlagsI>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 80040c2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	2300      	movs	r3, #0
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	e791      	b.n	8003ff4 <VectorD8+0x14>
 80040d0:	2320      	movs	r3, #32
 80040d2:	f383 8811 	msr	BASEPRI, r3

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
 80040d6:	4812      	ldr	r0, [pc, #72]	; (8004120 <VectorD8+0x140>)
 80040d8:	f7ff fe62 	bl	8003da0 <chOQGetI>
    if (b < Q_OK) {
 80040dc:	2800      	cmp	r0, #0
 80040de:	db0c      	blt.n	80040fa <VectorD8+0x11a>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80040e0:	6068      	str	r0, [r5, #4]
 80040e2:	2300      	movs	r3, #0
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	e7c5      	b.n	8004076 <VectorD8+0x96>
 80040ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0cc      	beq.n	800408a <VectorD8+0xaa>
 80040f0:	3004      	adds	r0, #4
 80040f2:	2110      	movs	r1, #16
 80040f4:	f000 febc 	bl	8004e70 <chEvtBroadcastFlagsI>
 80040f8:	e7c7      	b.n	800408a <VectorD8+0xaa>
 80040fa:	4807      	ldr	r0, [pc, #28]	; (8004118 <VectorD8+0x138>)
 80040fc:	2108      	movs	r1, #8
 80040fe:	f000 feb7 	bl	8004e70 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004102:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8004106:	ea08 0303 	and.w	r3, r8, r3
 800410a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410e:	60eb      	str	r3, [r5, #12]
 8004110:	e7e7      	b.n	80040e2 <VectorD8+0x102>
 8004112:	bf00      	nop
 8004114:	20000a44 	.word	0x20000a44
 8004118:	20000a48 	.word	0x20000a48
 800411c:	20000a50 	.word	0x20000a50
 8004120:	20000a74 	.word	0x20000a74
	...

08004130 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8004130:	b510      	push	{r4, lr}
 8004132:	2320      	movs	r3, #32
 8004134:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8004138:	4c0b      	ldr	r4, [pc, #44]	; (8004168 <chMsgWait+0x38>)
 800413a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800413c:	4613      	mov	r3, r2
 800413e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8004142:	4298      	cmp	r0, r3
 8004144:	d008      	beq.n	8004158 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004146:	6801      	ldr	r1, [r0, #0]
 8004148:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 800414a:	220d      	movs	r2, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 800414c:	604b      	str	r3, [r1, #4]
 800414e:	2300      	movs	r3, #0
 8004150:	7702      	strb	r2, [r0, #28]
 8004152:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8004156:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
 8004158:	200e      	movs	r0, #14
 800415a:	f001 f811 	bl	8005180 <chSchGoSleepS>
 800415e:	69a2      	ldr	r2, [r4, #24]
 8004160:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004162:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8004166:	e7ee      	b.n	8004146 <chMsgWait+0x16>
 8004168:	20000b78 	.word	0x20000b78
 800416c:	00000000 	.word	0x00000000

08004170 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8004176:	699c      	ldr	r4, [r3, #24]
 8004178:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800417c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8004180:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8004182:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8004184:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004186:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8004188:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 800418a:	6321      	str	r1, [r4, #48]	; 0x30
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 800418c:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 800418e:	6014      	str	r4, [r2, #0]
  tqp->p_prev = tp;
 8004190:	62c4      	str	r4, [r0, #44]	; 0x2c
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 8004192:	d007      	beq.n	80041a4 <chMsgSend+0x34>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8004194:	200c      	movs	r0, #12
 8004196:	f000 fff3 	bl	8005180 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800419a:	6a20      	ldr	r0, [r4, #32]
 800419c:	2300      	movs	r3, #0
 800419e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
    (void) chSchReadyI(tp);
 80041a4:	f001 f84c 	bl	8005240 <chSchReadyI>
 80041a8:	e7f4      	b.n	8004194 <chMsgSend+0x24>
 80041aa:	bf00      	nop
 80041ac:	20000b78 	.word	0x20000b78

080041b0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80041b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80041b2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80041b4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80041b6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80041b8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80041ba:	d00a      	beq.n	80041d2 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80041bc:	2a0b      	cmp	r2, #11
 80041be:	d000      	beq.n	80041c2 <chEvtSignalI+0x12>
 80041c0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80041c2:	6a03      	ldr	r3, [r0, #32]
 80041c4:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80041c6:	428b      	cmp	r3, r1
 80041c8:	d1fa      	bne.n	80041c0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 80041ce:	f001 b837 	b.w	8005240 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80041d2:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80041d4:	4219      	tst	r1, r3
 80041d6:	d1f8      	bne.n	80041ca <chEvtSignalI+0x1a>
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	0000      	movs	r0, r0
	...

080041e0 <mbox1_setup.lto_priv.104>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 80041e0:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <mbox1_setup.lto_priv.104+0x30>)
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <mbox1_setup.lto_priv.104+0x34>)
 80041e6:	601a      	str	r2, [r3, #0]
  mbp->mb_rdptr = buf;
  mbp->mb_wrptr = buf;
  mbp->mb_top = &buf[n];
 80041e8:	f102 0614 	add.w	r6, r2, #20
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80041ec:	2505      	movs	r5, #5
 80041ee:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80041f0:	f103 001c 	add.w	r0, r3, #28
 80041f4:	f103 0110 	add.w	r1, r3, #16
 80041f8:	605e      	str	r6, [r3, #4]
 80041fa:	625d      	str	r5, [r3, #36]	; 0x24
 80041fc:	619c      	str	r4, [r3, #24]
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->mb_buffer = buf;
  mbp->mb_rdptr = buf;
 80041fe:	60da      	str	r2, [r3, #12]
  mbp->mb_wrptr = buf;
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	61d8      	str	r0, [r3, #28]
  tqp->p_prev = (thread_t *)tqp;
 8004204:	6218      	str	r0, [r3, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004206:	6119      	str	r1, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8004208:	6159      	str	r1, [r3, #20]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 800420a:	bc70      	pop	{r4, r5, r6}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000884 	.word	0x20000884
 8004214:	20000cf0 	.word	0x20000cf0
	...

08004220 <mtx8_setup.lto_priv.101>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004220:	4a06      	ldr	r2, [pc, #24]	; (800423c <mtx8_setup.lto_priv.101+0x1c>)
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <mtx8_setup.lto_priv.101+0x20>)
 8004224:	4907      	ldr	r1, [pc, #28]	; (8004244 <mtx8_setup.lto_priv.101+0x24>)
 8004226:	6012      	str	r2, [r2, #0]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8004228:	2000      	movs	r0, #0
 800422a:	6009      	str	r1, [r1, #0]
  tqp->p_prev = (thread_t *)tqp;
 800422c:	6049      	str	r1, [r1, #4]
 800422e:	6052      	str	r2, [r2, #4]
 8004230:	6090      	str	r0, [r2, #8]
 8004232:	6098      	str	r0, [r3, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004234:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8004236:	605b      	str	r3, [r3, #4]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000085c 	.word	0x2000085c
 8004240:	2000086c 	.word	0x2000086c
 8004244:	2000087c 	.word	0x2000087c
	...

08004250 <mtx7_setup.lto_priv.99>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <mtx7_setup.lto_priv.99+0x14>)
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <mtx7_setup.lto_priv.99+0x18>)
 8004254:	601b      	str	r3, [r3, #0]
 8004256:	2100      	movs	r1, #0
 8004258:	6012      	str	r2, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 800425a:	6052      	str	r2, [r2, #4]
 800425c:	605b      	str	r3, [r3, #4]
 800425e:	6099      	str	r1, [r3, #8]
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	2000085c 	.word	0x2000085c
 8004268:	2000087c 	.word	0x2000087c
 800426c:	00000000 	.word	0x00000000

08004270 <evt1_execute.lto_priv.107>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8004270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004274:	4c32      	ldr	r4, [pc, #200]	; (8004340 <evt1_execute.lto_priv.107+0xd0>)
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	2020      	movs	r0, #32
 800427a:	6024      	str	r4, [r4, #0]
 800427c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004280:	4930      	ldr	r1, [pc, #192]	; (8004344 <evt1_execute.lto_priv.107+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8004286:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004288:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 800428c:	698b      	ldr	r3, [r1, #24]
 800428e:	9301      	str	r3, [sp, #4]
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 8004290:	f04f 32ff 	mov.w	r2, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 8004294:	2300      	movs	r3, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8004296:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8004298:	9702      	str	r7, [sp, #8]
  elp->el_flags    = (eventflags_t)0;
 800429a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800429c:	9204      	str	r2, [sp, #16]
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80042a6:	ae0a      	add	r6, sp, #40	; 0x28
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
 80042ae:	6989      	ldr	r1, [r1, #24]
 80042b0:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
 80042b2:	f04f 0802 	mov.w	r8, #2
  elp->el_flags    = (eventflags_t)0;
 80042b6:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 80042b8:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80042ba:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 80042bc:	f8cd 801c 	str.w	r8, [sp, #28]
 80042c0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->es_next);
 80042c4:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 80042c6:	1b09      	subs	r1, r1, r4
 80042c8:	bf18      	it	ne
 80042ca:	2101      	movne	r1, #1
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff fb3f 	bl	8003950 <_test_assert>
 80042d2:	b110      	cbz	r0, 80042da <evt1_execute.lto_priv.107+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 80042d4:	b00a      	add	sp, #40	; 0x28
 80042d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 80042da:	4629      	mov	r1, r5
 80042dc:	4620      	mov	r0, r4
 80042de:	f000 fddf 	bl	8004ea0 <chEvtUnregister>
 80042e2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 80042e4:	1b09      	subs	r1, r1, r4
 80042e6:	bf18      	it	ne
 80042e8:	2101      	movne	r1, #1
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fb30 	bl	8003950 <_test_assert>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d1ef      	bne.n	80042d4 <evt1_execute.lto_priv.107+0x64>
  chEvtUnregister(&es1, &el2);
 80042f4:	4631      	mov	r1, r6
 80042f6:	4620      	mov	r0, r4
 80042f8:	f000 fdd2 	bl	8004ea0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80042fc:	6821      	ldr	r1, [r4, #0]
 80042fe:	2003      	movs	r0, #3
 8004300:	1b09      	subs	r1, r1, r4
 8004302:	fab1 f181 	clz	r1, r1
 8004306:	0949      	lsrs	r1, r1, #5
 8004308:	f7ff fb22 	bl	8003950 <_test_assert>
 800430c:	2800      	cmp	r0, #0
 800430e:	d1e1      	bne.n	80042d4 <evt1_execute.lto_priv.107+0x64>
  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8004310:	4e0d      	ldr	r6, [pc, #52]	; (8004348 <evt1_execute.lto_priv.107+0xd8>)
 8004312:	4604      	mov	r4, r0
 8004314:	2507      	movs	r5, #7
 8004316:	e001      	b.n	800431c <evt1_execute.lto_priv.107+0xac>
    }
    eid++;
 8004318:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
 800431a:	b165      	cbz	r5, 8004336 <evt1_execute.lto_priv.107+0xc6>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800431c:	fa25 f304 	lsr.w	r3, r5, r4
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d5f9      	bpl.n	8004318 <evt1_execute.lto_priv.107+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8004324:	fa07 f304 	lsl.w	r3, r7, r4
      handlers[eid](eid);
 8004328:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800432c:	4620      	mov	r0, r4

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800432e:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8004332:	4790      	blx	r2
 8004334:	e7f0      	b.n	8004318 <evt1_execute.lto_priv.107+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8004336:	4905      	ldr	r1, [pc, #20]	; (800434c <evt1_execute.lto_priv.107+0xdc>)
 8004338:	2004      	movs	r0, #4
 800433a:	f7ff f9d1 	bl	80036e0 <_test_assert_sequence>
 800433e:	e7c9      	b.n	80042d4 <evt1_execute.lto_priv.107+0x64>
 8004340:	20000848 	.word	0x20000848
 8004344:	20000b78 	.word	0x20000b78
 8004348:	08006ac0 	.word	0x08006ac0
 800434c:	08006ab0 	.word	0x08006ab0

08004350 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8004350:	2043      	movs	r0, #67	; 0x43
 8004352:	f7ff bb15 	b.w	8003980 <test_emit_token>
 8004356:	bf00      	nop
	...

08004360 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8004360:	2042      	movs	r0, #66	; 0x42
 8004362:	f7ff bb0d 	b.w	8003980 <test_emit_token>
 8004366:	bf00      	nop
	...

08004370 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8004370:	2041      	movs	r0, #65	; 0x41
 8004372:	f7ff bb05 	b.w	8003980 <test_emit_token>
 8004376:	bf00      	nop
	...

08004380 <evt1_setup.lto_priv.106>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8004380:	f001 bb8e 	b.w	8005aa0 <chEvtGetAndClearEvents.constprop.41>
	...

08004390 <mbox1_execute.lto_priv.105>:

static void mbox1_execute(void) {
 8004390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004394:	2320      	movs	r3, #32
 8004396:	b082      	sub	sp, #8
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	4d96      	ldr	r5, [pc, #600]	; (80045f8 <mbox1_execute.lto_priv.105+0x268>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800439e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80043a0:	2001      	movs	r0, #1
 80043a2:	f1a1 0105 	sub.w	r1, r1, #5
 80043a6:	fab1 f181 	clz	r1, r1
 80043aa:	0949      	lsrs	r1, r1, #5
 80043ac:	f7ff fad0 	bl	8003950 <_test_assert>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f040 808a 	bne.w	80044ca <mbox1_execute.lto_priv.105+0x13a>
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80043bc:	4620      	mov	r0, r4
 80043be:	f04f 31ff 	mov.w	r1, #4294967295
 80043c2:	f001 fbbd 	bl	8005b40 <chMBPost.constprop.22>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 80043c6:	fab0 f180 	clz	r1, r0
 80043ca:	2002      	movs	r0, #2
 80043cc:	0949      	lsrs	r1, r1, #5
 80043ce:	f7ff fabf 	bl	8003950 <_test_assert>
 80043d2:	3401      	adds	r4, #1
 80043d4:	b970      	cbnz	r0, 80043f4 <mbox1_execute.lto_priv.105+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 80043d6:	2c46      	cmp	r4, #70	; 0x46
 80043d8:	d1f0      	bne.n	80043bc <mbox1_execute.lto_priv.105+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 80043da:	f04f 31ff 	mov.w	r1, #4294967295
 80043de:	2041      	movs	r0, #65	; 0x41
 80043e0:	f001 fbf6 	bl	8005bd0 <chMBPostAhead.constprop.20>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 80043e4:	fab0 f180 	clz	r1, r0
 80043e8:	2003      	movs	r0, #3
 80043ea:	0949      	lsrs	r1, r1, #5
 80043ec:	f7ff fab0 	bl	8003950 <_test_assert>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d070      	beq.n	80044d6 <mbox1_execute.lto_priv.105+0x146>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 80043f4:	b002      	add	sp, #8
 80043f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fa:	f386 8811 	msr	BASEPRI, r6
 80043fe:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004402:	202a      	movs	r0, #42	; 0x2a
 8004404:	69a1      	ldr	r1, [r4, #24]
 8004406:	fab1 f181 	clz	r1, r1
 800440a:	0949      	lsrs	r1, r1, #5
 800440c:	f7ff faa0 	bl	8003950 <_test_assert>
 8004410:	2800      	cmp	r0, #0
 8004412:	f040 829f 	bne.w	8004954 <mbox1_execute.lto_priv.105+0x5c4>
 8004416:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800441a:	68e1      	ldr	r1, [r4, #12]
 800441c:	68a3      	ldr	r3, [r4, #8]
 800441e:	ebc3 0e01 	rsb	lr, r3, r1
 8004422:	f1de 0100 	rsbs	r1, lr, #0
 8004426:	eb41 010e 	adc.w	r1, r1, lr
 800442a:	202b      	movs	r0, #43	; 0x2b
 800442c:	f7ff fa90 	bl	8003950 <_test_assert>
 8004430:	2800      	cmp	r0, #0
 8004432:	d1df      	bne.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 8004434:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 8004438:	6823      	ldr	r3, [r4, #0]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 800443a:	6862      	ldr	r2, [r4, #4]
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
 800443c:	60a3      	str	r3, [r4, #8]
  mbp->mb_rdptr = mbp->mb_buffer;
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 800443e:	1ad1      	subs	r1, r2, r3
 8004440:	f104 001c 	add.w	r0, r4, #28
 8004444:	1089      	asrs	r1, r1, #2

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_buffer;
  mbp->mb_rdptr = mbp->mb_buffer;
 8004446:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->mb_emptysem, (cnt_t)(mbp->mb_top - mbp->mb_buffer));
 8004448:	f001 f82a 	bl	80054a0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, (cnt_t)0);
 800444c:	f104 0010 	add.w	r0, r4, #16
 8004450:	4631      	mov	r1, r6
 8004452:	f001 f825 	bl	80054a0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 8004456:	f000 fddb 	bl	8005010 <chSchRescheduleS>
 800445a:	f386 8811 	msr	BASEPRI, r6
 800445e:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004462:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004464:	1f4d      	subs	r5, r1, #5
 8004466:	4269      	negs	r1, r5
 8004468:	4169      	adcs	r1, r5
 800446a:	202c      	movs	r0, #44	; 0x2c
 800446c:	f7ff fa70 	bl	8003950 <_test_assert>
 8004470:	2800      	cmp	r0, #0
 8004472:	f040 826f 	bne.w	8004954 <mbox1_execute.lto_priv.105+0x5c4>
 8004476:	f386 8811 	msr	BASEPRI, r6
 800447a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 800447e:	202d      	movs	r0, #45	; 0x2d
 8004480:	69a1      	ldr	r1, [r4, #24]
 8004482:	fab1 f181 	clz	r1, r1
 8004486:	0949      	lsrs	r1, r1, #5
 8004488:	f7ff fa62 	bl	8003950 <_test_assert>
 800448c:	2800      	cmp	r0, #0
 800448e:	f040 8261 	bne.w	8004954 <mbox1_execute.lto_priv.105+0x5c4>
 8004492:	f386 8811 	msr	BASEPRI, r6
 8004496:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	68a3      	ldr	r3, [r4, #8]
 800449e:	1aca      	subs	r2, r1, r3
 80044a0:	4251      	negs	r1, r2
 80044a2:	4151      	adcs	r1, r2
 80044a4:	202e      	movs	r0, #46	; 0x2e
 80044a6:	f7ff fa53 	bl	8003950 <_test_assert>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	f040 8252 	bne.w	8004954 <mbox1_execute.lto_priv.105+0x5c4>
 80044b0:	f386 8811 	msr	BASEPRI, r6
 80044b4:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80044b8:	6821      	ldr	r1, [r4, #0]
 80044ba:	68e3      	ldr	r3, [r4, #12]
 80044bc:	1acb      	subs	r3, r1, r3
 80044be:	4259      	negs	r1, r3
 80044c0:	f04f 002f 	mov.w	r0, #47	; 0x2f
 80044c4:	4159      	adcs	r1, r3
 80044c6:	f7ff fa43 	bl	8003950 <_test_assert>
 80044ca:	2300      	movs	r3, #0
 80044cc:	f383 8811 	msr	BASEPRI, r3
}
 80044d0:	b002      	add	sp, #8
 80044d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 80044d6:	2101      	movs	r1, #1
 80044d8:	2058      	movs	r0, #88	; 0x58
 80044da:	f001 fb31 	bl	8005b40 <chMBPost.constprop.22>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80044de:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80044e2:	2004      	movs	r0, #4
 80044e4:	fab1 f181 	clz	r1, r1
 80044e8:	0949      	lsrs	r1, r1, #5
 80044ea:	f7ff fa31 	bl	8003950 <_test_assert>
 80044ee:	4604      	mov	r4, r0
 80044f0:	2800      	cmp	r0, #0
 80044f2:	f47f af7f 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80044f6:	2620      	movs	r6, #32
 80044f8:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 80044fc:	2058      	movs	r0, #88	; 0x58
 80044fe:	f001 fb47 	bl	8005b90 <chMBPostI.constprop.21>
 8004502:	4601      	mov	r1, r0
 8004504:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004508:	2005      	movs	r0, #5
 800450a:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 800450e:	fab1 f181 	clz	r1, r1
 8004512:	0949      	lsrs	r1, r1, #5
 8004514:	f7ff fa1c 	bl	8003950 <_test_assert>
 8004518:	2800      	cmp	r0, #0
 800451a:	f47f af6b 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 800451e:	2101      	movs	r1, #1
 8004520:	2058      	movs	r0, #88	; 0x58
 8004522:	f001 fb55 	bl	8005bd0 <chMBPostAhead.constprop.20>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004526:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 800452a:	2006      	movs	r0, #6
 800452c:	fab1 f181 	clz	r1, r1
 8004530:	0949      	lsrs	r1, r1, #5
 8004532:	f7ff fa0d 	bl	8003950 <_test_assert>
 8004536:	4604      	mov	r4, r0
 8004538:	2800      	cmp	r0, #0
 800453a:	f47f af5b 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 800453e:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 8004542:	2058      	movs	r0, #88	; 0x58
 8004544:	f001 fb6c 	bl	8005c20 <chMBPostAheadI.constprop.19>
 8004548:	4601      	mov	r1, r0
 800454a:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800454e:	2007      	movs	r0, #7
 8004550:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8004554:	fab1 f181 	clz	r1, r1
 8004558:	0949      	lsrs	r1, r1, #5
 800455a:	f7ff f9f9 	bl	8003950 <_test_assert>
 800455e:	4680      	mov	r8, r0
 8004560:	2800      	cmp	r0, #0
 8004562:	f47f af47 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 8004566:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 800456a:	2008      	movs	r0, #8
 800456c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800456e:	fab1 f181 	clz	r1, r1
 8004572:	0949      	lsrs	r1, r1, #5
 8004574:	f7ff f9ec 	bl	8003950 <_test_assert>
 8004578:	4c1f      	ldr	r4, [pc, #124]	; (80045f8 <mbox1_execute.lto_priv.105+0x268>)
 800457a:	4607      	mov	r7, r0
 800457c:	b110      	cbz	r0, 8004584 <mbox1_execute.lto_priv.105+0x1f4>
 800457e:	f388 8811 	msr	BASEPRI, r8
 8004582:	e737      	b.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 8004584:	f380 8811 	msr	BASEPRI, r0
 8004588:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800458c:	69a1      	ldr	r1, [r4, #24]
 800458e:	f1a1 0e05 	sub.w	lr, r1, #5
 8004592:	f1de 0100 	rsbs	r1, lr, #0
 8004596:	eb41 010e 	adc.w	r1, r1, lr
 800459a:	2009      	movs	r0, #9
 800459c:	f7ff f9d8 	bl	8003950 <_test_assert>
 80045a0:	b110      	cbz	r0, 80045a8 <mbox1_execute.lto_priv.105+0x218>
 80045a2:	f387 8811 	msr	BASEPRI, r7
 80045a6:	e725      	b.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80045a8:	f380 8811 	msr	BASEPRI, r0
 80045ac:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80045b0:	68e1      	ldr	r1, [r4, #12]
 80045b2:	68a3      	ldr	r3, [r4, #8]
 80045b4:	1acc      	subs	r4, r1, r3
 80045b6:	4261      	negs	r1, r4
 80045b8:	f04f 000a 	mov.w	r0, #10
 80045bc:	4161      	adcs	r1, r4
 80045be:	f7ff f9c7 	bl	8003950 <_test_assert>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d181      	bne.n	80044cc <mbox1_execute.lto_priv.105+0x13c>
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	2405      	movs	r4, #5
 80045ce:	e005      	b.n	80045dc <mbox1_execute.lto_priv.105+0x24c>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 80045d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80045d4:	f7ff f9d4 	bl	8003980 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 80045d8:	3c01      	subs	r4, #1
 80045da:	d00f      	beq.n	80045fc <mbox1_execute.lto_priv.105+0x26c>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	a801      	add	r0, sp, #4
 80045e2:	f001 fb3d 	bl	8005c60 <chMBFetch.constprop.18>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 80045e6:	fab0 f180 	clz	r1, r0
 80045ea:	200b      	movs	r0, #11
 80045ec:	0949      	lsrs	r1, r1, #5
 80045ee:	f7ff f9af 	bl	8003950 <_test_assert>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d0ec      	beq.n	80045d0 <mbox1_execute.lto_priv.105+0x240>
 80045f6:	e6fd      	b.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80045f8:	20000884 	.word	0x20000884
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 80045fc:	200c      	movs	r0, #12
 80045fe:	49d7      	ldr	r1, [pc, #860]	; (800495c <mbox1_execute.lto_priv.105+0x5cc>)
 8004600:	f7ff f86e 	bl	80036e0 <_test_assert_sequence>
 8004604:	2800      	cmp	r0, #0
 8004606:	f47f aef5 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800460a:	f04f 31ff 	mov.w	r1, #4294967295
 800460e:	2047      	movs	r0, #71	; 0x47
 8004610:	f001 fa96 	bl	8005b40 <chMBPost.constprop.22>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8004614:	fab0 f180 	clz	r1, r0
 8004618:	200d      	movs	r0, #13
 800461a:	0949      	lsrs	r1, r1, #5
 800461c:	f7ff f998 	bl	8003950 <_test_assert>
 8004620:	2800      	cmp	r0, #0
 8004622:	f47f aee7 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004626:	f04f 31ff 	mov.w	r1, #4294967295
 800462a:	a801      	add	r0, sp, #4
 800462c:	f001 fb18 	bl	8005c60 <chMBFetch.constprop.18>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8004630:	fab0 f180 	clz	r1, r0
 8004634:	200e      	movs	r0, #14
 8004636:	0949      	lsrs	r1, r1, #5
 8004638:	f7ff f98a 	bl	8003950 <_test_assert>
 800463c:	2800      	cmp	r0, #0
 800463e:	f47f aed9 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	68ab      	ldr	r3, [r5, #8]
 8004646:	4ec6      	ldr	r6, [pc, #792]	; (8004960 <mbox1_execute.lto_priv.105+0x5d0>)
 8004648:	1ac8      	subs	r0, r1, r3
 800464a:	4241      	negs	r1, r0
 800464c:	4141      	adcs	r1, r0
 800464e:	200f      	movs	r0, #15
 8004650:	f7ff f97e 	bl	8003950 <_test_assert>
 8004654:	2800      	cmp	r0, #0
 8004656:	f47f aecd 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 800465a:	6831      	ldr	r1, [r6, #0]
 800465c:	68f3      	ldr	r3, [r6, #12]
 800465e:	1aca      	subs	r2, r1, r3
 8004660:	4251      	negs	r1, r2
 8004662:	4151      	adcs	r1, r2
 8004664:	2010      	movs	r0, #16
 8004666:	f7ff f973 	bl	8003950 <_test_assert>
 800466a:	2800      	cmp	r0, #0
 800466c:	f47f aec2 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8004670:	2101      	movs	r1, #1
 8004672:	a801      	add	r0, sp, #4
 8004674:	f001 faf4 	bl	8005c60 <chMBFetch.constprop.18>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	4259      	negs	r1, r3
 800467c:	4159      	adcs	r1, r3
 800467e:	2011      	movs	r0, #17
 8004680:	f7ff f966 	bl	8003950 <_test_assert>
 8004684:	2800      	cmp	r0, #0
 8004686:	f47f aeb5 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 800468a:	2720      	movs	r7, #32
 800468c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8004690:	a801      	add	r0, sp, #4
 8004692:	f001 fb0d 	bl	8005cb0 <chMBFetchI.constprop.17>
 8004696:	4601      	mov	r1, r0
 8004698:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800469c:	f101 0801 	add.w	r8, r1, #1
 80046a0:	f1d8 0100 	rsbs	r1, r8, #0
 80046a4:	eb41 0108 	adc.w	r1, r1, r8
 80046a8:	2012      	movs	r0, #18
 80046aa:	f7ff f951 	bl	8003950 <_test_assert>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f47f aea0 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80046b4:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80046b8:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80046ba:	f1a1 0c05 	sub.w	ip, r1, #5
 80046be:	f1dc 0100 	rsbs	r1, ip, #0
 80046c2:	eb41 010c 	adc.w	r1, r1, ip
 80046c6:	2013      	movs	r0, #19
 80046c8:	f7ff f942 	bl	8003950 <_test_assert>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f47f aefc 	bne.w	80044ca <mbox1_execute.lto_priv.105+0x13a>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	f388 8811 	msr	BASEPRI, r8
 80046da:	2420      	movs	r4, #32
 80046dc:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 80046e0:	2014      	movs	r0, #20
 80046e2:	69a9      	ldr	r1, [r5, #24]
 80046e4:	fab1 f181 	clz	r1, r1
 80046e8:	0949      	lsrs	r1, r1, #5
 80046ea:	f7ff f931 	bl	8003950 <_test_assert>
 80046ee:	4e9c      	ldr	r6, [pc, #624]	; (8004960 <mbox1_execute.lto_priv.105+0x5d0>)
 80046f0:	4607      	mov	r7, r0
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f47f af43 	bne.w	800457e <mbox1_execute.lto_priv.105+0x1ee>
 80046f8:	f380 8811 	msr	BASEPRI, r0
 80046fc:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004700:	68f1      	ldr	r1, [r6, #12]
 8004702:	68b3      	ldr	r3, [r6, #8]
 8004704:	ebc3 0e01 	rsb	lr, r3, r1
 8004708:	f1de 0100 	rsbs	r1, lr, #0
 800470c:	eb41 010e 	adc.w	r1, r1, lr
 8004710:	2015      	movs	r0, #21
 8004712:	f7ff f91d 	bl	8003950 <_test_assert>
 8004716:	2800      	cmp	r0, #0
 8004718:	f47f af43 	bne.w	80045a2 <mbox1_execute.lto_priv.105+0x212>
 800471c:	f380 8811 	msr	BASEPRI, r0
 8004720:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8004724:	2041      	movs	r0, #65	; 0x41
 8004726:	f001 fa33 	bl	8005b90 <chMBPostI.constprop.21>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 800472a:	fab0 f180 	clz	r1, r0
 800472e:	2016      	movs	r0, #22
 8004730:	0949      	lsrs	r1, r1, #5
 8004732:	f7ff f90d 	bl	8003950 <_test_assert>
 8004736:	2800      	cmp	r0, #0
 8004738:	f47f ae5c 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 800473c:	2042      	movs	r0, #66	; 0x42
 800473e:	f001 fa27 	bl	8005b90 <chMBPostI.constprop.21>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8004742:	fab0 f180 	clz	r1, r0
 8004746:	2017      	movs	r0, #23
 8004748:	0949      	lsrs	r1, r1, #5
 800474a:	f7ff f901 	bl	8003950 <_test_assert>
 800474e:	2800      	cmp	r0, #0
 8004750:	f47f ae50 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 8004754:	2043      	movs	r0, #67	; 0x43
 8004756:	f001 fa1b 	bl	8005b90 <chMBPostI.constprop.21>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 800475a:	fab0 f180 	clz	r1, r0
 800475e:	2018      	movs	r0, #24
 8004760:	0949      	lsrs	r1, r1, #5
 8004762:	f7ff f8f5 	bl	8003950 <_test_assert>
 8004766:	2800      	cmp	r0, #0
 8004768:	f47f ae44 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 800476c:	2044      	movs	r0, #68	; 0x44
 800476e:	f001 fa0f 	bl	8005b90 <chMBPostI.constprop.21>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8004772:	fab0 f180 	clz	r1, r0
 8004776:	2019      	movs	r0, #25
 8004778:	0949      	lsrs	r1, r1, #5
 800477a:	f7ff f8e9 	bl	8003950 <_test_assert>
 800477e:	4607      	mov	r7, r0
 8004780:	2800      	cmp	r0, #0
 8004782:	f47f ae37 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8004786:	2045      	movs	r0, #69	; 0x45
 8004788:	f001 fa02 	bl	8005b90 <chMBPostI.constprop.21>
 800478c:	4601      	mov	r1, r0
 800478e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8004792:	201a      	movs	r0, #26
 8004794:	fab1 f181 	clz	r1, r1
 8004798:	0949      	lsrs	r1, r1, #5
 800479a:	f7ff f8d9 	bl	8003950 <_test_assert>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f47f ae28 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80047a4:	68f1      	ldr	r1, [r6, #12]
 80047a6:	68b3      	ldr	r3, [r6, #8]
 80047a8:	1ace      	subs	r6, r1, r3
 80047aa:	4271      	negs	r1, r6
 80047ac:	4171      	adcs	r1, r6
 80047ae:	201b      	movs	r0, #27
 80047b0:	f7ff f8ce 	bl	8003950 <_test_assert>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f47f ae1d 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80047ba:	4626      	mov	r6, r4
 80047bc:	4680      	mov	r8, r0
 80047be:	2405      	movs	r4, #5
 80047c0:	2720      	movs	r7, #32
 80047c2:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 80047c6:	a801      	add	r0, sp, #4
 80047c8:	f001 fa72 	bl	8005cb0 <chMBFetchI.constprop.17>
 80047cc:	4601      	mov	r1, r0
 80047ce:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 80047d2:	201c      	movs	r0, #28
 80047d4:	fab1 f181 	clz	r1, r1
 80047d8:	0949      	lsrs	r1, r1, #5
 80047da:	f7ff f8b9 	bl	8003950 <_test_assert>
 80047de:	2800      	cmp	r0, #0
 80047e0:	f47f ae08 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
    test_emit_token(msg2);
 80047e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80047e8:	f7ff f8ca 	bl	8003980 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80047ec:	3c01      	subs	r4, #1
 80047ee:	d1e7      	bne.n	80047c0 <mbox1_execute.lto_priv.105+0x430>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 80047f0:	201d      	movs	r0, #29
 80047f2:	495a      	ldr	r1, [pc, #360]	; (800495c <mbox1_execute.lto_priv.105+0x5cc>)
 80047f4:	f7fe ff74 	bl	80036e0 <_test_assert_sequence>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f47f adfb 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80047fe:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004802:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004804:	4e56      	ldr	r6, [pc, #344]	; (8004960 <mbox1_execute.lto_priv.105+0x5d0>)
 8004806:	1f4a      	subs	r2, r1, #5
 8004808:	4251      	negs	r1, r2
 800480a:	4151      	adcs	r1, r2
 800480c:	201e      	movs	r0, #30
 800480e:	f7ff f89f 	bl	8003950 <_test_assert>
 8004812:	b110      	cbz	r0, 800481a <mbox1_execute.lto_priv.105+0x48a>
 8004814:	f384 8811 	msr	BASEPRI, r4
 8004818:	e5ec      	b.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 800481a:	f384 8811 	msr	BASEPRI, r4
 800481e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8004822:	201f      	movs	r0, #31
 8004824:	69b1      	ldr	r1, [r6, #24]
 8004826:	fab1 f181 	clz	r1, r1
 800482a:	0949      	lsrs	r1, r1, #5
 800482c:	f7ff f890 	bl	8003950 <_test_assert>
 8004830:	2800      	cmp	r0, #0
 8004832:	d1ef      	bne.n	8004814 <mbox1_execute.lto_priv.105+0x484>
 8004834:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004838:	68f1      	ldr	r1, [r6, #12]
 800483a:	68b3      	ldr	r3, [r6, #8]
 800483c:	1acb      	subs	r3, r1, r3
 800483e:	4259      	negs	r1, r3
 8004840:	4159      	adcs	r1, r3
 8004842:	4638      	mov	r0, r7
 8004844:	f7ff f884 	bl	8003950 <_test_assert>
 8004848:	2800      	cmp	r0, #0
 800484a:	f47f add3 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 800484e:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8004852:	2045      	movs	r0, #69	; 0x45
 8004854:	f001 f9e4 	bl	8005c20 <chMBPostAheadI.constprop.19>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8004858:	fab0 f180 	clz	r1, r0
 800485c:	2021      	movs	r0, #33	; 0x21
 800485e:	0949      	lsrs	r1, r1, #5
 8004860:	f7ff f876 	bl	8003950 <_test_assert>
 8004864:	2800      	cmp	r0, #0
 8004866:	f47f adc5 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 800486a:	2044      	movs	r0, #68	; 0x44
 800486c:	f001 f9d8 	bl	8005c20 <chMBPostAheadI.constprop.19>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8004870:	fab0 f180 	clz	r1, r0
 8004874:	2022      	movs	r0, #34	; 0x22
 8004876:	0949      	lsrs	r1, r1, #5
 8004878:	f7ff f86a 	bl	8003950 <_test_assert>
 800487c:	2800      	cmp	r0, #0
 800487e:	f47f adb9 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8004882:	2043      	movs	r0, #67	; 0x43
 8004884:	f001 f9cc 	bl	8005c20 <chMBPostAheadI.constprop.19>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8004888:	fab0 f180 	clz	r1, r0
 800488c:	2023      	movs	r0, #35	; 0x23
 800488e:	0949      	lsrs	r1, r1, #5
 8004890:	f7ff f85e 	bl	8003950 <_test_assert>
 8004894:	2800      	cmp	r0, #0
 8004896:	f47f adad 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 800489a:	2042      	movs	r0, #66	; 0x42
 800489c:	f001 f9c0 	bl	8005c20 <chMBPostAheadI.constprop.19>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 80048a0:	fab0 f180 	clz	r1, r0
 80048a4:	2024      	movs	r0, #36	; 0x24
 80048a6:	0949      	lsrs	r1, r1, #5
 80048a8:	f7ff f852 	bl	8003950 <_test_assert>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f47f ada1 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 80048b2:	2041      	movs	r0, #65	; 0x41
 80048b4:	f001 f9b4 	bl	8005c20 <chMBPostAheadI.constprop.19>
 80048b8:	2300      	movs	r3, #0
 80048ba:	4601      	mov	r1, r0
 80048bc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 80048c0:	2025      	movs	r0, #37	; 0x25
 80048c2:	fab1 f181 	clz	r1, r1
 80048c6:	0949      	lsrs	r1, r1, #5
 80048c8:	f7ff f842 	bl	8003950 <_test_assert>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	f47f ad91 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80048d2:	68e9      	ldr	r1, [r5, #12]
 80048d4:	68ab      	ldr	r3, [r5, #8]
 80048d6:	ebc3 0801 	rsb	r8, r3, r1
 80048da:	f1d8 0100 	rsbs	r1, r8, #0
 80048de:	eb41 0108 	adc.w	r1, r1, r8
 80048e2:	2026      	movs	r0, #38	; 0x26
 80048e4:	f7ff f834 	bl	8003950 <_test_assert>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f47f ad83 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 80048ee:	4604      	mov	r4, r0
 80048f0:	2605      	movs	r6, #5
 80048f2:	f04f 0820 	mov.w	r8, #32
 80048f6:	2720      	movs	r7, #32
 80048f8:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 80048fc:	a801      	add	r0, sp, #4
 80048fe:	f001 f9d7 	bl	8005cb0 <chMBFetchI.constprop.17>
 8004902:	4601      	mov	r1, r0
 8004904:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8004908:	2027      	movs	r0, #39	; 0x27
 800490a:	fab1 f181 	clz	r1, r1
 800490e:	0949      	lsrs	r1, r1, #5
 8004910:	f7ff f81e 	bl	8003950 <_test_assert>
 8004914:	2800      	cmp	r0, #0
 8004916:	f47f ad6d 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
    test_emit_token(msg2);
 800491a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800491e:	f7ff f82f 	bl	8003980 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004922:	3e01      	subs	r6, #1
 8004924:	d1e7      	bne.n	80048f6 <mbox1_execute.lto_priv.105+0x566>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8004926:	2028      	movs	r0, #40	; 0x28
 8004928:	490c      	ldr	r1, [pc, #48]	; (800495c <mbox1_execute.lto_priv.105+0x5cc>)
 800492a:	f7fe fed9 	bl	80036e0 <_test_assert_sequence>
 800492e:	2800      	cmp	r0, #0
 8004930:	f47f ad60 	bne.w	80043f4 <mbox1_execute.lto_priv.105+0x64>
 8004934:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004938:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800493a:	4c09      	ldr	r4, [pc, #36]	; (8004960 <mbox1_execute.lto_priv.105+0x5d0>)
 800493c:	f1a1 0c05 	sub.w	ip, r1, #5
 8004940:	f1dc 0100 	rsbs	r1, ip, #0
 8004944:	eb41 010c 	adc.w	r1, r1, ip
 8004948:	2029      	movs	r0, #41	; 0x29
 800494a:	f7ff f801 	bl	8003950 <_test_assert>
 800494e:	2800      	cmp	r0, #0
 8004950:	f43f ad53 	beq.w	80043fa <mbox1_execute.lto_priv.105+0x6a>
 8004954:	f386 8811 	msr	BASEPRI, r6
 8004958:	e54c      	b.n	80043f4 <mbox1_execute.lto_priv.105+0x64>
 800495a:	bf00      	nop
 800495c:	08006a90 	.word	0x08006a90
 8004960:	20000884 	.word	0x20000884
	...

08004970 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8004970:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8004972:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static THD_FUNCTION(thread, p) {
 8004974:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8004976:	f7ff fbfb 	bl	8004170 <chMsgSend>
  chMsgSend(p, 'B');
 800497a:	4620      	mov	r0, r4
 800497c:	2142      	movs	r1, #66	; 0x42
 800497e:	f7ff fbf7 	bl	8004170 <chMsgSend>
  chMsgSend(p, 'C');
 8004982:	4620      	mov	r0, r4
 8004984:	2143      	movs	r1, #67	; 0x43
}
 8004986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static THD_FUNCTION(thread, p) {

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
 800498a:	f7ff bbf1 	b.w	8004170 <chMsgSend>
 800498e:	bf00      	nop

08004990 <msg1_execute.lto_priv.103>:
}

static void msg1_execute(void) {
 8004990:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <msg1_execute.lto_priv.103+0x80>)
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8004994:	481f      	ldr	r0, [pc, #124]	; (8004a14 <msg1_execute.lto_priv.103+0x84>)
 8004996:	6999      	ldr	r1, [r3, #24]
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <msg1_execute.lto_priv.103+0x88>)
 800499a:	688a      	ldr	r2, [r1, #8]
  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
}

static void msg1_execute(void) {
 800499c:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800499e:	3201      	adds	r2, #1
 80049a0:	9100      	str	r1, [sp, #0]
 80049a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80049a6:	f000 fbab 	bl	8005100 <chThdCreateStatic>
 80049aa:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <msg1_execute.lto_priv.103+0x8c>)
 80049ac:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 80049ae:	f7ff fbbf 	bl	8004130 <chMsgWait>
 80049b2:	2520      	movs	r5, #32
 80049b4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80049b6:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80049ba:	4631      	mov	r1, r6
 80049bc:	f000 fb50 	bl	8005060 <chSchWakeupS>
 80049c0:	2400      	movs	r4, #0
 80049c2:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80049c6:	b2f0      	uxtb	r0, r6
 80049c8:	f7fe ffda 	bl	8003980 <test_emit_token>
  tp = chMsgWait();
 80049cc:	f7ff fbb0 	bl	8004130 <chMsgWait>
 80049d0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80049d2:	f385 8811 	msr	BASEPRI, r5
 80049d6:	4631      	mov	r1, r6
 80049d8:	f000 fb42 	bl	8005060 <chSchWakeupS>
 80049dc:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80049e0:	b2f0      	uxtb	r0, r6
 80049e2:	f7fe ffcd 	bl	8003980 <test_emit_token>
  tp = chMsgWait();
 80049e6:	f7ff fba3 	bl	8004130 <chMsgWait>
 80049ea:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80049ec:	f385 8811 	msr	BASEPRI, r5
 80049f0:	4631      	mov	r1, r6
 80049f2:	f000 fb35 	bl	8005060 <chSchWakeupS>
 80049f6:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80049fa:	b2f0      	uxtb	r0, r6
 80049fc:	f7fe ffc0 	bl	8003980 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <msg1_execute.lto_priv.103+0x90>)
 8004a02:	2001      	movs	r0, #1
}
 8004a04:	b002      	add	sp, #8
 8004a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8004a0a:	f7fe be69 	b.w	80036e0 <_test_assert_sequence>
 8004a0e:	bf00      	nop
 8004a10:	20000b78 	.word	0x20000b78
 8004a14:	20000cf0 	.word	0x20000cf0
 8004a18:	08004971 	.word	0x08004971
 8004a1c:	20000b08 	.word	0x20000b08
 8004a20:	08006ab0 	.word	0x08006ab0
	...

08004a30 <mtx8_execute.lto_priv.102>:
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <mtx8_execute.lto_priv.102+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004a34:	4d19      	ldr	r5, [pc, #100]	; (8004a9c <mtx8_execute.lto_priv.102+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <mtx8_execute.lto_priv.102+0x70>)
 8004a3a:	689e      	ldr	r6, [r3, #8]
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <mtx8_execute.lto_priv.102+0x74>)
 8004a3e:	4c1a      	ldr	r4, [pc, #104]	; (8004aa8 <mtx8_execute.lto_priv.102+0x78>)
  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
}

static void mtx8_execute(void) {
 8004a40:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004a42:	4628      	mov	r0, r5
 8004a44:	9200      	str	r2, [sp, #0]
 8004a46:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a4a:	1c72      	adds	r2, r6, #1
 8004a4c:	f000 fb58 	bl	8005100 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004a50:	4b16      	ldr	r3, [pc, #88]	; (8004aac <mtx8_execute.lto_priv.102+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004a52:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004a54:	1cb2      	adds	r2, r6, #2
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8004a5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <mtx8_execute.lto_priv.102+0x80>)
 8004a62:	f000 fb4d 	bl	8005100 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <mtx8_execute.lto_priv.102+0x84>)

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004a68:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8004a6a:	1cf2      	adds	r2, r6, #3
 8004a6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <mtx8_execute.lto_priv.102+0x88>)
 8004a78:	f000 fb42 	bl	8005100 <chThdCreateStatic>
 8004a7c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8004a7e:	f000 ffdf 	bl	8005a40 <chCondSignal.constprop.50>
  chCondSignal(&c1);
 8004a82:	f000 ffdd 	bl	8005a40 <chCondSignal.constprop.50>
  test_wait_threads();
 8004a86:	f7fe fddb 	bl	8003640 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8004a8a:	490c      	ldr	r1, [pc, #48]	; (8004abc <mtx8_execute.lto_priv.102+0x8c>)
 8004a8c:	2001      	movs	r0, #1
}
 8004a8e:	b002      	add	sp, #8
 8004a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8004a94:	f7fe be24 	b.w	80036e0 <_test_assert_sequence>
 8004a98:	20000b78 	.word	0x20000b78
 8004a9c:	20000cf0 	.word	0x20000cf0
 8004aa0:	08006a70 	.word	0x08006a70
 8004aa4:	08004ae1 	.word	0x08004ae1
 8004aa8:	20000b08 	.word	0x20000b08
 8004aac:	08006a84 	.word	0x08006a84
 8004ab0:	08004b71 	.word	0x08004b71
 8004ab4:	08006a80 	.word	0x08006a80
 8004ab8:	08004ac1 	.word	0x08004ac1
 8004abc:	08006ab0 	.word	0x08006ab0

08004ac0 <thread12>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8004ac0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8004ac2:	4c06      	ldr	r4, [pc, #24]	; (8004adc <thread12+0x1c>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
}

static THD_FUNCTION(thread12, p) {
 8004ac4:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 fcca 	bl	8005460 <chMtxLock>
  test_emit_token(*(char *)p);
 8004acc:	7828      	ldrb	r0, [r5, #0]
 8004ace:	f7fe ff57 	bl	8003980 <test_emit_token>
  chMtxUnlock(&m2);
 8004ad2:	4620      	mov	r0, r4
}
 8004ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static THD_FUNCTION(thread12, p) {

  chMtxLock(&m2);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
 8004ad8:	f000 bc22 	b.w	8005320 <chMtxUnlock>
 8004adc:	2000086c 	.word	0x2000086c

08004ae0 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static THD_FUNCTION(thread11, p) {
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8004ae4:	481b      	ldr	r0, [pc, #108]	; (8004b54 <thread11+0x74>)
 8004ae6:	f000 fcbb 	bl	8005460 <chMtxLock>
  chMtxLock(&m1);
 8004aea:	481b      	ldr	r0, [pc, #108]	; (8004b58 <thread11+0x78>)
 8004aec:	f000 fcb8 	bl	8005460 <chMtxLock>
 8004af0:	2320      	movs	r3, #32
 8004af2:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004af6:	4d19      	ldr	r5, [pc, #100]	; (8004b5c <thread11+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8004af8:	69ab      	ldr	r3, [r5, #24]
 8004afa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 fbe7 	bl	80052d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->p_u.wtobjp = cp;
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <thread11+0x80>)
 8004b04:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004b06:	4618      	mov	r0, r3
 8004b08:	6223      	str	r3, [r4, #32]
 8004b0a:	e003      	b.n	8004b14 <thread11+0x34>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004b0c:	6899      	ldr	r1, [r3, #8]
 8004b0e:	68a2      	ldr	r2, [r4, #8]
 8004b10:	4291      	cmp	r1, r2
 8004b12:	d302      	bcc.n	8004b1a <thread11+0x3a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8004b14:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004b16:	4283      	cmp	r3, r0
 8004b18:	d1f8      	bne.n	8004b0c <thread11+0x2c>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004b1e:	6023      	str	r3, [r4, #0]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8004b20:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004b22:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8004b24:	605c      	str	r4, [r3, #4]
 8004b26:	f000 fb2b 	bl	8005180 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8004b2a:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	d002      	beq.n	8004b38 <thread11+0x58>
    chMtxLockS(mp);
 8004b32:	4630      	mov	r0, r6
 8004b34:	f000 fc2c 	bl	8005390 <chMtxLockS>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8004b3e:	7838      	ldrb	r0, [r7, #0]
 8004b40:	f7fe ff1e 	bl	8003980 <test_emit_token>
  chMtxUnlock(&m1);
 8004b44:	4804      	ldr	r0, [pc, #16]	; (8004b58 <thread11+0x78>)
 8004b46:	f000 fbeb 	bl	8005320 <chMtxUnlock>
  chMtxUnlock(&m2);
 8004b4a:	4802      	ldr	r0, [pc, #8]	; (8004b54 <thread11+0x74>)
}
 8004b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
 8004b50:	f000 bbe6 	b.w	8005320 <chMtxUnlock>
 8004b54:	2000086c 	.word	0x2000086c
 8004b58:	2000085c 	.word	0x2000085c
 8004b5c:	20000b78 	.word	0x20000b78
 8004b60:	2000087c 	.word	0x2000087c
	...

08004b70 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static THD_FUNCTION(thread10, p) {
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8004b74:	4816      	ldr	r0, [pc, #88]	; (8004bd0 <thread10+0x60>)
 8004b76:	f000 fc73 	bl	8005460 <chMtxLock>
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <thread10+0x64>)
 8004b82:	699c      	ldr	r4, [r3, #24]
 8004b84:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 fba2 	bl	80052d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->p_u.wtobjp = cp;
 8004b8c:	4812      	ldr	r0, [pc, #72]	; (8004bd8 <thread10+0x68>)
 8004b8e:	6220      	str	r0, [r4, #32]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004b90:	4603      	mov	r3, r0
 8004b92:	e003      	b.n	8004b9c <thread10+0x2c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	68a2      	ldr	r2, [r4, #8]
 8004b98:	4291      	cmp	r1, r2
 8004b9a:	d302      	bcc.n	8004ba2 <thread10+0x32>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8004b9c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004b9e:	4283      	cmp	r3, r0
 8004ba0:	d1f8      	bne.n	8004b94 <thread10+0x24>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004ba6:	6023      	str	r3, [r4, #0]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8004ba8:	2007      	movs	r0, #7
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004baa:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8004bac:	605c      	str	r4, [r3, #4]
 8004bae:	f000 fae7 	bl	8005180 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fbec 	bl	8005390 <chMtxLockS>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f383 8811 	msr	BASEPRI, r3
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8004bbe:	7830      	ldrb	r0, [r6, #0]
 8004bc0:	f7fe fede 	bl	8003980 <test_emit_token>
  chMtxUnlock(&m1);
 8004bc4:	4802      	ldr	r0, [pc, #8]	; (8004bd0 <thread10+0x60>)
}
 8004bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static THD_FUNCTION(thread10, p) {

  chMtxLock(&m1);
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
 8004bca:	f000 bba9 	b.w	8005320 <chMtxUnlock>
 8004bce:	bf00      	nop
 8004bd0:	2000085c 	.word	0x2000085c
 8004bd4:	20000b78 	.word	0x20000b78
 8004bd8:	2000087c 	.word	0x2000087c
 8004bdc:	00000000 	.word	0x00000000

08004be0 <mtx7_execute.lto_priv.100>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <mtx7_execute.lto_priv.100+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <mtx7_execute.lto_priv.100+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	482c      	ldr	r0, [pc, #176]	; (8004c9c <mtx7_execute.lto_priv.100+0xbc>)
 8004bea:	689d      	ldr	r5, [r3, #8]
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <mtx7_execute.lto_priv.100+0xc0>)
 8004bee:	4c2d      	ldr	r4, [pc, #180]	; (8004ca4 <mtx7_execute.lto_priv.100+0xc4>)

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004bf0:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004bf2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004bf6:	9200      	str	r2, [sp, #0]
 8004bf8:	1c6a      	adds	r2, r5, #1
 8004bfa:	f000 fa81 	bl	8005100 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <mtx7_execute.lto_priv.100+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004c00:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004c02:	1caa      	adds	r2, r5, #2
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c0a:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <mtx7_execute.lto_priv.100+0xc0>)
 8004c0c:	4827      	ldr	r0, [pc, #156]	; (8004cac <mtx7_execute.lto_priv.100+0xcc>)
 8004c0e:	f000 fa77 	bl	8005100 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <mtx7_execute.lto_priv.100+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004c14:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004c16:	1cea      	adds	r2, r5, #3
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <mtx7_execute.lto_priv.100+0xc0>)
 8004c20:	4824      	ldr	r0, [pc, #144]	; (8004cb4 <mtx7_execute.lto_priv.100+0xd4>)
 8004c22:	f000 fa6d 	bl	8005100 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <mtx7_execute.lto_priv.100+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004c28:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004c2a:	1d2a      	adds	r2, r5, #4
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <mtx7_execute.lto_priv.100+0xc0>)
 8004c34:	4821      	ldr	r0, [pc, #132]	; (8004cbc <mtx7_execute.lto_priv.100+0xdc>)
 8004c36:	f000 fa63 	bl	8005100 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004c3a:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <mtx7_execute.lto_priv.100+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004c3c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004c3e:	1d6a      	adds	r2, r5, #5
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <mtx7_execute.lto_priv.100+0xc0>)
 8004c48:	481e      	ldr	r0, [pc, #120]	; (8004cc4 <mtx7_execute.lto_priv.100+0xe4>)
 8004c4a:	f000 fa59 	bl	8005100 <chThdCreateStatic>
 8004c4e:	2320      	movs	r3, #32
 8004c50:	6120      	str	r0, [r4, #16]
 8004c52:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004c56:	4c1c      	ldr	r4, [pc, #112]	; (8004cc8 <mtx7_execute.lto_priv.100+0xe8>)
 8004c58:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004c5a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004c5c:	bf18      	it	ne
 8004c5e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004c62:	d009      	beq.n	8004c78 <mtx7_execute.lto_priv.100+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	6022      	str	r2, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004c68:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004c6a:	6054      	str	r4, [r2, #4]
 8004c6c:	f000 fae8 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->c_queue)) {
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d1f5      	bne.n	8004c64 <mtx7_execute.lto_priv.100+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8004c78:	f000 f9ca 	bl	8005010 <chSchRescheduleS>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8004c82:	f7fe fcdd 	bl	8003640 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004c86:	4911      	ldr	r1, [pc, #68]	; (8004ccc <mtx7_execute.lto_priv.100+0xec>)
 8004c88:	2001      	movs	r0, #1
}
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004c90:	f7fe bd26 	b.w	80036e0 <_test_assert_sequence>
 8004c94:	20000b78 	.word	0x20000b78
 8004c98:	08006a94 	.word	0x08006a94
 8004c9c:	20000cf0 	.word	0x20000cf0
 8004ca0:	08004b71 	.word	0x08004b71
 8004ca4:	20000b08 	.word	0x20000b08
 8004ca8:	08006a88 	.word	0x08006a88
 8004cac:	20000e38 	.word	0x20000e38
 8004cb0:	08006a84 	.word	0x08006a84
 8004cb4:	20000f80 	.word	0x20000f80
 8004cb8:	08006a80 	.word	0x08006a80
 8004cbc:	200010c8 	.word	0x200010c8
 8004cc0:	08006a70 	.word	0x08006a70
 8004cc4:	20001210 	.word	0x20001210
 8004cc8:	2000087c 	.word	0x2000087c
 8004ccc:	08006a90 	.word	0x08006a90

08004cd0 <mtx6_execute.lto_priv.98>:
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8004cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004cd2:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <mtx6_execute.lto_priv.98+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004cd4:	4e2c      	ldr	r6, [pc, #176]	; (8004d88 <mtx6_execute.lto_priv.98+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	4d2c      	ldr	r5, [pc, #176]	; (8004d8c <mtx6_execute.lto_priv.98+0xbc>)
 8004cda:	689f      	ldr	r7, [r3, #8]
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <mtx6_execute.lto_priv.98+0xc0>)
 8004cde:	4c2d      	ldr	r4, [pc, #180]	; (8004d94 <mtx6_execute.lto_priv.98+0xc4>)
  chCondWait(&c1);
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
}

static void mtx6_execute(void) {
 8004ce0:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004ce2:	1c7a      	adds	r2, r7, #1
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	462b      	mov	r3, r5
 8004cea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004cee:	f000 fa07 	bl	8005100 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004cf2:	4929      	ldr	r1, [pc, #164]	; (8004d98 <mtx6_execute.lto_priv.98+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004cf4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004cf6:	1cba      	adds	r2, r7, #2
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	9100      	str	r1, [sp, #0]
 8004cfc:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004d00:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d04:	f000 f9fc 	bl	8005100 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004d08:	4924      	ldr	r1, [pc, #144]	; (8004d9c <mtx6_execute.lto_priv.98+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004d0a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004d0c:	1cfa      	adds	r2, r7, #3
 8004d0e:	462b      	mov	r3, r5
 8004d10:	9100      	str	r1, [sp, #0]
 8004d12:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004d16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d1a:	f000 f9f1 	bl	8005100 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004d1e:	4920      	ldr	r1, [pc, #128]	; (8004da0 <mtx6_execute.lto_priv.98+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004d20:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004d22:	1d3a      	adds	r2, r7, #4
 8004d24:	462b      	mov	r3, r5
 8004d26:	9100      	str	r1, [sp, #0]
 8004d28:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004d2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d30:	f000 f9e6 	bl	8005100 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004d34:	491b      	ldr	r1, [pc, #108]	; (8004da4 <mtx6_execute.lto_priv.98+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004d36:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004d38:	462b      	mov	r3, r5
 8004d3a:	9100      	str	r1, [sp, #0]
 8004d3c:	1d7a      	adds	r2, r7, #5
 8004d3e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004d42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d46:	f000 f9db 	bl	8005100 <chThdCreateStatic>
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	6120      	str	r0, [r4, #16]
 8004d4e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8004d52:	f000 fe8d 	bl	8005a70 <chCondSignalI.constprop.49>
  chCondSignalI(&c1);
 8004d56:	f000 fe8b 	bl	8005a70 <chCondSignalI.constprop.49>
  chCondSignalI(&c1);
 8004d5a:	f000 fe89 	bl	8005a70 <chCondSignalI.constprop.49>
  chCondSignalI(&c1);
 8004d5e:	f000 fe87 	bl	8005a70 <chCondSignalI.constprop.49>
  chCondSignalI(&c1);
 8004d62:	f000 fe85 	bl	8005a70 <chCondSignalI.constprop.49>
  chSchRescheduleS();
 8004d66:	f000 f953 	bl	8005010 <chSchRescheduleS>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8004d70:	f7fe fc66 	bl	8003640 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004d74:	490c      	ldr	r1, [pc, #48]	; (8004da8 <mtx6_execute.lto_priv.98+0xd8>)
 8004d76:	2001      	movs	r0, #1
}
 8004d78:	b003      	add	sp, #12
 8004d7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004d7e:	f7fe bcaf 	b.w	80036e0 <_test_assert_sequence>
 8004d82:	bf00      	nop
 8004d84:	20000b78 	.word	0x20000b78
 8004d88:	20000cf0 	.word	0x20000cf0
 8004d8c:	08004b71 	.word	0x08004b71
 8004d90:	08006a94 	.word	0x08006a94
 8004d94:	20000b08 	.word	0x20000b08
 8004d98:	08006a88 	.word	0x08006a88
 8004d9c:	08006a84 	.word	0x08006a84
 8004da0:	08006a80 	.word	0x08006a80
 8004da4:	08006a70 	.word	0x08006a70
 8004da8:	08006a90 	.word	0x08006a90
 8004dac:	00000000 	.word	0x00000000

08004db0 <wakeup.lto_priv.149>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8004db0:	b410      	push	{r4}
 8004db2:	2320      	movs	r3, #32
 8004db4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8004db8:	7f03      	ldrb	r3, [r0, #28]
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	d80e      	bhi.n	8004ddc <wakeup.lto_priv.149+0x2c>
 8004dbe:	e8df f003 	tbb	[pc, r3]
 8004dc2:	0d27      	.short	0x0d27
 8004dc4:	0408230d 	.word	0x0408230d
 8004dc8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8004dca:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8004dcc:	6893      	ldr	r3, [r2, #8]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8004dd2:	e890 000c 	ldmia.w	r0, {r2, r3}
 8004dd6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8004dd8:	6802      	ldr	r2, [r0, #0]
 8004dda:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8004ddc:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004de0:	2200      	movs	r2, #0
 8004de2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <wakeup.lto_priv.149+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8004de6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004de8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8004dea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	428a      	cmp	r2, r1
 8004df0:	d2fb      	bcs.n	8004dea <wakeup.lto_priv.149+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8004df6:	6003      	str	r3, [r0, #0]
 8004df8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004dfa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8004dfc:	6058      	str	r0, [r3, #4]
 8004dfe:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8004e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e06:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8004e08:	6a03      	ldr	r3, [r0, #32]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e7e5      	b.n	8004ddc <wakeup.lto_priv.149+0x2c>
 8004e10:	2300      	movs	r3, #0
 8004e12:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8004e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	20000b78 	.word	0x20000b78

08004e20 <_idle_thread.lto_priv.66>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8004e20:	e7fe      	b.n	8004e20 <_idle_thread.lto_priv.66>
 8004e22:	bf00      	nop
	...

08004e30 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8004e32:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8004e34:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 8004e36:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 8004e38:	6994      	ldr	r4, [r2, #24]
 8004e3a:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004e3c:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8004e3e:	2500      	movs	r5, #0
 8004e40:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004e42:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004e44:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004e46:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8004e48:	7725      	strb	r5, [r4, #28]
 8004e4a:	e000      	b.n	8004e4e <chSchDoRescheduleAhead+0x1e>
 8004e4c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d8fb      	bhi.n	8004e4c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8004e58:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8004e5a:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8004e5c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8004e5e:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8004e60:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8004e62:	f7fb ba15 	b.w	8000290 <_port_switch>
 8004e66:	bf00      	nop
 8004e68:	20000b78 	.word	0x20000b78
 8004e6c:	00000000 	.word	0x00000000

08004e70 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004e70:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8004e72:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8004e74:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004e76:	4606      	mov	r6, r0
 8004e78:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8004e7a:	d00d      	beq.n	8004e98 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 8004e7c:	68e3      	ldr	r3, [r4, #12]
 8004e7e:	432b      	orrs	r3, r5
 8004e80:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8004e82:	b115      	cbz	r5, 8004e8a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8004e84:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8004e86:	4213      	tst	r3, r2
 8004e88:	d003      	beq.n	8004e92 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8004e8a:	6860      	ldr	r0, [r4, #4]
 8004e8c:	68a1      	ldr	r1, [r4, #8]
 8004e8e:	f7ff f98f 	bl	80041b0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8004e92:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8004e94:	42a6      	cmp	r6, r4
 8004e96:	d1f1      	bne.n	8004e7c <chEvtBroadcastFlagsI+0xc>
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0000      	movs	r0, r0
	...

08004ea0 <chEvtUnregister>:
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	e002      	b.n	8004eb0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 8004eaa:	428b      	cmp	r3, r1
 8004eac:	d007      	beq.n	8004ebe <chEvtUnregister+0x1e>
 8004eae:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	d1f9      	bne.n	8004eaa <chEvtUnregister+0xa>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8004ebe:	680b      	ldr	r3, [r1, #0]
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	0000      	movs	r0, r0
	...

08004ed0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8004ed8:	7f83      	ldrb	r3, [r0, #30]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	7783      	strb	r3, [r0, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8004ee0:	b94b      	cbnz	r3, 8004ef6 <chThdRelease+0x26>
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8004ee2:	b410      	push	{r4}
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8004ee4:	7f04      	ldrb	r4, [r0, #28]
 8004ee6:	2c0f      	cmp	r4, #15
 8004ee8:	d009      	beq.n	8004efe <chThdRelease+0x2e>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8004ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8004efe:	7f44      	ldrb	r4, [r0, #29]
 8004f00:	f004 0403 	and.w	r4, r4, #3
 8004f04:	2c01      	cmp	r4, #1
 8004f06:	d011      	beq.n	8004f2c <chThdRelease+0x5c>
 8004f08:	2c02      	cmp	r4, #2
 8004f0a:	d1ee      	bne.n	8004eea <chThdRelease+0x1a>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8004f0c:	6940      	ldr	r0, [r0, #20]
 8004f0e:	6914      	ldr	r4, [r2, #16]
 8004f10:	6104      	str	r4, [r0, #16]
 8004f12:	6914      	ldr	r4, [r2, #16]
 8004f14:	6160      	str	r0, [r4, #20]
 8004f16:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 8004f1a:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8004f1c:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004f20:	6801      	ldr	r1, [r0, #0]
 8004f22:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8004f24:	6002      	str	r2, [r0, #0]
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	e7e1      	b.n	8004ef0 <chThdRelease+0x20>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8004f2c:	6941      	ldr	r1, [r0, #20]
 8004f2e:	6904      	ldr	r4, [r0, #16]
 8004f30:	610c      	str	r4, [r1, #16]
 8004f32:	6902      	ldr	r2, [r0, #16]
 8004f34:	6151      	str	r1, [r2, #20]
 8004f36:	f383 8811 	msr	BASEPRI, r3
         registry on exit.*/
      break;
    }
  }
  chSysUnlock();
}
 8004f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
#endif
      chSysUnlock();
      chHeapFree(tp);
 8004f3e:	f7fe be3f 	b.w	8003bc0 <chHeapFree>
 8004f42:	bf00      	nop
	...

08004f50 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8004f52:	490f      	ldr	r1, [pc, #60]	; (8004f90 <chTMStopMeasurementX+0x40>)
 8004f54:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004f56:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8004f58:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8004f5a:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8004f5c:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004f5e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8004f60:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8004f68:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8004f6a:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8004f6c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8004f6e:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8004f72:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004f74:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8004f78:	bf88      	it	hi
 8004f7a:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8004f7c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8004f7e:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8004f80:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8004f84:	bf38      	it	cc
 8004f86:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8004f88:	bcf0      	pop	{r4, r5, r6, r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	e0001000 	.word	0xe0001000
 8004f90:	20000b78 	.word	0x20000b78
	...

08004fa0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	2320      	movs	r3, #32
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8004fa8:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <chThdYield+0x50>)
 8004faa:	6810      	ldr	r0, [r2, #0]
 8004fac:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8004fae:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8004fb0:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8004fb2:	428b      	cmp	r3, r1
 8004fb4:	d203      	bcs.n	8004fbe <chThdYield+0x1e>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8004fbe:	6803      	ldr	r3, [r0, #0]
 8004fc0:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004fc2:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004fc4:	2500      	movs	r5, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8004fc6:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8004fc8:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8004fca:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8004fcc:	7725      	strb	r5, [r4, #28]
 8004fce:	e000      	b.n	8004fd2 <chThdYield+0x32>
 8004fd0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	4291      	cmp	r1, r2
 8004fd6:	d9fb      	bls.n	8004fd0 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8004fdc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8004fde:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8004fe0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8004fe2:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8004fe4:	f7fb f954 	bl	8000290 <_port_switch>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	20000b78 	.word	0x20000b78
	...

08005000 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8005000:	f7ff bf16 	b.w	8004e30 <chSchDoRescheduleAhead>
	...

08005010 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <chSchRescheduleS+0x14>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	d800      	bhi.n	8005020 <chSchRescheduleS+0x10>
 800501e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8005020:	f7ff bf06 	b.w	8004e30 <chSchDoRescheduleAhead>
 8005024:	20000b78 	.word	0x20000b78
	...

08005030 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8005030:	b510      	push	{r4, lr}
 8005032:	2320      	movs	r3, #32
 8005034:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currp->p_realprio;
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <chThdSetPriority+0x2c>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio)) {
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	428c      	cmp	r4, r1
 8005042:	d001      	beq.n	8005048 <chThdSetPriority+0x18>
 8005044:	4281      	cmp	r1, r0
 8005046:	d200      	bcs.n	800504a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8005048:	6098      	str	r0, [r3, #8]
  }
  currp->p_realprio = newprio;
 800504a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 800504c:	f7ff ffe0 	bl	8005010 <chSchRescheduleS>
 8005050:	2300      	movs	r3, #0
 8005052:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return oldprio;
}
 8005056:	4620      	mov	r0, r4
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	20000b78 	.word	0x20000b78

08005060 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005062:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8005064:	699e      	ldr	r6, [r3, #24]
 8005066:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005068:	4605      	mov	r5, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800506a:	68b0      	ldr	r0, [r6, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800506c:	6229      	str	r1, [r5, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800506e:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005070:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8005074:	d80b      	bhi.n	800508e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005076:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8005078:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4294      	cmp	r4, r2
 800507e:	d9fb      	bls.n	8005078 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8005084:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8005086:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 8005088:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800508a:	bc70      	pop	{r4, r5, r6}
 800508c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800508e:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005090:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8005092:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8005094:	6891      	ldr	r1, [r2, #8]
 8005096:	4288      	cmp	r0, r1
 8005098:	d9fb      	bls.n	8005092 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800509a:	6850      	ldr	r0, [r2, #4]
 800509c:	6070      	str	r0, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800509e:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80050a0:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80050a2:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 80050a4:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80050a6:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80050ac:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80050ae:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 80050b0:	f7fb b8ee 	b.w	8000290 <_port_switch>
 80050b4:	20000b78 	.word	0x20000b78
	...

080050c0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80050c0:	b508      	push	{r3, lr}
 80050c2:	2320      	movs	r3, #32
 80050c4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= (cnt_t)0) {
 80050c8:	6883      	ldr	r3, [r0, #8]
 80050ca:	3301      	adds	r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	6083      	str	r3, [r0, #8]
 80050d0:	dd03      	ble.n	80050da <chSemSignal+0x1a>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	bd08      	pop	{r3, pc}
 80050da:	4603      	mov	r3, r0
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80050dc:	6800      	ldr	r0, [r0, #0]

  tqp->p_next = tp->p_next;
 80050de:	6802      	ldr	r2, [r0, #0]
 80050e0:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 80050e2:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80050e4:	6053      	str	r3, [r2, #4]
 80050e6:	f7ff ffbb 	bl	8005060 <chSchWakeupS>
 80050ea:	2300      	movs	r3, #0
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	bd08      	pop	{r3, pc}
 80050f2:	bf00      	nop
	...

08005100 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	4699      	mov	r9, r3
 8005106:	4604      	mov	r4, r0
 8005108:	2320      	movs	r3, #32
 800510a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800510e:	4e1a      	ldr	r6, [pc, #104]	; (8005178 <chThdCreateStatic+0x78>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <chThdCreateStatic+0x7c>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005112:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005114:	3924      	subs	r1, #36	; 0x24
 8005116:	eb00 0a01 	add.w	sl, r0, r1
 800511a:	f8c0 a00c 	str.w	sl, [r0, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800511e:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005120:	f840 9001 	str.w	r9, [r0, r1]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8005124:	f04f 0c01 	mov.w	ip, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8005128:	f100 0928 	add.w	r9, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800512c:	9908      	ldr	r1, [sp, #32]
 800512e:	f8ca 1004 	str.w	r1, [sl, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8005132:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005136:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800513a:	f8ca 3020 	str.w	r3, [sl, #32]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800513e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005140:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005142:	6106      	str	r6, [r0, #16]
 8005144:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8005146:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005148:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800514c:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005150:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005152:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8005154:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8005156:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8005158:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800515a:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800515e:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8005162:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8005166:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8005168:	f7ff ff7a 	bl	8005060 <chSchWakeupS>
 800516c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8005170:	4620      	mov	r0, r4
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	bf00      	nop
 8005178:	20000b78 	.word	0x20000b78
 800517c:	080002a1 	.word	0x080002a1

08005180 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8005182:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005184:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8005186:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8005188:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800518a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800518c:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005192:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8005194:	4610      	mov	r0, r2
}
 8005196:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8005198:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800519a:	f7fb b879 	b.w	8000290 <_port_switch>
 800519e:	bf00      	nop
 80051a0:	20000b78 	.word	0x20000b78
	...

080051b0 <chSemWait>:
 80051b0:	2320      	movs	r3, #32
 80051b2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 80051b6:	6883      	ldr	r3, [r0, #8]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	6083      	str	r3, [r0, #8]
 80051be:	db04      	blt.n	80051ca <chSemWait+0x1a>
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->p_u.rdymsg;
  }

  return MSG_OK;
 80051c0:	2000      	movs	r0, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80051c8:	4770      	bx	lr
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80051ca:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    currp->p_u.wtsemp = sp;
 80051cc:	4c08      	ldr	r4, [pc, #32]	; (80051f0 <chSemWait+0x40>)
 80051ce:	69a2      	ldr	r2, [r4, #24]
 80051d0:	6210      	str	r0, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80051d2:	6841      	ldr	r1, [r0, #4]
 80051d4:	6051      	str	r1, [r2, #4]
 80051d6:	4603      	mov	r3, r0
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80051d8:	6010      	str	r0, [r2, #0]
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
 80051da:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 80051dc:	2005      	movs	r0, #5
  tqp->p_prev = tp;
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	f7ff ffce 	bl	8005180 <chSchGoSleepS>

    return currp->p_u.rdymsg;
 80051e4:	69a3      	ldr	r3, [r4, #24]
 80051e6:	6a18      	ldr	r0, [r3, #32]
 80051e8:	2300      	movs	r3, #0
 80051ea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();

  return msg;
}
 80051ee:	bd10      	pop	{r4, pc}
 80051f0:	20000b78 	.word	0x20000b78
	...

08005200 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4604      	mov	r4, r0
 8005204:	2320      	movs	r3, #32
 8005206:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC == TRUE
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800520a:	7f03      	ldrb	r3, [r0, #28]
 800520c:	2b0f      	cmp	r3, #15
 800520e:	d007      	beq.n	8005220 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8005212:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005214:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8005216:	2009      	movs	r0, #9
 8005218:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 800521a:	6263      	str	r3, [r4, #36]	; 0x24
 800521c:	f7ff ffb0 	bl	8005180 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8005220:	6a25      	ldr	r5, [r4, #32]
 8005222:	2300      	movs	r3, #0
 8005224:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
  /* Releasing a lock if it is a dynamic thread.*/
  chThdRelease(tp);
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff fe51 	bl	8004ed0 <chThdRelease>
#endif

  return msg;
}
 800522e:	4628      	mov	r0, r5
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	20000b78 	.word	0x20000b78
	...

08005240 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005240:	2200      	movs	r2, #0
 8005242:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8005246:	b410      	push	{r4}
 8005248:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800524a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800524c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	428a      	cmp	r2, r1
 8005252:	d2fb      	bcs.n	800524c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8005258:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800525a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800525c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800525e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8005260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000b78 	.word	0x20000b78
 800526c:	00000000 	.word	0x00000000

08005270 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8005270:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8005272:	b570      	push	{r4, r5, r6, lr}
 8005274:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005276:	6994      	ldr	r4, [r2, #24]
 8005278:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800527c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800527e:	b1d3      	cbz	r3, 80052b6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 8005280:	2600      	movs	r6, #0
 8005282:	e00a      	b.n	800529a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005284:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8005286:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8005288:	6019      	str	r1, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800528a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800528c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800528e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8005290:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8005292:	f7ff ffd5 	bl	8005240 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8005296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005298:	b14b      	cbz	r3, 80052ae <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800529a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800529c:	68d9      	ldr	r1, [r3, #12]
 800529e:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 80052a0:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        (void) chSchReadyI(tp);
 80052a2:	4610      	mov	r0, r2
  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
      if (chMtxQueueNotEmptyS(mp)) {
 80052a4:	d1ee      	bne.n	8005284 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->m_cnt = (cnt_t)0;
#endif
        mp->m_owner = NULL;
 80052a6:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 80052a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f5      	bne.n	800529a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 80052ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052b0:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 80052b2:	f7ff fead 	bl	8005010 <chSchRescheduleS>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	bf00      	nop
 80052c0:	20000b78 	.word	0x20000b78
	...

080052d0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 80052d2:	b430      	push	{r4, r5}
 80052d4:	4604      	mov	r4, r0
 80052d6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 80052d8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80052de:	42ac      	cmp	r4, r5
 80052e0:	d017      	beq.n	8005312 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 80052e2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80052e4:	b14b      	cbz	r3, 80052fa <chMtxUnlockS+0x2a>
 80052e6:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <chMtxUnlockS+0x24>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 80052ec:	6892      	ldr	r2, [r2, #8]
 80052ee:	4291      	cmp	r1, r2
 80052f0:	bf38      	it	cc
 80052f2:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 80052f4:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f5      	bne.n	80052e6 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80052fa:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 80052fc:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 80052fe:	6081      	str	r1, [r0, #8]
 8005300:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 8005302:	4628      	mov	r0, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005304:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8005306:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8005308:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800530a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->m_owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800530c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      (void) chSchReadyI(tp);
 800530e:	f7ff bf97 	b.w	8005240 <chSchReadyI>
    }
    else {
      mp->m_owner = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	60a3      	str	r3, [r4, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8005316:	bc30      	pop	{r4, r5}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000b78 	.word	0x20000b78

08005320 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8005322:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005324:	699d      	ldr	r5, [r3, #24]
 8005326:	2320      	movs	r3, #32
 8005328:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800532c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800532e:	68c3      	ldr	r3, [r0, #12]
 8005330:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8005332:	42a0      	cmp	r0, r4
 8005334:	d01d      	beq.n	8005372 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8005336:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8005338:	b14b      	cbz	r3, 800534e <chMtxUnlock+0x2e>
 800533a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	4291      	cmp	r1, r2
 8005344:	bf38      	it	cc
 8005346:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8005348:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f5      	bne.n	800533a <chMtxUnlock+0x1a>
 800534e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005350:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8005352:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8005354:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8005356:	4620      	mov	r0, r4
 8005358:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800535a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800535c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800535e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8005360:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8005362:	f7ff ff6d 	bl	8005240 <chSchReadyI>
      chSchRescheduleS();
 8005366:	f7ff fe53 	bl	8005010 <chSchRescheduleS>
 800536a:	2300      	movs	r3, #0
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	6083      	str	r3, [r0, #8]
 8005376:	2300      	movs	r3, #0
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	bf00      	nop
 8005380:	20000b78 	.word	0x20000b78
	...

08005390 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8005392:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8005394:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005396:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8005398:	2a00      	cmp	r2, #0
 800539a:	d055      	beq.n	8005448 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800539c:	68a1      	ldr	r1, [r4, #8]
 800539e:	6893      	ldr	r3, [r2, #8]
 80053a0:	4299      	cmp	r1, r3
 80053a2:	4605      	mov	r5, r0
 80053a4:	d906      	bls.n	80053b4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80053a6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80053a8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d033      	beq.n	8005416 <chMtxLockS+0x86>
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	d01d      	beq.n	80053ee <chMtxLockS+0x5e>
 80053b2:	b19b      	cbz	r3, 80053dc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80053b4:	462b      	mov	r3, r5
 80053b6:	e003      	b.n	80053c0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	68a2      	ldr	r2, [r4, #8]
 80053bc:	4291      	cmp	r1, r2
 80053be:	d302      	bcc.n	80053c6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80053c0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80053c2:	429d      	cmp	r5, r3
 80053c4:	d1f8      	bne.n	80053b8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80053ca:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80053cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80053ce:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80053d0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80053d2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80053d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80053d8:	f7ff bed2 	b.w	8005180 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80053dc:	e892 000a 	ldmia.w	r2, {r1, r3}
 80053e0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80053e2:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80053e4:	4610      	mov	r0, r2
 80053e6:	604b      	str	r3, [r1, #4]
 80053e8:	f7ff ff2a 	bl	8005240 <chSchReadyI>
 80053ec:	e7e2      	b.n	80053b4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80053ee:	e892 0009 	ldmia.w	r2, {r0, r3}
 80053f2:	6018      	str	r0, [r3, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80053f4:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 80053f6:	6810      	ldr	r0, [r2, #0]
 80053f8:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80053fa:	4633      	mov	r3, r6
 80053fc:	e002      	b.n	8005404 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80053fe:	6898      	ldr	r0, [r3, #8]
 8005400:	4288      	cmp	r0, r1
 8005402:	d302      	bcc.n	800540a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8005404:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005406:	429e      	cmp	r6, r3
 8005408:	d1f9      	bne.n	80053fe <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800540e:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8005410:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	e7ce      	b.n	80053b4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8005416:	e892 0009 	ldmia.w	r2, {r0, r3}
 800541a:	6018      	str	r0, [r3, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800541c:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 800541e:	6810      	ldr	r0, [r2, #0]
 8005420:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005422:	4633      	mov	r3, r6
 8005424:	e002      	b.n	800542c <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005426:	6898      	ldr	r0, [r3, #8]
 8005428:	4288      	cmp	r0, r1
 800542a:	d302      	bcc.n	8005432 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800542c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800542e:	429e      	cmp	r6, r3
 8005430:	d1f9      	bne.n	8005426 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005436:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8005438:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800543a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800543c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800543e:	68a1      	ldr	r1, [r4, #8]
 8005440:	6893      	ldr	r3, [r2, #8]
 8005442:	428b      	cmp	r3, r1
 8005444:	d3af      	bcc.n	80053a6 <chMtxLockS+0x16>
 8005446:	e7b5      	b.n	80053b4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8005448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800544a:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800544c:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800544e:	63a0      	str	r0, [r4, #56]	; 0x38
 8005450:	bd70      	pop	{r4, r5, r6, pc}
 8005452:	bf00      	nop
 8005454:	20000b78 	.word	0x20000b78
	...

08005460 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8005460:	b508      	push	{r3, lr}
 8005462:	2320      	movs	r3, #32
 8005464:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8005468:	f7ff ff92 	bl	8005390 <chMtxLockS>
 800546c:	2300      	movs	r3, #0
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	bd08      	pop	{r3, pc}
	...

08005480 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= (cnt_t)0) {
 8005480:	6883      	ldr	r3, [r0, #8]
 8005482:	3301      	adds	r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	6083      	str	r3, [r0, #8]
 8005488:	dd00      	ble.n	800548c <chSemSignalI+0xc>
 800548a:	4770      	bx	lr
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800548c:	6803      	ldr	r3, [r0, #0]

  tqp->p_next = tp->p_next;
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8005492:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005494:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8005496:	4618      	mov	r0, r3

  if (++sp->s_cnt <= (cnt_t)0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8005498:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800549a:	f7ff bed1 	b.w	8005240 <chSchReadyI>
 800549e:	bf00      	nop

080054a0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80054a0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 80054a2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 80054a4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80054a6:	3501      	adds	r5, #1
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	dc0c      	bgt.n	80054c6 <chSemResetI+0x26>
 80054ac:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80054ae:	f06f 0601 	mvn.w	r6, #1

  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 80054b2:	6860      	ldr	r0, [r4, #4]

  tqp->p_prev = tp->p_prev;
 80054b4:	6843      	ldr	r3, [r0, #4]
 80054b6:	6063      	str	r3, [r4, #4]
  tqp->p_prev->p_next = (thread_t *)tqp;
 80054b8:	601c      	str	r4, [r3, #0]
 80054ba:	f7ff fec1 	bl	8005240 <chSchReadyI>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80054be:	3501      	adds	r5, #1
 80054c0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80054c2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= (cnt_t)0) {
 80054c4:	d1f5      	bne.n	80054b2 <chSemResetI+0x12>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
	...

080054d0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	2220      	movs	r2, #32
 80054d4:	4603      	mov	r3, r0
 80054d6:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80054da:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <chThdExit+0x44>)
 80054dc:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80054de:	6a60      	ldr	r0, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 80054e0:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80054e2:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80054e6:	42a8      	cmp	r0, r5
 80054e8:	d006      	beq.n	80054f8 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80054ea:	6803      	ldr	r3, [r0, #0]
 80054ec:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80054ee:	f7ff fea7 	bl	8005240 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80054f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80054f4:	42a8      	cmp	r0, r5
 80054f6:	d1f8      	bne.n	80054ea <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80054f8:	7f63      	ldrb	r3, [r4, #29]
 80054fa:	079b      	lsls	r3, r3, #30
 80054fc:	d104      	bne.n	8005508 <chThdExit+0x38>
    REG_REMOVE(tp);
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	611a      	str	r2, [r3, #16]
 8005504:	6922      	ldr	r2, [r4, #16]
 8005506:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8005508:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800550a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800550e:	f7ff be37 	b.w	8005180 <chSchGoSleepS>
 8005512:	bf00      	nop
 8005514:	20000b78 	.word	0x20000b78
	...

08005520 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <chVTDoResetI+0x6c>)
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	4282      	cmp	r2, r0
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8005526:	b410      	push	{r4}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8005528:	d010      	beq.n	800554c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800552a:	6841      	ldr	r1, [r0, #4]
 800552c:	6802      	ldr	r2, [r0, #0]
 800552e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8005530:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8005532:	331c      	adds	r3, #28
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8005534:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8005536:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8005538:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800553a:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800553c:	d003      	beq.n	8005546 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800553e:	6883      	ldr	r3, [r0, #8]
 8005540:	6891      	ldr	r1, [r2, #8]
 8005542:	440b      	add	r3, r1
 8005544:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554a:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800554c:	4618      	mov	r0, r3
 800554e:	6811      	ldr	r1, [r2, #0]
 8005550:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8005554:	2400      	movs	r4, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8005556:	4281      	cmp	r1, r0
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005558:	6048      	str	r0, [r1, #4]
  vtp->vt_func = NULL;
 800555a:	60d4      	str	r4, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800555c:	d011      	beq.n	8005582 <chVTDoResetI+0x62>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800555e:	6894      	ldr	r4, [r2, #8]
 8005560:	688a      	ldr	r2, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8005562:	6a98      	ldr	r0, [r3, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8005564:	18a3      	adds	r3, r4, r2
 8005566:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800556a:	608b      	str	r3, [r1, #8]
 800556c:	6a61      	ldr	r1, [r4, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800556e:	1a0a      	subs	r2, r1, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8005570:	4293      	cmp	r3, r2
 8005572:	d9e8      	bls.n	8005546 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8005574:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8005576:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8005578:	bf98      	it	ls
 800557a:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 800557c:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800557e:	6363      	str	r3, [r4, #52]	; 0x34
 8005580:	e7e1      	b.n	8005546 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8005582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005586:	60dc      	str	r4, [r3, #12]
 8005588:	e7dd      	b.n	8005546 <chVTDoResetI+0x26>
 800558a:	bf00      	nop
 800558c:	20000b78 	.word	0x20000b78

08005590 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8005592:	4e1d      	ldr	r6, [pc, #116]	; (8005608 <chVTDoSetI+0x78>)
 8005594:	4637      	mov	r7, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005596:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800559a:	f857 4f1c 	ldr.w	r4, [r7, #28]!
 800559e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80055a2:	6103      	str	r3, [r0, #16]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80055a4:	2901      	cmp	r1, #1
 80055a6:	bf98      	it	ls
 80055a8:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80055aa:	42bc      	cmp	r4, r7

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80055ac:	60c2      	str	r2, [r0, #12]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80055ae:	d01b      	beq.n	80055e8 <chVTDoSetI+0x58>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80055b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80055b2:	68a2      	ldr	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80055b4:	4429      	add	r1, r5
 80055b6:	1acb      	subs	r3, r1, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80055b8:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80055ba:	bf38      	it	cc
 80055bc:	f8ce 1034 	strcc.w	r1, [lr, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d904      	bls.n	80055ce <chVTDoSetI+0x3e>
    delta -= p->vt_delta;
    p = p->vt_next;
 80055c4:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80055c6:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80055c8:	68a2      	ldr	r2, [r4, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3fa      	bcc.n	80055c4 <chVTDoSetI+0x34>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80055ce:	6862      	ldr	r2, [r4, #4]
 80055d0:	6042      	str	r2, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80055d2:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80055d4:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 80055d6:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 80055d8:	6083      	str	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80055da:	68a2      	ldr	r2, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80055dc:	f04f 31ff 	mov.w	r1, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	60a3      	str	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80055e4:	6271      	str	r1, [r6, #36]	; 0x24
 80055e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80055e8:	194f      	adds	r7, r1, r5
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 80055ea:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80055ec:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80055ee:	62b5      	str	r5, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 80055f0:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 80055f2:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80055f4:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80055f6:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 80055f8:	6081      	str	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80055fa:	f8ce 7034 	str.w	r7, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80055fe:	f8ce 2010 	str.w	r2, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8005602:	f8ce 300c 	str.w	r3, [lr, #12]
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005608:	20000b78 	.word	0x20000b78
 800560c:	00000000 	.word	0x00000000

08005610 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005610:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8005612:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005614:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8005616:	d012      	beq.n	800563e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8005618:	4c0c      	ldr	r4, [pc, #48]	; (800564c <chSchGoSleepTimeoutS+0x3c>)
 800561a:	4a0d      	ldr	r2, [pc, #52]	; (8005650 <chSchGoSleepTimeoutS+0x40>)
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	4605      	mov	r5, r0
 8005620:	a801      	add	r0, sp, #4
 8005622:	f7ff ffb5 	bl	8005590 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fdaa 	bl	8005180 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	b113      	cbz	r3, 8005636 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8005630:	a801      	add	r0, sp, #4
 8005632:	f7ff ff75 	bl	8005520 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8005636:	69a3      	ldr	r3, [r4, #24]
}
 8005638:	6a18      	ldr	r0, [r3, #32]
 800563a:	b007      	add	sp, #28
 800563c:	bd30      	pop	{r4, r5, pc}
 800563e:	4c03      	ldr	r4, [pc, #12]	; (800564c <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8005640:	f7ff fd9e 	bl	8005180 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8005644:	69a3      	ldr	r3, [r4, #24]
}
 8005646:	6a18      	ldr	r0, [r3, #32]
 8005648:	b007      	add	sp, #28
 800564a:	bd30      	pop	{r4, r5, pc}
 800564c:	20000b78 	.word	0x20000b78
 8005650:	08004db1 	.word	0x08004db1
	...

08005660 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005660:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
 8005662:	6880      	ldr	r0, [r0, #8]
 8005664:	1e42      	subs	r2, r0, #1
 8005666:	2a00      	cmp	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	db01      	blt.n	8005670 <chSemWaitTimeoutS+0x10>
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005670:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= (cnt_t)0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
 8005672:	b161      	cbz	r1, 800568e <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;

      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
 8005674:	4a09      	ldr	r2, [pc, #36]	; (800569c <chSemWaitTimeoutS+0x3c>)
 8005676:	6992      	ldr	r2, [r2, #24]
 8005678:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800567a:	685c      	ldr	r4, [r3, #4]
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800567c:	2005      	movs	r0, #5
 800567e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tp;
 8005682:	6022      	str	r2, [r4, #0]
  tqp->p_prev = tp;
 8005684:	605a      	str	r2, [r3, #4]
  }

  return MSG_OK;
}
 8005686:	f85d 4b04 	ldr.w	r4, [sp], #4
      return MSG_TIMEOUT;
    }
    currp->p_u.wtsemp = sp;
    sem_insert(currp, &sp->s_queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800568a:	f7ff bfc1 	b.w	8005610 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < (cnt_t)0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 800568e:	6098      	str	r0, [r3, #8]

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8005690:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (--sp->s_cnt < (cnt_t)0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;

      return MSG_TIMEOUT;
 8005694:	f04f 30ff 	mov.w	r0, #4294967295

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }

  return MSG_OK;
}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000b78 	.word	0x20000b78

080056a0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80056a0:	b169      	cbz	r1, 80056be <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80056a4:	b410      	push	{r4}
 80056a6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80056a8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80056aa:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80056ac:	2004      	movs	r0, #4
 80056ae:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80056b2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80056b4:	6053      	str	r3, [r2, #4]
}
 80056b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80056ba:	f7ff bfa9 	b.w	8005610 <chSchGoSleepTimeoutS>
}
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	4770      	bx	lr
 80056c4:	20000b78 	.word	0x20000b78
	...

080056d0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80056d0:	b508      	push	{r3, lr}
 80056d2:	4601      	mov	r1, r0
 80056d4:	2320      	movs	r3, #32
 80056d6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80056da:	2008      	movs	r0, #8
 80056dc:	f7ff ff98 	bl	8005610 <chSchGoSleepTimeoutS>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	bd08      	pop	{r3, pc}
	...

080056f0 <chSysRestoreStatusX.part.3.lto_priv.140>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 80056f0:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f2:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80056f6:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 80056fa:	b11c      	cbz	r4, 8005704 <chSysRestoreStatusX.part.3.lto_priv.140+0x14>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80056fc:	2300      	movs	r3, #0
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8005704:	f7ff fc84 	bl	8005010 <chSchRescheduleS>
 8005708:	f384 8811 	msr	BASEPRI, r4
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop

08005710 <chSysGetStatusAndLockX.part.2.lto_priv.141>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005710:	f3ef 8305 	mrs	r3, IPSR
 8005714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8005718:	b91b      	cbnz	r3, 8005722 <chSysGetStatusAndLockX.part.2.lto_priv.141+0x12>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800571a:	2320      	movs	r3, #32
 800571c:	f383 8811 	msr	BASEPRI, r3
    else {
      chSysLock();
    }
  }
  return sts;
}
 8005720:	4770      	bx	lr
 8005722:	2320      	movs	r3, #32
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	0000      	movs	r0, r0
	...

08005730 <chSysIntegrityCheckI>:
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8005730:	07c2      	lsls	r2, r0, #31
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8005732:	b410      	push	{r4}
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8005734:	d512      	bpl.n	800575c <chSysIntegrityCheckI+0x2c>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
 8005736:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <chSysIntegrityCheckI+0xbc>)
 8005738:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800573a:	4291      	cmp	r1, r2
 800573c:	d044      	beq.n	80057c8 <chSysIntegrityCheckI+0x98>
 800573e:	2300      	movs	r3, #0
      n++;
      tp = tp->p_next;
 8005740:	6809      	ldr	r1, [r1, #0]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8005742:	4291      	cmp	r1, r2
      n++;
 8005744:	f103 0301 	add.w	r3, r3, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_queue.p_next;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8005748:	d1fa      	bne.n	8005740 <chSysIntegrityCheckI+0x10>
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 800574a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 800574c:	428c      	cmp	r4, r1
 800574e:	d037      	beq.n	80057c0 <chSysIntegrityCheckI+0x90>
      n--;
      tp = tp->p_prev;
 8005750:	6864      	ldr	r4, [r4, #4]
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8005752:	4294      	cmp	r4, r2
      n--;
 8005754:	f103 33ff 	add.w	r3, r3, #4294967295
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 8005758:	d1fa      	bne.n	8005750 <chSysIntegrityCheckI+0x20>
      n--;
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 800575a:	bb8b      	cbnz	r3, 80057c0 <chSysIntegrityCheckI+0x90>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800575c:	0783      	lsls	r3, r0, #30
 800575e:	d514      	bpl.n	800578a <chSysIntegrityCheckI+0x5a>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
 8005760:	4a22      	ldr	r2, [pc, #136]	; (80057ec <chSysIntegrityCheckI+0xbc>)
 8005762:	4614      	mov	r4, r2
 8005764:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005768:	42a1      	cmp	r1, r4
 800576a:	d033      	beq.n	80057d4 <chSysIntegrityCheckI+0xa4>
 800576c:	2300      	movs	r3, #0
      n++;
      vtp = vtp->vt_next;
 800576e:	6809      	ldr	r1, [r1, #0]
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005770:	42a1      	cmp	r1, r4
      n++;
 8005772:	f103 0301 	add.w	r3, r3, #1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.vt_next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005776:	d1fa      	bne.n	800576e <chSysIntegrityCheckI+0x3e>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 8005778:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800577a:	428a      	cmp	r2, r1
 800577c:	d020      	beq.n	80057c0 <chSysIntegrityCheckI+0x90>
      n--;
      vtp = vtp->vt_prev;
 800577e:	6852      	ldr	r2, [r2, #4]
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005780:	42a2      	cmp	r2, r4
      n--;
 8005782:	f103 33ff 	add.w	r3, r3, #4294967295
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8005786:	d1fa      	bne.n	800577e <chSysIntegrityCheckI+0x4e>
      n--;
      vtp = vtp->vt_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8005788:	b9d3      	cbnz	r3, 80057c0 <chSysIntegrityCheckI+0x90>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800578a:	f010 0004 	ands.w	r0, r0, #4
 800578e:	d014      	beq.n	80057ba <chSysIntegrityCheckI+0x8a>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <chSysIntegrityCheckI+0xbc>)
 8005792:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8005794:	4293      	cmp	r3, r2
 8005796:	d023      	beq.n	80057e0 <chSysIntegrityCheckI+0xb0>
 8005798:	2000      	movs	r0, #0
      n++;
      tp = tp->p_newer;
 800579a:	691b      	ldr	r3, [r3, #16]
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 800579c:	4293      	cmp	r3, r2
      n++;
 800579e:	f100 0001 	add.w	r0, r0, #1
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.r_newer;
    while (tp != (thread_t *)&ch.rlist) {
 80057a2:	d1fa      	bne.n	800579a <chSysIntegrityCheckI+0x6a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80057a4:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80057a6:	4299      	cmp	r1, r3
 80057a8:	d00a      	beq.n	80057c0 <chSysIntegrityCheckI+0x90>
      n--;
      tp = tp->p_older;
 80057aa:	6949      	ldr	r1, [r1, #20]
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80057ac:	4291      	cmp	r1, r2
      n--;
 80057ae:	f100 30ff 	add.w	r0, r0, #4294967295
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80057b2:	d1fa      	bne.n	80057aa <chSysIntegrityCheckI+0x7a>
      n--;
      tp = tp->p_older;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80057b4:	3000      	adds	r0, #0
 80057b6:	bf18      	it	ne
 80057b8:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80057ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057be:	4770      	bx	lr
      tp = tp->p_prev;
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
      return true;
 80057c0:	2001      	movs	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 80057c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c6:	4770      	bx	lr
      n++;
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
 80057c8:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80057ca:	4294      	cmp	r4, r2
  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80057cc:	bf18      	it	ne
 80057ce:	2300      	movne	r3, #0
      tp = tp->p_next;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_queue.p_prev;
    while (tp != (thread_t *)&ch.rlist.r_queue) {
 80057d0:	d1be      	bne.n	8005750 <chSysIntegrityCheckI+0x20>
 80057d2:	e7c3      	b.n	800575c <chSysIntegrityCheckI+0x2c>
      n++;
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
 80057d4:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80057d6:	42a2      	cmp	r2, r4
  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 80057d8:	bf18      	it	ne
 80057da:	2300      	movne	r3, #0
      vtp = vtp->vt_next;
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.vt_prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80057dc:	d1cf      	bne.n	800577e <chSysIntegrityCheckI+0x4e>
 80057de:	e7d4      	b.n	800578a <chSysIntegrityCheckI+0x5a>
      n++;
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
 80057e0:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80057e2:	4299      	cmp	r1, r3
#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 80057e4:	f04f 0000 	mov.w	r0, #0
      tp = tp->p_newer;
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.r_older;
    while (tp != (thread_t *)&ch.rlist) {
 80057e8:	d1df      	bne.n	80057aa <chSysIntegrityCheckI+0x7a>
 80057ea:	e7e6      	b.n	80057ba <chSysIntegrityCheckI+0x8a>
 80057ec:	20000b78 	.word	0x20000b78

080057f0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80057f0:	e7fe      	b.n	80057f0 <BusFault_Handler>
 80057f2:	bf00      	nop
	...

08005800 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005800:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8005802:	4e11      	ldr	r6, [pc, #68]	; (8005848 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005804:	2500      	movs	r5, #0
 8005806:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800580a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800580e:	42a3      	cmp	r3, r4
 8005810:	d20d      	bcs.n	800582e <__init_ram_areas+0x2e>
 8005812:	3904      	subs	r1, #4
 8005814:	461a      	mov	r2, r3
      *p = *tp;
 8005816:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800581a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800581e:	42a2      	cmp	r2, r4
 8005820:	d3f9      	bcc.n	8005816 <__init_ram_areas+0x16>
 8005822:	43da      	mvns	r2, r3
 8005824:	4414      	add	r4, r2
 8005826:	f024 0403 	bic.w	r4, r4, #3
 800582a:	3404      	adds	r4, #4
 800582c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800582e:	68f2      	ldr	r2, [r6, #12]
 8005830:	4293      	cmp	r3, r2
 8005832:	d203      	bcs.n	800583c <__init_ram_areas+0x3c>
      *p = 0;
 8005834:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8005838:	4293      	cmp	r3, r2
 800583a:	d3fb      	bcc.n	8005834 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800583c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800583e:	42be      	cmp	r6, r7
 8005840:	d3e3      	bcc.n	800580a <__init_ram_areas+0xa>
#endif
}
 8005842:	bcf0      	pop	{r4, r5, r6, r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	08006ad0 	.word	0x08006ad0
 800584c:	00000000 	.word	0x00000000

08005850 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8005850:	e7fe      	b.n	8005850 <__default_exit>
 8005852:	bf00      	nop
	...

08005860 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
	...

08005870 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
	...

08005880 <chTMStartMeasurementX.constprop.62>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <chTMStartMeasurementX.constprop.62+0x8>)
 8005882:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005884:	6083      	str	r3, [r0, #8]
 8005886:	4770      	bx	lr
 8005888:	e0001000 	.word	0xe0001000
 800588c:	00000000 	.word	0x00000000

08005890 <chThdCreateFromHeap.constprop.59>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4607      	mov	r7, r0
 8005896:	460d      	mov	r5, r1
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8005898:	481e      	ldr	r0, [pc, #120]	; (8005914 <chThdCreateFromHeap.constprop.59+0x84>)
 800589a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800589e:	f7fe f9df 	bl	8003c60 <chHeapAlloc>
  if (wsp == NULL) {
 80058a2:	4604      	mov	r4, r0
 80058a4:	b398      	cbz	r0, 800590e <chThdCreateFromHeap.constprop.59+0x7e>
 80058a6:	2320      	movs	r3, #32
 80058a8:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <chThdCreateFromHeap.constprop.59+0x88>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80058ae:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058b2:	f8d2 c014 	ldr.w	ip, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80058b6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800591c <chThdCreateFromHeap.constprop.59+0x8c>
 80058ba:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005920 <chThdCreateFromHeap.constprop.59+0x90>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80058be:	6087      	str	r7, [r0, #8]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80058c0:	2500      	movs	r5, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80058c2:	f04f 0e01 	mov.w	lr, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80058c6:	f100 0328 	add.w	r3, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80058ca:	f500 7a92 	add.w	sl, r0, #292	; 0x124
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80058ce:	f100 0624 	add.w	r6, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80058d2:	2102      	movs	r1, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80058d4:	f8c0 a00c 	str.w	sl, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80058d8:	7701      	strb	r1, [r0, #28]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058da:	6102      	str	r2, [r0, #16]
 80058dc:	f8c0 c014 	str.w	ip, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80058e0:	63c7      	str	r7, [r0, #60]	; 0x3c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80058e2:	f8c0 9124 	str.w	r9, [r0, #292]	; 0x124
 80058e6:	f8c0 8144 	str.w	r8, [r0, #324]	; 0x144
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80058ea:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80058ec:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80058ee:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80058f0:	f880 e01e 	strb.w	lr, [r0, #30]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 80058f4:	4629      	mov	r1, r5
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80058f6:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80058fa:	6246      	str	r6, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 80058fc:	f880 e01d 	strb.w	lr, [r0, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8005900:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8005902:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005904:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8005906:	f7ff fbab 	bl	8005060 <chSchWakeupS>
 800590a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800590e:	4620      	mov	r0, r4
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	20001358 	.word	0x20001358
 8005918:	20000b78 	.word	0x20000b78
 800591c:	08001fe1 	.word	0x08001fe1
 8005920:	080002a1 	.word	0x080002a1
	...

08005930 <chThdCreateFromMemoryPool.constprop.58>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005934:	4e21      	ldr	r6, [pc, #132]	; (80059bc <chThdCreateFromMemoryPool.constprop.58+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005936:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005938:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 800593a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 800593c:	f7fe f900 	bl	8003b40 <chPoolAlloc>
  if (wsp == NULL) {
 8005940:	4604      	mov	r4, r0
 8005942:	2800      	cmp	r0, #0
 8005944:	d037      	beq.n	80059b6 <chThdCreateFromMemoryPool.constprop.58+0x86>
 8005946:	2320      	movs	r3, #32
 8005948:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800594c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <chThdCreateFromMemoryPool.constprop.58+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005950:	4d1c      	ldr	r5, [pc, #112]	; (80059c4 <chThdCreateFromMemoryPool.constprop.58+0x94>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005952:	f8d2 c014 	ldr.w	ip, [r2, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005956:	491c      	ldr	r1, [pc, #112]	; (80059c8 <chThdCreateFromMemoryPool.constprop.58+0x98>)
 8005958:	3b24      	subs	r3, #36	; 0x24
 800595a:	eb00 0b03 	add.w	fp, r0, r3
 800595e:	f8c0 b00c 	str.w	fp, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005962:	f04f 0e02 	mov.w	lr, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005966:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8005968:	f100 0724 	add.w	r7, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800596c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800596e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8005972:	f04f 0a01 	mov.w	sl, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005976:	f8cb 9004 	str.w	r9, [fp, #4]
 800597a:	f8cb 1020 	str.w	r1, [fp, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800597e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005982:	6102      	str	r2, [r0, #16]
 8005984:	f8c0 c014 	str.w	ip, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8005988:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800598c:	f880 a01e 	strb.w	sl, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005990:	f880 e01c 	strb.w	lr, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005994:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8005996:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8005998:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800599a:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800599c:	f8cc 0010 	str.w	r0, [ip, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80059a0:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MPOOL;
 80059a2:	f880 e01d 	strb.w	lr, [r0, #29]
  tp->p_mpool = mp;
 80059a6:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80059a8:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 80059aa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80059ac:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 80059ae:	f7ff fb57 	bl	8005060 <chSchWakeupS>
 80059b2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 80059b6:	4620      	mov	r0, r4
 80059b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	20000ccc 	.word	0x20000ccc
 80059c0:	20000b78 	.word	0x20000b78
 80059c4:	08001fe1 	.word	0x08001fe1
 80059c8:	080002a1 	.word	0x080002a1
 80059cc:	00000000 	.word	0x00000000

080059d0 <chSemSignalWait.constprop.54>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80059d0:	b510      	push	{r4, lr}
 80059d2:	2320      	movs	r3, #32
 80059d4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= (cnt_t)0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
 80059d8:	4c15      	ldr	r4, [pc, #84]	; (8005a30 <chSemSignalWait.constprop.54+0x60>)
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	3301      	adds	r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	dd1b      	ble.n	8005a1c <chSemSignalWait.constprop.54+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <chSemSignalWait.constprop.54+0x60>)
 80059ec:	db06      	blt.n	80059fc <chSemSignalWait.constprop.54+0x2c>
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80059ee:	f7ff fb0f 	bl	8005010 <chSchRescheduleS>
    msg = MSG_OK;
 80059f2:	2000      	movs	r0, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 80059fa:	bd10      	pop	{r4, pc}
  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
 80059fc:	490d      	ldr	r1, [pc, #52]	; (8005a34 <chSemSignalWait.constprop.54+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80059fe:	6853      	ldr	r3, [r2, #4]
 8005a00:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8005a02:	2005      	movs	r0, #5
 8005a04:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tp;
 8005a08:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  }
  if (--spw->s_cnt < (cnt_t)0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtsemp = spw;
 8005a0a:	6222      	str	r2, [r4, #32]
  tqp->p_prev = tp;
 8005a0c:	6054      	str	r4, [r2, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8005a0e:	f7ff fbb7 	bl	8005180 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8005a12:	6a20      	ldr	r0, [r4, #32]
 8005a14:	2300      	movs	r3, #0
 8005a16:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8005a1a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005a1c:	6820      	ldr	r0, [r4, #0]

  tqp->p_next = tp->p_next;
 8005a1e:	6803      	ldr	r3, [r0, #0]
 8005a20:	6023      	str	r3, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005a22:	605c      	str	r4, [r3, #4]
              ((spw->s_cnt < (cnt_t)0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= (cnt_t)0) {
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8005a24:	f7ff fc0c 	bl	8005240 <chSchReadyI>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	6202      	str	r2, [r0, #32]
 8005a2e:	e7d9      	b.n	80059e4 <chSemSignalWait.constprop.54+0x14>
 8005a30:	200008ac 	.word	0x200008ac
 8005a34:	20000b78 	.word	0x20000b78
	...

08005a40 <chCondSignal.constprop.50>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8005a40:	b508      	push	{r3, lr}
 8005a42:	2320      	movs	r3, #32
 8005a44:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <chCondSignal.constprop.50+0x24>)
 8005a4a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue)) {
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	d005      	beq.n	8005a5c <chCondSignal.constprop.50+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005a50:	6802      	ldr	r2, [r0, #0]
 8005a52:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005a54:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8005a56:	2100      	movs	r1, #0
 8005a58:	f7ff fb02 	bl	8005060 <chSchWakeupS>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	bd08      	pop	{r3, pc}
 8005a64:	2000087c 	.word	0x2000087c
	...

08005a70 <chCondSignalI.constprop.49>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <chCondSignalI.constprop.49+0x20>)
 8005a72:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d00a      	beq.n	8005a8e <chCondSignalI.constprop.49+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005a78:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8005a7a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8005a7c:	2400      	movs	r4, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	6214      	str	r4, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005a82:	6019      	str	r1, [r3, #0]
    (void) chSchReadyI(tp);
 8005a84:	4610      	mov	r0, r2
  }
}
 8005a86:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
 8005a8a:	f7ff bbd9 	b.w	8005240 <chSchReadyI>
 8005a8e:	4770      	bx	lr
 8005a90:	2000087c 	.word	0x2000087c
	...

08005aa0 <chEvtGetAndClearEvents.constprop.41>:
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <chEvtGetAndClearEvents.constprop.41+0x18>)
 8005aa8:	699a      	ldr	r2, [r3, #24]
  currp->p_epending &= ~events;
 8005aaa:	2300      	movs	r3, #0
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();
  m = currp->p_epending & events;
 8005aac:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8005aae:	6353      	str	r3, [r2, #52]	; 0x34
 8005ab0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000b78 	.word	0x20000b78
 8005abc:	00000000 	.word	0x00000000

08005ac0 <chEvtWaitOne.constprop.37>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <chEvtWaitOne.constprop.37+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8005ac2:	b510      	push	{r4, lr}
 8005ac4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005ac6:	6994      	ldr	r4, [r2, #24]
 8005ac8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005ace:	b933      	cbnz	r3, 8005ade <chEvtWaitOne.constprop.37+0x1e>
    ctp->p_u.ewmask = events;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005ad6:	200a      	movs	r0, #10
 8005ad8:	f7ff fb52 	bl	8005180 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8005adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8005ade:	4258      	negs	r0, r3
 8005ae0:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8005ae2:	ea23 0300 	bic.w	r3, r3, r0
 8005ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005aee:	bd10      	pop	{r4, pc}
 8005af0:	20000b78 	.word	0x20000b78
	...

08005b00 <chEvtWaitAny.constprop.36>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8005b00:	4a0b      	ldr	r2, [pc, #44]	; (8005b30 <chEvtWaitAny.constprop.36+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8005b02:	b510      	push	{r4, lr}
 8005b04:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005b06:	6994      	ldr	r4, [r2, #24]
 8005b08:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 8005b0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005b0e:	b930      	cbnz	r0, 8005b1e <chEvtWaitAny.constprop.36+0x1e>
    ctp->p_u.ewmask = events;
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005b14:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
  if (m == (eventmask_t)0) {
    ctp->p_u.ewmask = events;
 8005b16:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005b18:	f7ff fb32 	bl	8005180 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8005b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8005b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b20:	ea23 0300 	bic.w	r3, r3, r0
 8005b24:	6363      	str	r3, [r4, #52]	; 0x34
 8005b26:	2300      	movs	r3, #0
 8005b28:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000b78 	.word	0x20000b78
	...

08005b40 <chMBPost.constprop.22>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	2320      	movs	r3, #32
 8005b44:	4606      	mov	r6, r0
 8005b46:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8005b4a:	4c0d      	ldr	r4, [pc, #52]	; (8005b80 <chMBPost.constprop.22+0x40>)
 8005b4c:	f104 001c 	add.w	r0, r4, #28
 8005b50:	f7ff fd86 	bl	8005660 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005b54:	4605      	mov	r5, r0
 8005b56:	b968      	cbnz	r0, 8005b74 <chMBPost.constprop.22+0x34>
    *mbp->mb_wrptr++ = msg;
 8005b58:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8005b5a:	6861      	ldr	r1, [r4, #4]
      mbp->mb_wrptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_fullsem);
 8005b5c:	4809      	ldr	r0, [pc, #36]	; (8005b84 <chMBPost.constprop.22+0x44>)
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005b5e:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top) {
 8005b60:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005b62:	60a3      	str	r3, [r4, #8]
 8005b64:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top) {
      mbp->mb_wrptr = mbp->mb_buffer;
 8005b66:	bf24      	itt	cs
 8005b68:	6823      	ldrcs	r3, [r4, #0]
 8005b6a:	60a3      	strcs	r3, [r4, #8]
    }
    chSemSignalI(&mbp->mb_fullsem);
 8005b6c:	f7ff fc88 	bl	8005480 <chSemSignalI>
    chSchRescheduleS();
 8005b70:	f7ff fa4e 	bl	8005010 <chSchRescheduleS>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000884 	.word	0x20000884
 8005b84:	20000894 	.word	0x20000894
	...

08005b90 <chMBPostI.constprop.21>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <chMBPostI.constprop.21+0x34>)
 8005b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	dd10      	ble.n	8005bbc <chMBPostI.constprop.21+0x2c>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8005b9a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8005b9c:	685d      	ldr	r5, [r3, #4]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8005b9e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8005ba0:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top) {
 8005ba2:	42a9      	cmp	r1, r5
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8005ba6:	6099      	str	r1, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8005ba8:	bf28      	it	cs
 8005baa:	681a      	ldrcs	r2, [r3, #0]
  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8005bac:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);
 8005bae:	4806      	ldr	r0, [pc, #24]	; (8005bc8 <chMBPostI.constprop.21+0x38>)
  }

  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top) {
     mbp->mb_wrptr = mbp->mb_buffer;
 8005bb0:	bf28      	it	cs
 8005bb2:	609a      	strcs	r2, [r3, #8]
  }
  chSemSignalI(&mbp->mb_fullsem);
 8005bb4:	f7ff fc64 	bl	8005480 <chSemSignalI>

  return MSG_OK;
 8005bb8:	2000      	movs	r0, #0
 8005bba:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
     mbp->mb_wrptr = mbp->mb_buffer;
  }
  chSemSignalI(&mbp->mb_fullsem);

  return MSG_OK;
}
 8005bc0:	bd38      	pop	{r3, r4, r5, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000884 	.word	0x20000884
 8005bc8:	20000894 	.word	0x20000894
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <chMBPostAhead.constprop.20>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
 8005bda:	4c0e      	ldr	r4, [pc, #56]	; (8005c14 <chMBPostAhead.constprop.20+0x44>)
 8005bdc:	f104 001c 	add.w	r0, r4, #28
 8005be0:	f7ff fd3e 	bl	8005660 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005be4:	4605      	mov	r5, r0
 8005be6:	b958      	cbnz	r0, 8005c00 <chMBPostAhead.constprop.20+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8005be8:	68e3      	ldr	r3, [r4, #12]
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	60e3      	str	r3, [r4, #12]
 8005bf2:	d30a      	bcc.n	8005c0a <chMBPostAhead.constprop.20+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    }
    *mbp->mb_rdptr = msg;
 8005bf4:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8005bf6:	4808      	ldr	r0, [pc, #32]	; (8005c18 <chMBPostAhead.constprop.20+0x48>)
 8005bf8:	f7ff fc42 	bl	8005480 <chSemSignalI>
    chSchRescheduleS();
 8005bfc:	f7ff fa08 	bl	8005010 <chSchRescheduleS>
 8005c00:	2300      	movs	r3, #0
 8005c02:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005c06:	4628      	mov	r0, r5
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, timeout);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer) {
      mbp->mb_rdptr = mbp->mb_top - 1;
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60e3      	str	r3, [r4, #12]
 8005c10:	e7f0      	b.n	8005bf4 <chMBPostAhead.constprop.20+0x24>
 8005c12:	bf00      	nop
 8005c14:	20000884 	.word	0x20000884
 8005c18:	20000894 	.word	0x20000894
 8005c1c:	00000000 	.word	0x00000000

08005c20 <chMBPostAheadI.constprop.19>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8005c20:	4a0c      	ldr	r2, [pc, #48]	; (8005c54 <chMBPostAheadI.constprop.19+0x34>)
 8005c22:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
 8005c24:	2900      	cmp	r1, #0
 8005c26:	dd11      	ble.n	8005c4c <chMBPostAheadI.constprop.19+0x2c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8005c28:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8005c2a:	b510      	push	{r4, lr}

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer) {
 8005c2c:	6814      	ldr	r4, [r2, #0]
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	3901      	subs	r1, #1
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	6251      	str	r1, [r2, #36]	; 0x24
 8005c36:	60d3      	str	r3, [r2, #12]
 8005c38:	d202      	bcs.n	8005c40 <chMBPostAheadI.constprop.19+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8005c3a:	6853      	ldr	r3, [r2, #4]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	60d3      	str	r3, [r2, #12]
  }
  *mbp->mb_rdptr = msg;
 8005c40:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8005c42:	4805      	ldr	r0, [pc, #20]	; (8005c58 <chMBPostAheadI.constprop.19+0x38>)
 8005c44:	f7ff fc1c 	bl	8005480 <chSemSignalI>

  return MSG_OK;
 8005c48:	2000      	movs	r0, #0
 8005c4a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000884 	.word	0x20000884
 8005c58:	20000894 	.word	0x20000894
 8005c5c:	00000000 	.word	0x00000000

08005c60 <chMBFetch.constprop.18>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	2320      	movs	r3, #32
 8005c64:	4606      	mov	r6, r0
 8005c66:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
 8005c6a:	4c0d      	ldr	r4, [pc, #52]	; (8005ca0 <chMBFetch.constprop.18+0x40>)
 8005c6c:	f104 0010 	add.w	r0, r4, #16
 8005c70:	f7ff fcf6 	bl	8005660 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005c74:	4605      	mov	r5, r0
 8005c76:	b970      	cbnz	r0, 8005c96 <chMBFetch.constprop.18+0x36>
    *msgp = *mbp->mb_rdptr++;
 8005c78:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8005c7a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005c7c:	6819      	ldr	r1, [r3, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
    }
    chSemSignalI(&mbp->mb_emptysem);
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <chMBFetch.constprop.18+0x44>)
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005c80:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top) {
 8005c82:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, timeout);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005c84:	60e3      	str	r3, [r4, #12]
 8005c86:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top) {
      mbp->mb_rdptr = mbp->mb_buffer;
 8005c88:	bf24      	itt	cs
 8005c8a:	6823      	ldrcs	r3, [r4, #0]
 8005c8c:	60e3      	strcs	r3, [r4, #12]
    }
    chSemSignalI(&mbp->mb_emptysem);
 8005c8e:	f7ff fbf7 	bl	8005480 <chSemSignalI>
    chSchRescheduleS();
 8005c92:	f7ff f9bd 	bl	8005010 <chSchRescheduleS>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, timeout);
  chSysUnlock();

  return rdymsg;
}
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	20000884 	.word	0x20000884
 8005ca4:	200008a0 	.word	0x200008a0
	...

08005cb0 <chMBFetchI.constprop.17>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <chMBFetchI.constprop.17+0x34>)
 8005cb2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	dd12      	ble.n	8005cde <chMBFetchI.constprop.17+0x2e>
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	1e51      	subs	r1, r2, #1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	6199      	str	r1, [r3, #24]
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8005cc0:	6859      	ldr	r1, [r3, #4]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8005cc2:	6814      	ldr	r4, [r2, #0]
 8005cc4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top) {
 8005cc6:	428a      	cmp	r2, r1

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8005ccc:	bf28      	it	cs
 8005cce:	681a      	ldrcs	r2, [r3, #0]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <chMBFetchI.constprop.17+0x38>)
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top) {
    mbp->mb_rdptr = mbp->mb_buffer;
 8005cd2:	bf28      	it	cs
 8005cd4:	60da      	strcs	r2, [r3, #12]
  }
  chSemSignalI(&mbp->mb_emptysem);
 8005cd6:	f7ff fbd3 	bl	8005480 <chSemSignalI>

  return MSG_OK;
 8005cda:	2000      	movs	r0, #0
 8005cdc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= (cnt_t)0) {
    return MSG_TIMEOUT;
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	4770      	bx	lr
 8005ce4:	20000884 	.word	0x20000884
 8005ce8:	200008a0 	.word	0x200008a0
 8005cec:	00000000 	.word	0x00000000

08005cf0 <_pal_lld_setgroupmode.constprop.6>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8005cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <_pal_lld_setgroupmode.constprop.6+0xb4>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8005cf6:	2200      	movs	r2, #0
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8005cf8:	2502      	movs	r5, #2
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8005cfa:	f04f 0c07 	mov.w	ip, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8005cfe:	f04f 0e0f 	mov.w	lr, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8005d02:	2701      	movs	r7, #1
      m2 = 3 << (bit * 2);
 8005d04:	2603      	movs	r6, #3
 8005d06:	e009      	b.n	8005d1c <_pal_lld_setgroupmode.constprop.6+0x2c>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8005d08:	6a19      	ldr	r1, [r3, #32]
 8005d0a:	ea21 0109 	bic.w	r1, r1, r9
 8005d0e:	ea41 0108 	orr.w	r1, r1, r8
 8005d12:	6219      	str	r1, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8005d14:	0840      	lsrs	r0, r0, #1
 8005d16:	d02d      	beq.n	8005d74 <_pal_lld_setgroupmode.constprop.6+0x84>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8005d18:	00ad      	lsls	r5, r5, #2
    bit++;
 8005d1a:	3201      	adds	r2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8005d1c:	07c1      	lsls	r1, r0, #31
 8005d1e:	d5f9      	bpl.n	8005d14 <_pal_lld_setgroupmode.constprop.6+0x24>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8005d20:	6859      	ldr	r1, [r3, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8005d22:	fa07 f402 	lsl.w	r4, r7, r2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8005d26:	ea21 0104 	bic.w	r1, r1, r4
 8005d2a:	6059      	str	r1, [r3, #4]
 8005d2c:	0054      	lsls	r4, r2, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8005d2e:	6899      	ldr	r1, [r3, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8005d30:	fa06 f404 	lsl.w	r4, r6, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8005d34:	43e4      	mvns	r4, r4
 8005d36:	4021      	ands	r1, r4
 8005d38:	6099      	str	r1, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8005d3a:	f8d3 800c 	ldr.w	r8, [r3, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8005d3e:	f002 0107 	and.w	r1, r2, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8005d42:	ea04 0808 	and.w	r8, r4, r8
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8005d46:	0089      	lsls	r1, r1, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8005d48:	2d02      	cmp	r5, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8005d4a:	f8c3 800c 	str.w	r8, [r3, #12]
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8005d4e:	fa0e f901 	lsl.w	r9, lr, r1
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8005d52:	fa0c f801 	lsl.w	r8, ip, r1
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8005d56:	d00f      	beq.n	8005d78 <_pal_lld_setgroupmode.constprop.6+0x88>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	400c      	ands	r4, r1
 8005d5c:	432c      	orrs	r4, r5
        if (bit < 8)
 8005d5e:	2a07      	cmp	r2, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8005d60:	601c      	str	r4, [r3, #0]
        if (bit < 8)
 8005d62:	d9d1      	bls.n	8005d08 <_pal_lld_setgroupmode.constprop.6+0x18>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8005d64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d66:	ea21 0109 	bic.w	r1, r1, r9
 8005d6a:	ea41 0108 	orr.w	r1, r1, r8
      }
    }
    mask >>= 1;
    if (!mask)
 8005d6e:	0840      	lsrs	r0, r0, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8005d70:	6259      	str	r1, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8005d72:	d1d1      	bne.n	8005d18 <_pal_lld_setgroupmode.constprop.6+0x28>
 8005d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8005d78:	2a07      	cmp	r2, #7
 8005d7a:	d80b      	bhi.n	8005d94 <_pal_lld_setgroupmode.constprop.6+0xa4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8005d7c:	6a19      	ldr	r1, [r3, #32]
 8005d7e:	ea21 0109 	bic.w	r1, r1, r9
 8005d82:	ea41 0108 	orr.w	r1, r1, r8
 8005d86:	6219      	str	r1, [r3, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	400c      	ands	r4, r1
 8005d8c:	f044 0402 	orr.w	r4, r4, #2
 8005d90:	601c      	str	r4, [r3, #0]
 8005d92:	e7bf      	b.n	8005d14 <_pal_lld_setgroupmode.constprop.6+0x24>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8005d94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d96:	ea21 0109 	bic.w	r1, r1, r9
 8005d9a:	ea41 0108 	orr.w	r1, r1, r8
 8005d9e:	6259      	str	r1, [r3, #36]	; 0x24
 8005da0:	e7f2      	b.n	8005d88 <_pal_lld_setgroupmode.constprop.6+0x98>
 8005da2:	bf00      	nop
 8005da4:	40020000 	.word	0x40020000
	...

08005db0 <test_start_timer.constprop.2>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8005db0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <test_start_timer.constprop.2+0x30>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	2320      	movs	r3, #32
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	4809      	ldr	r0, [pc, #36]	; (8005de4 <test_start_timer.constprop.2+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8005dc0:	68c3      	ldr	r3, [r0, #12]
 8005dc2:	b10b      	cbz	r3, 8005dc8 <test_start_timer.constprop.2+0x18>
    chVTDoResetI(vtp);
 8005dc4:	f7ff fbac 	bl	8005520 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8005dc8:	4806      	ldr	r0, [pc, #24]	; (8005de4 <test_start_timer.constprop.2+0x34>)
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <test_start_timer.constprop.2+0x38>)
 8005dcc:	f242 7110 	movw	r1, #10000	; 0x2710
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f7ff fbdd 	bl	8005590 <chVTDoSetI>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	bd08      	pop	{r3, pc}
 8005dde:	bf00      	nop
 8005de0:	20000cc8 	.word	0x20000cc8
 8005de4:	20000cd8 	.word	0x20000cd8
 8005de8:	08003471 	.word	0x08003471
 8005dec:	00000000 	.word	0x00000000

08005df0 <testmtx4>:
 8005df0:	080068b0 080027f1 00000000 08002951     .h...'......Q)..

08005e00 <testmtx5>:
 8005e00:	080068a0 080027e1 00000000 08002851     .h...'......Q(..

08005e10 <testmtx6>:
 8005e10:	08006888 080027c1 00000000 08004cd1     .h...'.......L..

08005e20 <testmtx7>:
 8005e20:	08006870 08004251 00000000 08004be1     ph..QB.......K..

08005e30 <testmtx8>:
 8005e30:	0800685c 08004221 00000000 08004a31     \h..!B......1J..

08005e40 <patternmsg>:
 8005e40:	08006100 00000000 00000000 00000000     .a..............

08005e50 <testbmk11>:
 8005e50:	0800657c 080002d1 00000000 08000491     |e..............

08005e60 <ch_debug>:
 8005e60:	6e69616d 18431600 08440404 1814100c     main..C...D.....
 8005e70:	1e1d1c00 00000000 00000000 00000000     ................

08005e80 <testbmk13>:
 8005e80:	08006540 00000000 00000000 08000331     @e..........1...

08005e90 <testevt2>:
 8005e90:	080067ec 08002471 00000000 08002481     .g..q$.......$..

08005ea0 <patterndyn>:
 8005ea0:	08006090 080060a0 080060b0 00000000     .`...`...`......

08005eb0 <testsys1>:
 8005eb0:	080069f4 00000000 00000000 080015c1     .i..............

08005ec0 <vmt>:
 8005ec0:	08003d91 08003f01 08003e61 08003f71     .=...?..a>..q?..
 8005ed0:	08003e51 08003f61 08003d81 08003ef1     Q>..a?...=...>..

08005ee0 <testsem1>:
 8005ee0:	08006948 08002841 00000000 08003111     Hi..A(.......1..

08005ef0 <testsem2>:
 8005ef0:	08006934 08002831 00000000 08002f91     4i..1(......./..

08005f00 <testsem3>:
 8005f00:	08006914 08002821 00000000 08002ee1     .i..!(..........

08005f10 <testsem4>:
 8005f10:	080068f0 00000000 00000000 08002d81     .h...........-..

08005f20 <testbmk1>:
 8005f20:	080066c8 00000000 00000000 080014c1     .f..............

08005f30 <testsys2>:
 8005f30:	080069d8 00000000 00000000 08001061     .i..........a...

08005f40 <testsys3>:
 8005f40:	080069c4 00000000 00000000 08001531     .i..........1...

08005f50 <testbmk8>:
 8005f50:	080065e8 00000000 00000000 08000631     .e..........1...

08005f60 <testbmk10>:
 8005f60:	080065a0 00000000 00000000 08000501     .e..............

08005f70 <testbmk7>:
 8005f70:	08006614 08001051 00000000 08000741     .f..Q.......A...

08005f80 <testbmk12>:
 8005f80:	0800655c 080002c1 00000000 08000421     \e..........!...

08005f90 <testbmk5>:
 8005f90:	0800665c 00000000 00000000 080011c1     \f..............

08005fa0 <testbmk2>:
 8005fa0:	080066b0 00000000 00000000 08001451     .f..........Q...

08005fb0 <testbmk3>:
 8005fb0:	08006698 00000000 00000000 08001371     .f..........q...

08005fc0 <testbmk4>:
 8005fc0:	0800667c 00000000 00000000 08001231     |f..........1...

08005fd0 <testbmk6>:
 8005fd0:	0800663c 00000000 00000000 08001151     <f..........Q...

08005fe0 <patternsys>:
 8005fe0:	08005eb0 08005f30 08005f40 00000000     .^..0_..@_......

08005ff0 <testpools1>:
 8005ff0:	08006794 08001dd1 00000000 08001e21     .g..........!...

08006000 <testbmk9>:
 8006000:	080065c4 00000000 00000000 08000581     .e..............

08006010 <patternbmk>:
 8006010:	08005f20 08005fa0 08005fb0 08005fc0      _..._..._..._..
 8006020:	08005f90 08005fd0 08005f70 08005f50     ._..._..p_..P_..
 8006030:	08006000 08005f60 08005e50 08005f80     .`..`_..P^..._..
 8006040:	08005e80 00000000 00000000 00000000     .^..............

08006050 <patterns>:
 8006050:	08005fe0 08006110 08006190 080061f0     ._...a...a...a..
 8006060:	08005e40 08006140 080061b0 080060d0     @^..@a...a...`..
 8006070:	08006a40 08005ea0 080060e0 08006010     @j...^...`...`..
	...

08006090 <testdyn1>:
 8006090:	08006768 08001d91 00000000 08001ff1     hg..............

080060a0 <testdyn2>:
 80060a0:	08006738 08001d71 00000000 08001ef1     8g..q...........

080060b0 <testdyn3>:
 80060b0:	08006710 080010f1 00000000 08001c31     .g..........1...

080060c0 <testmbox1>:
 80060c0:	0800682c 080041e1 00000000 08004391     ,h...A.......C..

080060d0 <patternheap>:
 80060d0:	080061d0 00000000 00000000 00000000     .a..............

080060e0 <patternqueues>:
 80060e0:	080060f0 08006130 00000000 00000000     .`..0a..........

080060f0 <testqueues1>:
 80060f0:	080066f8 080010c1 00000000 08001941     .f..........A...

08006100 <testmsg1>:
 8006100:	0800684c 00000000 00000000 08004991     Lh...........I..

08006110 <patternthd>:
 8006110:	08006150 08006160 08006170 08006180     Pa..`a..pa...a..
	...

08006130 <testqueues2>:
 8006130:	080066e0 08001091 00000000 080016c1     .f..............

08006140 <patternmbox>:
 8006140:	080060c0 00000000 00000000 00000000     .`..............

08006150 <testthd1>:
 8006150:	080069a8 00000000 00000000 08003881     .i...........8..

08006160 <testthd2>:
 8006160:	0800698c 00000000 00000000 08003731     .i..........17..

08006170 <testthd3>:
 8006170:	08006970 00000000 00000000 08003341     pi..........A3..

08006180 <testthd4>:
 8006180:	08006960 00000000 00000000 08003281     `i...........2..

08006190 <patternsem>:
 8006190:	08005ee0 08005ef0 08005f00 08005f10     .^...^..._..._..
	...

080061b0 <patternevt>:
 80061b0:	080061c0 08005e90 080061e0 00000000     .a...^...a......

080061c0 <testevt1>:
 80061c0:	08006808 08004381 00000000 08004271     .h...C......qB..

080061d0 <testheap1>:
 80061d0:	080067b0 08001df1 00000000 080020c1     .g........... ..

080061e0 <testevt3>:
 80061e0:	080067d8 08002461 00000000 08002301     .g..a$.......#..

080061f0 <patternmtx>:
 80061f0:	08006a10 08005df0 08005e00 08005e10     .j...]...^...^..
 8006200:	08005e20 08005e30 00000000 00000000      ^..0^..........
 8006210:	6e696c62 0072656b 202d2d2d 74737953     blinker.--- Syst
 8006220:	203a6d65 00000000 74796220 00007365     em: .... bytes..
 8006230:	202d2d2d 65726854 203a6461 00000000     --- Thread: ....
 8006240:	202d2d2d 656d6954 203a2072 00000000     --- Timer : ....
 8006250:	202d2d2d 616d6553 203a6870 00000000     --- Semaph: ....
 8006260:	202d2d2d 6e657645 203a5374 00000000     --- EventS: ....
 8006270:	202d2d2d 6e657645 203a4c74 00000000     --- EventL: ....
 8006280:	202d2d2d 6574754d 203a2078 00000000     --- Mutex : ....
 8006290:	202d2d2d 646e6f43 203a2e56 00000000     --- CondV.: ....
 80062a0:	202d2d2d 75657551 203a2065 00000000     --- Queue : ....
 80062b0:	202d2d2d 6c69614d 203a2e42 00000000     --- MailB.: ....
 80062c0:	202d2d2d 726f6353 203a2065 00000000     --- Score : ....
 80062d0:	636f6c20 6e752b6b 6b636f6c 0000532f      lock+unlock/S..
 80062e0:	69617720 69732b74 6c616e67 0000532f      wait+signal/S..
 80062f0:	6d697420 2f737265 00000053 74796220      timers/S... byt
 8006300:	532f7365 00000000 78746320 2f637773     es/S.... ctxswc/
 8006310:	00000053 73657220 64656863 73656c75     S... reschedules
 8006320:	202c532f 00000000 202a2a2a 6e72654b     /S, ....*** Kern
 8006330:	203a6c65 20202020 00002020 202a2a2a     el:       ..*** 
 8006340:	706d6f43 64656c69 2020203a 00002020     Compiled:     ..
 8006350:	202a2a2a 706d6f43 72656c69 2020203a     *** Compiler:   
 8006360:	00002020 202a2a2a 68637241 63657469       ..*** Architec
 8006370:	65727574 0000203a 202a2a2a 65726f43     ture: ..*** Core
 8006380:	72615620 746e6169 0000203a 202a2a2a      Variant: ..*** 
 8006390:	74726f50 666e4920 20203a6f 00002020     Port Info:    ..
 80063a0:	202a2a2a 74616c50 6d726f66 2020203a     *** Platform:   
 80063b0:	00002020 202a2a2a 74736554 616f4220       ..*** Test Boa
 80063c0:	203a6472 00002020 202d2d2d 74736554     rd:   ..--- Test
 80063d0:	73614320 00002065 00002820 202d2d2d      Case .. (..--- 
 80063e0:	75736552 203a746c 4c494146 20455255     Result: FAILURE 
 80063f0:	00002328 00005b20 616e6946 6572206c     (#.. [..Final re
 8006400:	746c7573 0000203a 656c6469 00000000     sult: ..idle....
 8006410:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 8006420:	20747365 74697573 00000065 002a2a2a     est suite...***.
 8006430:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 8006440:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 8006450:	00455255 2e312e33 00000033 2074634f     URE.3.1.3...Oct 
 8006460:	32203631 20363130 3631202d 3a39303a     16 2016 - 16:09:
 8006470:	00003430 20434347 2e392e34 30322033     04..GCC 4.9.3 20
 8006480:	35303531 28203932 656c6572 29657361     150529 (release)
 8006490:	52415b20 6d652f4d 64646562 342d6465      [ARM/embedded-4
 80064a0:	622d395f 636e6172 65722068 69736976     _9-branch revisi
 80064b0:	32206e6f 37393732 00005d37 764d5241     on 227977]..ARMv
 80064c0:	4d2d4537 00000000 74726f43 4d2d7865     7E-M....Cortex-M
 80064d0:	00000034 61766441 6465636e 72656b20     4...Advanced ker
 80064e0:	206c656e 65646f6d 00000000 334d5453     nel mode....STM3
 80064f0:	30344632 69482037 50206867 6f667265     2F407 High Perfo
 8006500:	6e616d72 77206563 20687469 20505344     rmance with DSP 
 8006510:	20646e61 00555046 694d5453 656f7263     and FPU.STMicroe
 8006520:	7463656c 696e6f72 53207363 32334d54     lectronics STM32
 8006530:	442d3446 6f637369 79726576 00000000     F4-Discovery....
 8006540:	636e6542 72616d68 52202c6b 66204d41     Benchmark, RAM f
 8006550:	70746f6f 746e6972 00000000 636e6542     ootprint....Benc
 8006560:	72616d68 6d202c6b 78657475 6c207365     hmark, mutexes l
 8006570:	2f6b636f 6f6c6e75 00006b63 636e6542     ock/unlock..Benc
 8006580:	72616d68 73202c6b 70616d65 65726f68     hmark, semaphore
 8006590:	61772073 732f7469 616e6769 0000006c     s wait/signal...
 80065a0:	636e6542 72616d68 76202c6b 75747269     Benchmark, virtu
 80065b0:	74206c61 72656d69 65732073 65722f74     al timers set/re
 80065c0:	00746573 636e6542 72616d68 49202c6b     set.Benchmark, I
 80065d0:	51204f2f 65756575 68742073 67756f72     /O Queues throug
 80065e0:	74757068 00000000 636e6542 72616d68     hput....Benchmar
 80065f0:	72202c6b 646e756f 626f7220 63206e69     k, round robin c
 8006600:	65746e6f 73207478 63746977 676e6968     ontext switching
 8006610:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 8006620:	20737361 63736572 75646568 202c656c     ass reschedule, 
 8006630:	68742035 64616572 00000073 636e6542     5 threads...Benc
 8006640:	72616d68 74202c6b 61657268 202c7364     hmark, threads, 
 8006650:	61657263 6f206574 00796c6e 636e6542     create only.Benc
 8006660:	72616d68 74202c6b 61657268 202c7364     hmark, threads, 
 8006670:	6c6c7566 63796320 0000656c 636e6542     full cycle..Benc
 8006680:	72616d68 63202c6b 65746e6f 73207478     hmark, context s
 8006690:	63746977 00000068 636e6542 72616d68     witch...Benchmar
 80066a0:	6d202c6b 61737365 20736567 00003323     k, messages #3..
 80066b0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 80066c0:	20736567 00003223 636e6542 72616d68     ges #2..Benchmar
 80066d0:	6d202c6b 61737365 20736567 00003123     k, messages #1..
 80066e0:	75657551 202c7365 7074756f 71207475     Queues, output q
 80066f0:	65756575 00000073 75657551 202c7365     ueues...Queues, 
 8006700:	75706e69 75712074 73657565 00000000     input queues....
 8006710:	616e7944 2063696d 73495041 6572202c     Dynamic APIs, re
 8006720:	74736967 61207972 7220646e 72656665     gistry and refer
 8006730:	65636e65 00000073 616e7944 2063696d     ences...Dynamic 
 8006740:	73495041 6874202c 64616572 72632073     APIs, threads cr
 8006750:	69746165 66206e6f 206d6f72 6f6d656d     eation from memo
 8006760:	70207972 006c6f6f 616e7944 2063696d     ry pool.Dynamic 
 8006770:	73495041 6874202c 64616572 72632073     APIs, threads cr
 8006780:	69746165 66206e6f 206d6f72 70616568     eation from heap
 8006790:	00000000 6f6d654d 50207972 736c6f6f     ....Memory Pools
 80067a0:	7571202c 2f657565 75716564 00657565     , queue/dequeue.
 80067b0:	70616548 6c61202c 61636f6c 6e6f6974     Heap, allocation
 80067c0:	646e6120 61726620 6e656d67 69746174      and fragmentati
 80067d0:	74206e6f 00747365 6e657645 202c7374     on test.Events, 
 80067e0:	656d6974 7374756f 00000000 6e657645     timeouts....Even
 80067f0:	202c7374 74696177 646e6120 6f726220     ts, wait and bro
 8006800:	61636461 00007473 6e657645 202c7374     adcast..Events, 
 8006810:	69676572 61727473 6e6f6974 646e6120     registration and
 8006820:	73696420 63746170 00000068 6c69614d      dispatch...Mail
 8006830:	65786f62 71202c73 69756575 6120676e     boxes, queuing a
 8006840:	7420646e 6f656d69 00737475 7373654d     nd timeouts.Mess
 8006850:	73656761 6f6c202c 0000706f 646e6f43     ages, loop..Cond
 8006860:	2c726156 6f6f6220 74207473 00747365     Var, boost test.
 8006870:	646e6f43 2c726156 6f726220 61636461     CondVar, broadca
 8006880:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 8006890:	67697320 206c616e 74736574 00000000      signal test....
 80068a0:	6574754d 2c736578 61747320 00737574     Mutexes, status.
 80068b0:	6574754d 2c736578 69727020 7469726f     Mutexes, priorit
 80068c0:	65722079 6e727574 00000000 6574754d     y return....Mute
 80068d0:	2c736578 69727020 7469726f 6e652079     xes, priority en
 80068e0:	75657571 20676e69 74736574 00000000     queuing test....
 80068f0:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 8006900:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 8006910:	00000000 616d6553 726f6870 202c7365     ....Semaphores, 
 8006920:	6d6f7461 73206369 616e6769 61772d6c     atomic signal-wa
 8006930:	00007469 616d6553 726f6870 202c7365     it..Semaphores, 
 8006940:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 8006950:	202c7365 75716e65 6e697565 00000067     es, enqueuing...
 8006960:	65726854 2c736461 6c656420 00737961     Threads, delays.
 8006970:	65726854 2c736461 69727020 7469726f     Threads, priorit
 8006980:	68632079 65676e61 00000000 65726854     y change....Thre
 8006990:	2c736461 716e6520 69756575 7420676e     ads, enqueuing t
 80069a0:	20747365 00003223 65726854 2c736461     est #2..Threads,
 80069b0:	716e6520 69756575 7420676e 20747365      enqueuing test 
 80069c0:	00003123 74737953 202c6d65 65746e69     #1..System, inte
 80069d0:	74697267 00000079 74737953 202c6d65     grity...System, 
 80069e0:	65746e69 70757272 68207374 6c646e61     interrupts handl
 80069f0:	00676e69 74737953 202c6d65 74697263     ing.System, crit
 8006a00:	6c616369 6e6f7a20 00007365 00000000     ical zones......

08006a10 <testmtx1>:
 8006a10:	080068cc 08002811 00000000 08002bf1     .h...(.......+..

08006a20 <wa>:
 8006a20:	20000cf0 20000e38 20000f80 200010c8     ... 8.. ... ... 
 8006a30:	20001210 00000000 00000000 00000000     ... ............

08006a40 <patternpools>:
 8006a40:	08005ff0 00000000 00000000 00000000     ._..............
 8006a50:	72687420 73646165 0000532f 67736d20      threads/S.. msg
 8006a60:	2c532f73 00000020 44434241 00000000     s/S, ...ABCD....
 8006a70:	00000041 00000000 00000000 00000000     A...............
 8006a80:	00000042 00000043 00000044 00004241     B...C...D...AB..
 8006a90:	44434241 00000045 00000000 00000000     ABCDE...........
 8006aa0:	00000a0d 00000000 00000000 00000000     ................
 8006ab0:	00434241 00000000 00000000 00000000     ABC.............

08006ac0 <evhndl>:
 8006ac0:	08004371 08004361 08004351 00000000     qC..aC..QC......

08006ad0 <ram_areas>:
 8006ad0:	08006c08 20001378 20001378 20001378     .l..x.. x.. x.. 
 8006ae0:	08006c08 20000000 20000000 20000000     .l..... ... ... 
 8006af0:	08006c08 2001c000 2001c000 2001c000     .l..... ... ... 
 8006b00:	08006c08 00000000 00000000 00000000     .l..............
 8006b10:	08006c08 10000000 10000000 10000000     .l..............
 8006b20:	08006c08 40024000 40024000 40024000     .l...@.@.@.@.@.@
 8006b30:	08006c08 00000000 00000000 00000000     .l..............
 8006b40:	08006c08 00000000 00000000 00000000     .l..............
